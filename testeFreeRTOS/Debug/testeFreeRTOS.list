
testeFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800ade8  0800ade8  0000bde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b290  0800b290  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b290  0800b290  0000c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b298  0800b298  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b298  0800b298  0000c298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b29c  0800b29c  0000c29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b2a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb4  200001d8  0800b478  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e8c  0800b478  0000de8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d754  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ccd  00000000  00000000  0002a95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141a  00000000  00000000  00030018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fd2  00000000  00000000  00031432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bddf  00000000  00000000  00036404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d30f6  00000000  00000000  000521e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001252d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc0  00000000  00000000  0012531c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800add0 	.word	0x0800add0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800add0 	.word	0x0800add0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ef0:	1d39      	adds	r1, r7, #4
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <__io_putchar+0x20>)
 8000efa:	f003 fee3 	bl	8004cc4 <HAL_UART_Transmit>

  return ch;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200001f4 	.word	0x200001f4

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f001 f839 	bl	8001f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f880 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fa94 	bl	8001444 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f1c:	f000 f8c8 	bl	80010b0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000f20:	f000 f910 	bl	8001144 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000f24:	f000 fa0a 	bl	800133c <MX_TIM16_Init>
  MX_TIM2_Init();
 8000f28:	f000 f9ba 	bl	80012a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f2c:	4828      	ldr	r0, [pc, #160]	@ (8000fd0 <main+0xc4>)
 8000f2e:	f002 fb89 	bl	8003644 <HAL_TIM_Base_Start_IT>
  printf("** Teste inicial 3 %d** \n\r",count );
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <main+0xc8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4827      	ldr	r0, [pc, #156]	@ (8000fd8 <main+0xcc>)
 8000f3a:	f007 ffcf 	bl	8008edc <iprintf>

  /*## Start PWM signals generation #######################################*/
    /* Start channel 1 */
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <main+0xd0>)
 8000f42:	f002 fc41 	bl	80037c8 <HAL_TIM_PWM_Start>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <main+0x44>
    {
      /* PWM Generation Error */
      Error_Handler();
 8000f4c:	f000 fd18 	bl	8001980 <Error_Handler>
    }
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	2108      	movs	r1, #8
 8000f52:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <main+0xd0>)
 8000f54:	f002 fc38 	bl	80037c8 <HAL_TIM_PWM_Start>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <main+0x56>
        {
          /* PWM Generation Error */
          Error_Handler();
 8000f5e:	f000 fd0f 	bl	8001980 <Error_Handler>
        }
    if (HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <main+0xd4>)
 8000f66:	f002 fc2f 	bl	80037c8 <HAL_TIM_PWM_Start>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <main+0x68>
            {
              /* PWM Generation Error */
              Error_Handler();
 8000f70:	f000 fd06 	bl	8001980 <Error_Handler>
            }
    TIM1-> CCR1 = 3500;   //DIREITO // 4000
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <main+0xd8>)
 8000f76:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1-> CCR3 = 3900;				// 4795
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <main+0xd8>)
 8000f7e:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f84:	f004 fd5e 	bl	8005a44 <osKernelInitialize>
  /* creation of defaultTask */




  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <main+0xdc>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <main+0xe0>)
 8000f8e:	f004 fda3 	bl	8005ad8 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <main+0xe4>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000f98:	4a16      	ldr	r2, [pc, #88]	@ (8000ff4 <main+0xe8>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4816      	ldr	r0, [pc, #88]	@ (8000ff8 <main+0xec>)
 8000f9e:	f004 fd9b 	bl	8005ad8 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <main+0xf0>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000fa8:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <main+0xf4>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <main+0xf8>)
 8000fae:	f004 fd93 	bl	8005ad8 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <main+0xfc>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000fb8:	4a14      	ldr	r2, [pc, #80]	@ (800100c <main+0x100>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4814      	ldr	r0, [pc, #80]	@ (8001010 <main+0x104>)
 8000fbe:	f004 fd8b 	bl	8005ad8 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <main+0x108>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f004 fd60 	bl	8005a8c <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <main+0xc0>
 8000fd0:	200002d4 	.word	0x200002d4
 8000fd4:	20000384 	.word	0x20000384
 8000fd8:	0800ae18 	.word	0x0800ae18
 8000fdc:	20000288 	.word	0x20000288
 8000fe0:	20000320 	.word	0x20000320
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	0800ae4c 	.word	0x0800ae4c
 8000fec:	08001879 	.word	0x08001879
 8000ff0:	2000036c 	.word	0x2000036c
 8000ff4:	0800ae70 	.word	0x0800ae70
 8000ff8:	0800188d 	.word	0x0800188d
 8000ffc:	20000370 	.word	0x20000370
 8001000:	0800ae94 	.word	0x0800ae94
 8001004:	080018cd 	.word	0x080018cd
 8001008:	20000374 	.word	0x20000374
 800100c:	0800aeb8 	.word	0x0800aeb8
 8001010:	080018e1 	.word	0x080018e1
 8001014:	20000378 	.word	0x20000378

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	2238      	movs	r2, #56	@ 0x38
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f007 ffad 	bl	8008f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800103a:	2000      	movs	r0, #0
 800103c:	f001 faa6 	bl	800258c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800105a:	2355      	movs	r3, #85	@ 0x55
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fb40 	bl	80026f4 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107a:	f000 fc81 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2303      	movs	r3, #3
 8001084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fe3e 	bl	8002d18 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a2:	f000 fc6d 	bl	8001980 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	@ 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <MX_LPUART1_UART_Init+0x90>)
 80010b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010f2:	4812      	ldr	r0, [pc, #72]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010f4:	f003 fd96 	bl	8004c24 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 fc3f 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001106:	f004 fb8f 	bl	8005828 <HAL_UARTEx_SetTxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001110:	f000 fc36 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001118:	f004 fbc4 	bl	80058a4 <HAL_UARTEx_SetRxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001122:	f000 fc2d 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001128:	f004 fb45 	bl	80057b6 <HAL_UARTEx_DisableFifoMode>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001132:	f000 fc25 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f4 	.word	0x200001f4
 8001140:	40008000 	.word	0x40008000

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b098      	sub	sp, #96	@ 0x60
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2234      	movs	r2, #52	@ 0x34
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f007 ff08 	bl	8008f86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001178:	4a46      	ldr	r2, [pc, #280]	@ (8001294 <MX_TIM1_Init+0x150>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_VALUE;
 800117c:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <MX_TIM1_Init+0x154>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a46      	ldr	r2, [pc, #280]	@ (800129c <MX_TIM1_Init+0x158>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0ddb      	lsrs	r3, r3, #23
 8001188:	3b01      	subs	r3, #1
 800118a:	4a41      	ldr	r2, [pc, #260]	@ (8001290 <MX_TIM1_Init+0x14c>)
 800118c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PERIOD_VALUE;
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001196:	f241 3287 	movw	r2, #4999	@ 0x1387
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <MX_TIM1_Init+0x14c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ae:	4838      	ldr	r0, [pc, #224]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011b0:	f002 fab2 	bl	8003718 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f000 fbe1 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ce:	4619      	mov	r1, r3
 80011d0:	482f      	ldr	r0, [pc, #188]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011d2:	f003 fbd3 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011dc:	f000 fbd0 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	@ 0x60
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = PULSE1_VALUE;
 80011e4:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ea:	2300      	movs	r3, #0
 80011ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4822      	ldr	r0, [pc, #136]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001208:	f002 fd2e 	bl	8003c68 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001212:	f000 fbb5 	bl	8001980 <Error_Handler>
  }
  sConfigOC.Pulse = PULSE2_VALUE;
 8001216:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	481a      	ldr	r0, [pc, #104]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001226:	f002 fd1f 	bl	8003c68 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001230:	f000 fba6 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800125a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001272:	f003 fc05 	bl	8004a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800127c:	f000 fb80 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001282:	f000 fc5d 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8001286:	bf00      	nop
 8001288:	3760      	adds	r7, #96	@ 0x60
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000288 	.word	0x20000288
 8001294:	40012c00 	.word	0x40012c00
 8001298:	20000000 	.word	0x20000000
 800129c:	6b5fca6b 	.word	0x6b5fca6b

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c8:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d6:	221e      	movs	r2, #30
 80012d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e6:	4814      	ldr	r0, [pc, #80]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012e8:	f002 f954 	bl	8003594 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012f2:	f000 fb45 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001304:	f002 fdc4 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800130e:	f000 fb37 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001320:	f003 fb2c 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800132a:	f000 fb29 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002d4 	.word	0x200002d4

0800133c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2234      	movs	r2, #52	@ 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fe12 	bl	8008f86 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001364:	4a34      	ldr	r2, [pc, #208]	@ (8001438 <MX_TIM16_Init+0xfc>)
 8001366:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = PRESCALER_VALUE2;
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <MX_TIM16_Init+0x100>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <MX_TIM16_Init+0x104>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0d5b      	lsrs	r3, r3, #21
 8001374:	3b01      	subs	r3, #1
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001378:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = PERIOD_VALUE2;
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001382:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001386:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800139a:	4826      	ldr	r0, [pc, #152]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800139c:	f002 f8fa 	bl	8003594 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f000 faeb 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80013aa:	4822      	ldr	r0, [pc, #136]	@ (8001434 <MX_TIM16_Init+0xf8>)
 80013ac:	f002 f9b4 	bl	8003718 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM16_Init+0x7e>
  {
    Error_Handler();
 80013b6:	f000 fae3 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ba:	2360      	movs	r3, #96	@ 0x60
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = PULSE1_VALUE2;
 80013be:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_TIM16_Init+0xf8>)
 80013e2:	f002 fc41 	bl	8003c68 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM16_Init+0xb4>
  {
    Error_Handler();
 80013ec:	f000 fac8 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001408:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001418:	f003 fb32 	bl	8004a80 <HAL_TIMEx_ConfigBreakDeadTime>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM16_Init+0xea>
  {
    Error_Handler();
 8001422:	f000 faad 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001426:	4803      	ldr	r0, [pc, #12]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001428:	f000 fb8a 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3750      	adds	r7, #80	@ 0x50
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000320 	.word	0x20000320
 8001438:	40014400 	.word	0x40014400
 800143c:	20000000 	.word	0x20000000
 8001440:	6b5fca6b 	.word	0x6b5fca6b

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b72      	ldr	r3, [pc, #456]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a71      	ldr	r2, [pc, #452]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a6b      	ldr	r2, [pc, #428]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b69      	ldr	r3, [pc, #420]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b60      	ldr	r3, [pc, #384]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|LED_PA9_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 2132 	movw	r1, #562	@ 0x232
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c4:	f001 f832 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEBPC7_GPIO_Port, LEBPC7_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	4856      	ldr	r0, [pc, #344]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80014ce:	f001 f82d 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	484f      	ldr	r0, [pc, #316]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80014ea:	f000 fe85 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Frente_Direito_IR_Pin Frente_Esquerda_IR_Pin Direito_IR_Pin */
  GPIO_InitStruct.Pin = Frente_Direito_IR_Pin|Frente_Esquerda_IR_Pin|Direito_IR_Pin;
 80014ee:	f241 030c 	movw	r3, #4108	@ 0x100c
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014f4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4848      	ldr	r0, [pc, #288]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 8001506:	f000 fe77 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Esquerdo_IR_Pin */
  GPIO_InitStruct.Pin = Esquerdo_IR_Pin;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800150e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Esquerdo_IR_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 fe69 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin LED_PA9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|LED_PA9_Pin;
 8001526:	f240 2332 	movw	r3, #562	@ 0x232
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001542:	f000 fe59 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001546:	2340      	movs	r3, #64	@ 0x40
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4833      	ldr	r0, [pc, #204]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 800155a:	f000 fe4d 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEBPC7_Pin */
  GPIO_InitStruct.Pin = LEBPC7_Pin;
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEBPC7_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	482c      	ldr	r0, [pc, #176]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 8001576:	f000 fe3f 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CallBack_PC10_Pin CallBack_PB7_Pin */
  GPIO_InitStruct.Pin = CallBack_PC10_Pin|CallBack_PB7_Pin;
 800157a:	23c0      	movs	r3, #192	@ 0xc0
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4827      	ldr	r0, [pc, #156]	@ (800162c <MX_GPIO_Init+0x1e8>)
 8001590:	f000 fe32 	bl	80021f8 <HAL_GPIO_Init>


  /////////////////////////////////////////
  /*Configure GPIO pins : BUZZER_PIN */
  GPIO_InitStruct.Pin = BUZZER_PIN;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f000 fe22 	bl	80021f8 <HAL_GPIO_Init>

 // Configuração do pino meta como entrada
  GPIO_InitStruct.Pin = Meta_Pin;
 80015b4:	2302      	movs	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Meta_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80015c8:	f000 fe16 	bl	80021f8 <HAL_GPIO_Init>
/////////////////////////////////////////////


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2105      	movs	r1, #5
 80015d0:	2006      	movs	r0, #6
 80015d2:	f000 fde9 	bl	80021a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015d6:	2006      	movs	r0, #6
 80015d8:	f000 fe00 	bl	80021dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	2008      	movs	r0, #8
 80015e2:	f000 fde1 	bl	80021a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015e6:	2008      	movs	r0, #8
 80015e8:	f000 fdf8 	bl	80021dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2009      	movs	r0, #9
 80015f2:	f000 fdd9 	bl	80021a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015f6:	2009      	movs	r0, #9
 80015f8:	f000 fdf0 	bl	80021dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	2017      	movs	r0, #23
 8001602:	f000 fdd1 	bl	80021a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001606:	2017      	movs	r0, #23
 8001608:	f000 fde8 	bl	80021dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	2028      	movs	r0, #40	@ 0x28
 8001612:	f000 fdc9 	bl	80021a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001616:	2028      	movs	r0, #40	@ 0x28
 8001618:	f000 fde0 	bl	80021dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000800 	.word	0x48000800
 800162c:	48000400 	.word	0x48000400

08001630 <ajustePWM>:

/* USER CODE BEGIN 4 */
void ajustePWM (void){
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0


}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <play_tone>:


void play_tone(uint16_t frequency, uint32_t duration) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
    if (frequency == 0) {
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <play_tone+0x1a>
        HAL_Delay(duration);
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f000 fcce 	bl	8001ff4 <HAL_Delay>
        return;
 8001658:	e02c      	b.n	80016b4 <play_tone+0x74>
    }

    uint32_t period = 1000000 / frequency;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <play_tone+0x7c>)
 800165e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001662:	613b      	str	r3, [r7, #16]
    uint32_t half_period = period / 2;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	60fb      	str	r3, [r7, #12]

    for (uint32_t i = 0; i < (duration * 1000) / period; i++) {
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e016      	b.n	800169e <play_tone+0x5e>
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167a:	f000 ff57 	bl	800252c <HAL_GPIO_WritePin>
        HAL_Delay(half_period);
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fcb8 	bl	8001ff4 <HAL_Delay>
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168e:	f000 ff4d 	bl	800252c <HAL_GPIO_WritePin>
        HAL_Delay(half_period);
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fcae 	bl	8001ff4 <HAL_Delay>
    for (uint32_t i = 0; i < (duration * 1000) / period; i++) {
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016a4:	fb03 f202 	mul.w	r2, r3, r2
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3dd      	bcc.n	8001670 <play_tone+0x30>
    }
}
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	000f4240 	.word	0x000f4240

080016c0 <IR_esquerdo_func>:


void IR_esquerdo_func(void){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	 if((GPIOA -> IDR & GPIO_PIN_0)){ //IF STATUS PIN is HIGH
 80016c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <IR_esquerdo_func+0x18>
		// printf("\rSensor esquerdo: Livre! \r\n");
		 flagE =0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <IR_esquerdo_func+0x38>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOA -> IDR & GPIO_PIN_0)){ //IF STATUS PIN is LOW
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <IR_esquerdo_func+0x2c>
	    //	printf("\rSensor esquerdo: Parede!\r\n");
	    	flagE=1;
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <IR_esquerdo_func+0x38>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

	    }
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000038c 	.word	0x2000038c

080016fc <IR_direito_func>:
void  IR_direito_func(void){
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_12)){ //IF STATUS PIN is HIGH
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <IR_direito_func+0x34>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <IR_direito_func+0x16>
		// printf("\rSensor Direito: Livre! \r\n");
		 flagD=0;
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <IR_direito_func+0x38>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_12)){ //IF STATUS PIN is LOW
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <IR_direito_func+0x34>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <IR_direito_func+0x28>
	    //	printf("\rSensor Direito: Parede!\r\n");
	    	flagD=1;
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <IR_direito_func+0x38>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
	    }
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	48000800 	.word	0x48000800
 8001734:	20000390 	.word	0x20000390

08001738 <IR_frente_esquerda_func>:
void IR_frente_esquerda_func(void){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_3)){ //IF STATUS PIN is HIGH
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <IR_frente_esquerda_func+0x34>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <IR_frente_esquerda_func+0x16>
		 //printf("\rSensor Frente  esquerdo: Livre! \r\n");
		 flagFE = 0;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <IR_frente_esquerda_func+0x38>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_3)){ //IF STATUS PIN is LOW
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <IR_frente_esquerda_func+0x34>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <IR_frente_esquerda_func+0x28>
	    	//printf("\rSensor frente esquerdo: Parede!\r\n");
	    	flagFE = 1;
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <IR_frente_esquerda_func+0x38>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
	    }
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	48000800 	.word	0x48000800
 8001770:	20000398 	.word	0x20000398

08001774 <IR_frente_direita_func>:
void IR_frente_direita_func(void){
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_2)){ //IF STATUS PIN is HIGH
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <IR_frente_direita_func+0x34>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <IR_frente_direita_func+0x16>
		 //printf("\rSensor frente direito: Livre! \r\n");
		 flagFD = 0;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <IR_frente_direita_func+0x38>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_2)){ //IF STATUS PIN is LOW
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <IR_frente_direita_func+0x34>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <IR_frente_direita_func+0x28>
	    	//printf("\rSensor frente direito: Parede!\r\n");
	    	flagFD = 1;
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <IR_frente_direita_func+0x38>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
	    }
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	48000800 	.word	0x48000800
 80017ac:	20000394 	.word	0x20000394

080017b0 <CallBack_PC10>:

void CallBack_PC10(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	count_esq = count_esq + 1;
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <CallBack_PC10+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a03      	ldr	r2, [pc, #12]	@ (80017c8 <CallBack_PC10+0x18>)
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000380 	.word	0x20000380

080017cc <CallBack_PB7>:
void CallBack_PB7(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	count_dir = count_dir + 1;
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <CallBack_PB7+0x18>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <CallBack_PB7+0x18>)
 80017d8:	6013      	str	r3, [r2, #0]

}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	2000037c 	.word	0x2000037c

080017e8 <CallBack_ExtePC13>:
void CallBack_ExtePC13(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

	fowardRobot();
 80017ec:	f000 f826 	bl	800183c <fowardRobot>
	pedestrian = 1;
 80017f0:	4b02      	ldr	r3, [pc, #8]	@ (80017fc <CallBack_ExtePC13+0x14>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000388 	.word	0x20000388

08001800 <stopRobot>:
	else return aux;
}


//para o carrinho
void stopRobot(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);    //AMARELO CARRO
 8001804:	2201      	movs	r2, #1
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <stopRobot+0x38>)
 800180a:	f000 fe8f 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    //GREEN DO CARRO
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001818:	f000 fe88 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2102      	movs	r1, #2
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f000 fe82 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2110      	movs	r1, #16
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f000 fe7c 	bl	800252c <HAL_GPIO_WritePin>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	48000800 	.word	0x48000800

0800183c <fowardRobot>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

}

void fowardRobot(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);    //AMARELO CARRO //roda direita
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <fowardRobot+0x38>)
 8001846:	f000 fe71 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // GREEN DO CARRO
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f000 fe6a 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //esquerda
 8001858:	2200      	movs	r2, #0
 800185a:	2102      	movs	r1, #2
 800185c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001860:	f000 fe64 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2110      	movs	r1, #16
 8001868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186c:	f000 fe5e 	bl	800252c <HAL_GPIO_WritePin>

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	48000800 	.word	0x48000800

08001878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	// if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_RESET) {
	            // Move o carrinho por 0.5 segundos
		// 	 play_tone(NOTE_A4, 500);
	       // }
	      //  HAL_Delay(100);  // Pequeno atraso para evitar leituras contínuas
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <StartTask02>:
void StartTask02(void *argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_RESET){
 8001894:	2102      	movs	r1, #2
 8001896:	2002      	movs	r0, #2
 8001898:	f000 fe30 	bl	80024fc <HAL_GPIO_ReadPin>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <StartTask02+0x1a>
		stopRobot();
 80018a2:	f7ff ffad 	bl	8001800 <stopRobot>
	}

	if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_SET){
 80018a6:	2102      	movs	r1, #2
 80018a8:	2002      	movs	r0, #2
 80018aa:	f000 fe27 	bl	80024fc <HAL_GPIO_ReadPin>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <StartTask02+0x38>
		fowardRobot();
 80018b4:	f7ff ffc2 	bl	800183c <fowardRobot>
		play_tone(NOTE_A4, 500);
 80018b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80018bc:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80018c0:	f7ff febe 	bl	8001640 <play_tone>
	}
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <StartTask03>:
void StartTask03(void *argument)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <StartTask04>:
void StartTask04(void *argument)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d101      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x16>
		ajustePWM();
 8001906:	f7ff fe93 	bl	8001630 <ajustePWM>
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001914:	f000 fb50 	bl	8001fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40000400 	.word	0x40000400

08001924 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if ( GPIO_Pin == CallBack_PC10_Pin){
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b40      	cmp	r3, #64	@ 0x40
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_EXTI_Callback+0x14>
	  CallBack_PC10();
 8001934:	f7ff ff3c 	bl	80017b0 <CallBack_PC10>
  }
  if ( GPIO_Pin == CallBack_PB7_Pin ){
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b80      	cmp	r3, #128	@ 0x80
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_EXTI_Callback+0x1e>
  	  CallBack_PB7();
 800193e:	f7ff ff45 	bl	80017cc <CallBack_PB7>
    }
  if ( GPIO_Pin == B1_Pin){
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001948:	d101      	bne.n	800194e <HAL_GPIO_EXTI_Callback+0x2a>
  	  CallBack_ExtePC13();
 800194a:	f7ff ff4d 	bl	80017e8 <CallBack_ExtePC13>
    }
  if (GPIO_Pin== Esquerdo_IR_Pin){
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_EXTI_Callback+0x34>
	  IR_esquerdo_func();
 8001954:	f7ff feb4 	bl	80016c0 <IR_esquerdo_func>
  }
  if (GPIO_Pin== Direito_IR_Pin){
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x40>
  	  IR_direito_func();
 8001960:	f7ff fecc 	bl	80016fc <IR_direito_func>
    }
  if (GPIO_Pin== Frente_Esquerda_IR_Pin){
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d101      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x4a>
  	  IR_frente_esquerda_func();
 800196a:	f7ff fee5 	bl	8001738 <IR_frente_esquerda_func>
    }
  if (GPIO_Pin== Frente_Direito_IR_Pin){
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_EXTI_Callback+0x54>
	  IR_frente_direita_func();
 8001974:	f7ff fefe 	bl	8001774 <IR_frente_direita_func>
    }

}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_MspInit+0x50>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <HAL_MspInit+0x50>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6613      	str	r3, [r2, #96]	@ 0x60
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_MspInit+0x50>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_MspInit+0x50>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_MspInit+0x50>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_MspInit+0x50>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	210f      	movs	r1, #15
 80019c6:	f06f 0001 	mvn.w	r0, #1
 80019ca:	f000 fbed 	bl	80021a8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019ce:	f000 fe81 	bl	80026d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	@ 0x68
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2244      	movs	r2, #68	@ 0x44
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fac0 	bl	8008f86 <memset>
  if(huart->Instance==LPUART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <HAL_UART_MspInit+0xa8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d136      	bne.n	8001a7e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a10:	2320      	movs	r3, #32
 8001a12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fbc9 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff ffaa 	bl	8001980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_UART_MspInit+0xac>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7a:	f000 fbbd 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3768      	adds	r7, #104	@ 0x68
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40008000 	.word	0x40008000
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10b      	bne.n	8001aba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae0:	d114      	bne.n	8001b0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	201c      	movs	r0, #28
 8001b00:	f000 fb52 	bl	80021a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b04:	201c      	movs	r0, #28
 8001b06:	f000 fb69 	bl	80021dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b0a:	e010      	b.n	8001b2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10b      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40014400 	.word	0x40014400

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <HAL_TIM_MspPostInit+0xac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11e      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001b7a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9a:	f000 fb2d 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001b9e:	e021      	b.n	8001be4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11c      	bne.n	8001be4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bc2:	2340      	movs	r3, #64	@ 0x40
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be0:	f000 fb0a 	bl	80021f8 <HAL_GPIO_Init>
}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	@ 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40014400 	.word	0x40014400

08001bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	@ 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001c08:	4b2c      	ldr	r3, [pc, #176]	@ (8001cbc <HAL_InitTick+0xc4>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cbc <HAL_InitTick+0xc4>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c14:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <HAL_InitTick+0xc4>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fa4a 	bl	80030c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c30:	f001 fa1c 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8001c34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_InitTick+0xc8>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9b      	lsrs	r3, r3, #18
 8001c40:	3b01      	subs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c46:	4a20      	ldr	r2, [pc, #128]	@ (8001cc8 <HAL_InitTick+0xd0>)
 8001c48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c50:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001c52:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim3);
 8001c64:	4817      	ldr	r0, [pc, #92]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c66:	f001 fc95 	bl	8003594 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11b      	bne.n	8001cb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001c78:	4812      	ldr	r0, [pc, #72]	@ (8001cc4 <HAL_InitTick+0xcc>)
 8001c7a:	f001 fce3 	bl	8003644 <HAL_TIM_Base_Start_IT>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c8c:	201d      	movs	r0, #29
 8001c8e:	f000 faa5 	bl	80021dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d808      	bhi.n	8001caa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	201d      	movs	r0, #29
 8001c9e:	f000 fa83 	bl	80021a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_InitTick+0xd4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e002      	b.n	8001cb0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3730      	adds	r7, #48	@ 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	2000039c 	.word	0x2000039c
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Esquerdo_IR_Pin);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fc26 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Frente_Direito_IR_Pin);
 8001d18:	2004      	movs	r0, #4
 8001d1a:	f000 fc1f 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Frente_Esquerda_IR_Pin);
 8001d26:	2008      	movs	r0, #8
 8001d28:	f000 fc18 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CallBack_PC10_Pin);
 8001d34:	2040      	movs	r0, #64	@ 0x40
 8001d36:	f000 fc11 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CallBack_PB7_Pin);
 8001d3a:	2080      	movs	r0, #128	@ 0x80
 8001d3c:	f000 fc0e 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <TIM2_IRQHandler+0x10>)
 8001d4a:	f001 fe3d 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002d4 	.word	0x200002d4

08001d58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <TIM3_IRQHandler+0x10>)
 8001d5e:	f001 fe33 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000039c 	.word	0x2000039c

08001d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Direito_IR_Pin);
 8001d70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d74:	f000 fbf2 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d7c:	f000 fbee 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_kill>:

int _kill(int pid, int sig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d9e:	f007 f945 	bl	800902c <__errno>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2216      	movs	r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
  return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_exit>:

void _exit (int status)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffe7 	bl	8001d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <_exit+0x12>

08001dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e00a      	b.n	8001df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ddc:	f3af 8000 	nop.w
 8001de0:	4601      	mov	r1, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf0      	blt.n	8001ddc <_read+0x12>
  }

  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e009      	b.n	8001e2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f862 	bl	8000ee8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbf1      	blt.n	8001e16 <_write+0x12>
  }
  return len;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_close>:

int _close(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e64:	605a      	str	r2, [r3, #4]
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_isatty>:

int _isatty(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f007 f8aa 	bl	800902c <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20008000 	.word	0x20008000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	200003e8 	.word	0x200003e8
 8001f0c:	20001e90 	.word	0x20001e90

08001f10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <SystemInit+0x20>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <SystemInit+0x20>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f34:	480d      	ldr	r0, [pc, #52]	@ (8001f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f38:	f7ff ffea 	bl	8001f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <LoopForever+0xe>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f54:	4c0a      	ldr	r4, [pc, #40]	@ (8001f80 <LoopForever+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f007 f869 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f66:	f7fe ffd1 	bl	8000f0c <main>

08001f6a <LoopForever>:

LoopForever:
    b LoopForever
 8001f6a:	e7fe      	b.n	8001f6a <LoopForever>
  ldr   r0, =_estack
 8001f6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f78:	0800b2a0 	.word	0x0800b2a0
  ldr r2, =_sbss
 8001f7c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f80:	20001e8c 	.word	0x20001e8c

08001f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>

08001f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 f8fe 	bl	8002192 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f96:	200f      	movs	r0, #15
 8001f98:	f7ff fe2e 	bl	8001bf8 <HAL_InitTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	e001      	b.n	8001fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa8:	f7ff fcf0 	bl	800198c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fac:	79fb      	ldrb	r3, [r7, #7]

}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_IncTick+0x1c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_IncTick+0x20>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a03      	ldr	r2, [pc, #12]	@ (8001fd4 <HAL_IncTick+0x1c>)
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	200003ec 	.word	0x200003ec
 8001fd8:	20000008 	.word	0x20000008

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200003ec 	.word	0x200003ec

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d004      	beq.n	8002018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_Delay+0x40>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002018:	bf00      	nop
 800201a:	f7ff ffdf 	bl	8001fdc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	429a      	cmp	r2, r3
 8002028:	d8f7      	bhi.n	800201a <HAL_Delay+0x26>
  {
  }
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000008 	.word	0x20000008

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	@ (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	@ (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff4c 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b6:	f7ff ff63 	bl	8002080 <__NVIC_GetPriorityGrouping>
 80021ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7ff ffb3 	bl	800212c <NVIC_EncodePriority>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff82 	bl	80020d8 <__NVIC_SetPriority>
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff56 	bl	800209c <__NVIC_EnableIRQ>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002206:	e15a      	b.n	80024be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 814c 	beq.w	80024b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002234:	2b02      	cmp	r3, #2
 8002236:	d130      	bne.n	800229a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226e:	2201      	movs	r2, #1
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0201 	and.w	r2, r3, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d123      	bne.n	800232a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	6939      	ldr	r1, [r7, #16]
 8002326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0203 	and.w	r2, r3, #3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80a6 	beq.w	80024b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b5b      	ldr	r3, [pc, #364]	@ (80024dc <HAL_GPIO_Init+0x2e4>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002370:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_GPIO_Init+0x2e4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6613      	str	r3, [r2, #96]	@ 0x60
 8002378:	4b58      	ldr	r3, [pc, #352]	@ (80024dc <HAL_GPIO_Init+0x2e4>)
 800237a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002384:	4a56      	ldr	r2, [pc, #344]	@ (80024e0 <HAL_GPIO_Init+0x2e8>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ae:	d01f      	beq.n	80023f0 <HAL_GPIO_Init+0x1f8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a4c      	ldr	r2, [pc, #304]	@ (80024e4 <HAL_GPIO_Init+0x2ec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d019      	beq.n	80023ec <HAL_GPIO_Init+0x1f4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a4b      	ldr	r2, [pc, #300]	@ (80024e8 <HAL_GPIO_Init+0x2f0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x1f0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a4a      	ldr	r2, [pc, #296]	@ (80024ec <HAL_GPIO_Init+0x2f4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1ec>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a49      	ldr	r2, [pc, #292]	@ (80024f0 <HAL_GPIO_Init+0x2f8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1e8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a48      	ldr	r2, [pc, #288]	@ (80024f4 <HAL_GPIO_Init+0x2fc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1e4>
 80023d8:	2305      	movs	r3, #5
 80023da:	e00a      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023dc:	2306      	movs	r3, #6
 80023de:	e008      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023e4:	2303      	movs	r3, #3
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023f0:	2300      	movs	r3, #0
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002402:	4937      	ldr	r1, [pc, #220]	@ (80024e0 <HAL_GPIO_Init+0x2e8>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002410:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002434:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800243a:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800245e:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002464:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002488:	4a1b      	ldr	r2, [pc, #108]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f ae9d 	bne.w	8002208 <HAL_GPIO_Init+0x10>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	48001400 	.word	0x48001400
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002548:	e002      	b.n	8002550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002572:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f9d2 	bl	8001924 <HAL_GPIO_EXTI_Callback>
  }
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d141      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800259a:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d131      	bne.n	800260c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a8:	4b47      	ldr	r3, [pc, #284]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ae:	4a46      	ldr	r2, [pc, #280]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025c0:	4a41      	ldr	r2, [pc, #260]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c8:	4b40      	ldr	r3, [pc, #256]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2232      	movs	r2, #50	@ 0x32
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a3f      	ldr	r2, [pc, #252]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025de:	e002      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d102      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f2      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fa:	4b33      	ldr	r3, [pc, #204]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d158      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e057      	b.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002612:	4a2d      	ldr	r2, [pc, #180]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002618:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800261c:	e04d      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002624:	d141      	bne.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002632:	d131      	bne.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263a:	4a23      	ldr	r2, [pc, #140]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800264c:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002652:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2232      	movs	r2, #50	@ 0x32
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	0c9b      	lsrs	r3, r3, #18
 8002666:	3301      	adds	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266a:	e002      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3b01      	subs	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267e:	d102      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f2      	bne.n	800266c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d112      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e011      	b.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026a8:	e007      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026b2:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40007000 	.word	0x40007000
 80026cc:	20000000 	.word	0x20000000
 80026d0:	431bde83 	.word	0x431bde83

080026d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e2:	6093      	str	r3, [r2, #8]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e2fe      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d075      	beq.n	80027fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4b97      	ldr	r3, [pc, #604]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271c:	4b94      	ldr	r3, [pc, #592]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0x3e>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d002      	beq.n	8002738 <HAL_RCC_OscConfig+0x44>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b8d      	ldr	r3, [pc, #564]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05b      	beq.n	80027fc <HAL_RCC_OscConfig+0x108>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d157      	bne.n	80027fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e2d9      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x74>
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a84      	ldr	r2, [pc, #528]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x98>
 8002772:	4b7f      	ldr	r3, [pc, #508]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7e      	ldr	r2, [pc, #504]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b7c      	ldr	r3, [pc, #496]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7b      	ldr	r2, [pc, #492]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 800278c:	4b78      	ldr	r3, [pc, #480]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a77      	ldr	r2, [pc, #476]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a74      	ldr	r2, [pc, #464]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7ff fc16 	bl	8001fdc <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fc12 	bl	8001fdc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e29e      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xc0>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff fc02 	bl	8001fdc <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7ff fbfe 	bl	8001fdc <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	@ 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e28a      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	4b60      	ldr	r3, [pc, #384]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0xe8>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280a:	4b59      	ldr	r3, [pc, #356]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002814:	4b56      	ldr	r3, [pc, #344]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0x136>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d002      	beq.n	8002830 <HAL_RCC_OscConfig+0x13c>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11f      	bne.n	8002870 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	4b4f      	ldr	r3, [pc, #316]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_OscConfig+0x154>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e25d      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	4946      	ldr	r1, [pc, #280]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800285c:	4b45      	ldr	r3, [pc, #276]	@ (8002974 <HAL_RCC_OscConfig+0x280>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f9c9 	bl	8001bf8 <HAL_InitTick>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d043      	beq.n	80028f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e249      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3c      	ldr	r2, [pc, #240]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff fbaa 	bl	8001fdc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff fba6 	bl	8001fdc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e232      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	492d      	ldr	r1, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
 80028be:	e01a      	b.n	80028f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fb86 	bl	8001fdc <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7ff fb82 	bl	8001fdc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e20e      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1e0>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d041      	beq.n	8002986 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01c      	beq.n	8002944 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7ff fb5f 	bl	8001fdc <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002922:	f7ff fb5b 	bl	8001fdc <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1e7      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <HAL_RCC_OscConfig+0x22e>
 8002942:	e020      	b.n	8002986 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <HAL_RCC_OscConfig+0x27c>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7ff fb42 	bl	8001fdc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295a:	e00d      	b.n	8002978 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7ff fb3e 	bl	8001fdc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d906      	bls.n	8002978 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1ca      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002978:	4b8c      	ldr	r3, [pc, #560]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ea      	bne.n	800295c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a6 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2b4>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x2b6>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	4b79      	ldr	r3, [pc, #484]	@ (8002bb0 <HAL_RCC_OscConfig+0x4bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d6:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCC_OscConfig+0x4bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x4bc>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fafb 	bl	8001fdc <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7ff faf7 	bl	8001fdc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e183      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCC_OscConfig+0x4bc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_RCC_OscConfig+0x32e>
 8002a10:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a16:	4a65      	ldr	r2, [pc, #404]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a20:	e024      	b.n	8002a6c <HAL_RCC_OscConfig+0x378>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d110      	bne.n	8002a4c <HAL_RCC_OscConfig+0x358>
 8002a2a:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	4a5e      	ldr	r2, [pc, #376]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	4a5a      	ldr	r2, [pc, #360]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a4a:	e00f      	b.n	8002a6c <HAL_RCC_OscConfig+0x378>
 8002a4c:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a62:	4a52      	ldr	r2, [pc, #328]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff fab2 	bl	8001fdc <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7ff faae 	bl	8001fdc <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e138      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a92:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ed      	beq.n	8002a7c <HAL_RCC_OscConfig+0x388>
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fa9b 	bl	8001fdc <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7ff fa97 	bl	8001fdc <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e121      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ed      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	4a34      	ldr	r2, [pc, #208]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af4:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002afa:	4a2c      	ldr	r2, [pc, #176]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7ff fa6a 	bl	8001fdc <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0c:	f7ff fa66 	bl	8001fdc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0f2      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1e:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCC_OscConfig+0x418>
 8002b2c:	e01b      	b.n	8002b66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b34:	4a1d      	ldr	r2, [pc, #116]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fa4d 	bl	8001fdc <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b46:	f7ff fa49 	bl	8001fdc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0d5      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80c9 	beq.w	8002d02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	f000 8083 	beq.w	8002c84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d15e      	bne.n	8002c44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_RCC_OscConfig+0x4b8>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7ff fa23 	bl	8001fdc <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b98:	e00c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff fa1f 	bl	8001fdc <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d905      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0ab      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ec      	bne.n	8002b9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4b52      	ldr	r3, [pc, #328]	@ (8002d10 <HAL_RCC_OscConfig+0x61c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6a11      	ldr	r1, [r2, #32]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0552      	lsls	r2, r2, #21
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bee:	0852      	lsrs	r2, r2, #1
 8002bf0:	3a01      	subs	r2, #1
 8002bf2:	0652      	lsls	r2, r2, #25
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bfa:	06d2      	lsls	r2, r2, #27
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	4943      	ldr	r1, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c04:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a40      	ldr	r2, [pc, #256]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c10:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a3d      	ldr	r2, [pc, #244]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7ff f9de 	bl	8001fdc <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7ff f9da 	bl	8001fdc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e066      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x530>
 8002c42:	e05e      	b.n	8002d02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f9c4 	bl	8001fdc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff f9c0 	bl	8001fdc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04c      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	4b28      	ldr	r3, [pc, #160]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c76:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4924      	ldr	r1, [pc, #144]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
 8002c82:	e03e      	b.n	8002d02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e039      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c90:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d12c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d123      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d113      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	019f800c 	.word	0x019f800c
 8002d14:	feeefffc 	.word	0xfeeefffc

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e11e      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b91      	ldr	r3, [pc, #580]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b8e      	ldr	r3, [pc, #568]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	498c      	ldr	r1, [pc, #560]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e106      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d073      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d74:	4b81      	ldr	r3, [pc, #516]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0f4      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d84:	f000 f9d0 	bl	8003128 <RCC_GetSysClockFreqFromPLLSource>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f80 <HAL_RCC_ClockConfig+0x268>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d93f      	bls.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d92:	4b7a      	ldr	r3, [pc, #488]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d033      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12f      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db2:	4b72      	ldr	r3, [pc, #456]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dba:	4a70      	ldr	r2, [pc, #448]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e024      	b.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0c6      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de0:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0be      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002df0:	f000 f8ce 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <HAL_RCC_ClockConfig+0x268>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d909      	bls.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e06:	4a5d      	ldr	r2, [pc, #372]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b5a      	ldr	r3, [pc, #360]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4957      	ldr	r1, [pc, #348]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7ff f8da 	bl	8001fdc <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7ff f8d6 	bl	8001fdc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e095      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b4e      	ldr	r3, [pc, #312]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a42      	ldr	r2, [pc, #264]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e84:	4b3d      	ldr	r3, [pc, #244]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4936      	ldr	r1, [pc, #216]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b80      	cmp	r3, #128	@ 0x80
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eae:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a32      	ldr	r2, [pc, #200]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eba:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d21d      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 020f 	bic.w	r2, r3, #15
 8002ed0:	4929      	ldr	r1, [pc, #164]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ed8:	f7ff f880 	bl	8001fdc <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7ff f87c 	bl	8001fdc <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e03b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1ed      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4917      	ldr	r1, [pc, #92]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490f      	ldr	r1, [pc, #60]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f42:	f000 f825 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490c      	ldr	r1, [pc, #48]	@ (8002f84 <HAL_RCC_ClockConfig+0x26c>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fe46 	bl	8001bf8 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	04c4b400 	.word	0x04c4b400
 8002f84:	0800aedc 	.word	0x0800aedc
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e047      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e03e      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fba:	4b23      	ldr	r3, [pc, #140]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d136      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8003050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	0a12      	lsrs	r2, r2, #8
 8002ff2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ffe:	4a13      	ldr	r2, [pc, #76]	@ (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	0a12      	lsrs	r2, r2, #8
 800300c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
      break;
 8003016:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0e5b      	lsrs	r3, r3, #25
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e001      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	00f42400 	.word	0x00f42400
 8003050:	016e3600 	.word	0x016e3600

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	0800aeec 	.word	0x0800aeec

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800309c:	f7ff ffda 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800aeec 	.word	0x0800aeec

080030c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	220f      	movs	r2, #15
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003106:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <HAL_RCC_GetClockConfig+0x60>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d10c      	bne.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800314c:	4a17      	ldr	r2, [pc, #92]	@ (80031ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	4a14      	ldr	r2, [pc, #80]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003156:	68d2      	ldr	r2, [r2, #12]
 8003158:	0a12      	lsrs	r2, r2, #8
 800315a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
    break;
 8003164:	e00c      	b.n	8003180 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	4a0e      	ldr	r2, [pc, #56]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	0a12      	lsrs	r2, r2, #8
 8003174:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    break;
 800317e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0e5b      	lsrs	r3, r3, #25
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800319a:	687b      	ldr	r3, [r7, #4]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40021000 	.word	0x40021000
 80031ac:	016e3600 	.word	0x016e3600
 80031b0:	00f42400 	.word	0x00f42400

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8098 	beq.w	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b43      	ldr	r3, [pc, #268]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b40      	ldr	r3, [pc, #256]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	4a3f      	ldr	r2, [pc, #252]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ee:	4b3d      	ldr	r3, [pc, #244]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fe:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a39      	ldr	r2, [pc, #228]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800320a:	f7fe fee7 	bl	8001fdc <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003210:	e009      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fe fee3 	bl	8001fdc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	74fb      	strb	r3, [r7, #19]
        break;
 8003224:	e005      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003226:	4b30      	ldr	r3, [pc, #192]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ef      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d159      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003238:	4b2a      	ldr	r3, [pc, #168]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01e      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d019      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003254:	4b23      	ldr	r3, [pc, #140]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800325e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003260:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	4a1f      	ldr	r2, [pc, #124]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003270:	4b1c      	ldr	r3, [pc, #112]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003280:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fea3 	bl	8001fdc <HAL_GetTick>
 8003296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003298:	e00b      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fe9f 	bl	8001fdc <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	74fb      	strb	r3, [r7, #19]
            break;
 80032b0:	e006      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ec      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	4b07      	ldr	r3, [pc, #28]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032dc:	e008      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f0:	7c7b      	ldrb	r3, [r7, #17]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4ba6      	ldr	r3, [pc, #664]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4aa5      	ldr	r2, [pc, #660]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330e:	4ba0      	ldr	r3, [pc, #640]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	f023 0203 	bic.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	499c      	ldr	r1, [pc, #624]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003330:	4b97      	ldr	r3, [pc, #604]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 020c 	bic.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4994      	ldr	r1, [pc, #592]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003352:	4b8f      	ldr	r3, [pc, #572]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	498b      	ldr	r1, [pc, #556]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003374:	4b86      	ldr	r3, [pc, #536]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	4983      	ldr	r1, [pc, #524]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003396:	4b7e      	ldr	r3, [pc, #504]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	497a      	ldr	r1, [pc, #488]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b8:	4b75      	ldr	r3, [pc, #468]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4972      	ldr	r1, [pc, #456]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033da:	4b6d      	ldr	r3, [pc, #436]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4969      	ldr	r1, [pc, #420]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033fc:	4b64      	ldr	r3, [pc, #400]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4961      	ldr	r1, [pc, #388]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b5c      	ldr	r3, [pc, #368]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	4958      	ldr	r1, [pc, #352]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	4950      	ldr	r1, [pc, #320]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a4a      	ldr	r2, [pc, #296]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003478:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	4942      	ldr	r1, [pc, #264]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003498:	4b3d      	ldr	r3, [pc, #244]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a3c      	ldr	r2, [pc, #240]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034b0:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	4934      	ldr	r1, [pc, #208]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e8:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f6:	4926      	ldr	r1, [pc, #152]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003520:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	4918      	ldr	r1, [pc, #96]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003558:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	490a      	ldr	r1, [pc, #40]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003584:	7cbb      	ldrb	r3, [r7, #18]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e049      	b.n	800363a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fe fa88 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fd7e 	bl	80040d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e04a      	b.n	80036f2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <HAL_TIM_Base_Start_IT+0xbc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d013      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_TIM_Base_Start_IT+0xc0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Base_Start_IT+0xc4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_TIM_Base_Start_IT+0xc8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_TIM_Base_Start_IT+0xcc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d115      	bne.n	80036dc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <HAL_TIM_Base_Start_IT+0xd0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d015      	beq.n	80036ee <HAL_TIM_Base_Start_IT+0xaa>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d011      	beq.n	80036ee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e008      	b.n	80036ee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e000      	b.n	80036f0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40013400 	.word	0x40013400
 8003710:	40014000 	.word	0x40014000
 8003714:	00010007 	.word	0x00010007

08003718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e049      	b.n	80037be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe f9a6 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fcbc 	bl	80040d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_TIM_PWM_Start+0x24>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e03c      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d109      	bne.n	8003806 <HAL_TIM_PWM_Start+0x3e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e02f      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start+0x58>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e022      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d109      	bne.n	800383a <HAL_TIM_PWM_Start+0x72>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e015      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b10      	cmp	r3, #16
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start+0x8c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e008      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e097      	b.n	800399e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xb6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	e023      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0xc6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388c:	e01b      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800389c:	e013      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xe6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ac:	e00b      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0xf6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038bc:	e003      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	6839      	ldr	r1, [r7, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f82e 	bl	8004930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <HAL_TIM_PWM_Start+0x1e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a32      	ldr	r2, [pc, #200]	@ (80039ac <HAL_TIM_PWM_Start+0x1e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a30      	ldr	r2, [pc, #192]	@ (80039b0 <HAL_TIM_PWM_Start+0x1e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_TIM_PWM_Start+0x1ec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	@ (80039b8 <HAL_TIM_PWM_Start+0x1f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_Start+0x142>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_TIM_PWM_Start+0x144>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a20      	ldr	r2, [pc, #128]	@ (80039a8 <HAL_TIM_PWM_Start+0x1e0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003932:	d013      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	@ (80039bc <HAL_TIM_PWM_Start+0x1f4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <HAL_TIM_PWM_Start+0x1f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <HAL_TIM_PWM_Start+0x1e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a16      	ldr	r2, [pc, #88]	@ (80039b0 <HAL_TIM_PWM_Start+0x1e8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d115      	bne.n	8003988 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <HAL_TIM_PWM_Start+0x1fc>)
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d015      	beq.n	800399a <HAL_TIM_PWM_Start+0x1d2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d011      	beq.n	800399a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e008      	b.n	800399a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e000      	b.n	800399c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d020      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0202 	mvn.w	r2, #2
 80039fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fb40 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fb32 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb43 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d020      	beq.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0204 	mvn.w	r2, #4
 8003a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fb1a 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fb0c 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb1d 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d020      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0208 	mvn.w	r2, #8
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 faf4 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fae6 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 faf7 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0210 	mvn.w	r2, #16
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 face 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fac0 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fad1 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0201 	mvn.w	r2, #1
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fee0 	bl	80018f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f825 	bl	8004bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f001 f81d 	bl	8004bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa8b 	bl	80040c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0220 	mvn.w	r2, #32
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 ffe5 	bl	8004b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fff1 	bl	8004bd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 ffe9 	bl	8004be8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00c      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 ffe1 	bl	8004bfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 ffd9 	bl	8004c10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0ff      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b14      	cmp	r3, #20
 8003c92:	f200 80f0 	bhi.w	8003e76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003e77 	.word	0x08003e77
 8003ca4:	08003e77 	.word	0x08003e77
 8003ca8:	08003e77 	.word	0x08003e77
 8003cac:	08003d31 	.word	0x08003d31
 8003cb0:	08003e77 	.word	0x08003e77
 8003cb4:	08003e77 	.word	0x08003e77
 8003cb8:	08003e77 	.word	0x08003e77
 8003cbc:	08003d73 	.word	0x08003d73
 8003cc0:	08003e77 	.word	0x08003e77
 8003cc4:	08003e77 	.word	0x08003e77
 8003cc8:	08003e77 	.word	0x08003e77
 8003ccc:	08003db3 	.word	0x08003db3
 8003cd0:	08003e77 	.word	0x08003e77
 8003cd4:	08003e77 	.word	0x08003e77
 8003cd8:	08003e77 	.word	0x08003e77
 8003cdc:	08003df5 	.word	0x08003df5
 8003ce0:	08003e77 	.word	0x08003e77
 8003ce4:	08003e77 	.word	0x08003e77
 8003ce8:	08003e77 	.word	0x08003e77
 8003cec:	08003e35 	.word	0x08003e35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa88 	bl	800420c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      break;
 8003d2e:	e0a5      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 faf8 	bl	800432c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      break;
 8003d70:	e084      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fb61 	bl	8004440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
      break;
 8003db0:	e064      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fbc9 	bl	8004550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e043      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc32 	bl	8004664 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0208 	orr.w	r2, r2, #8
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0204 	bic.w	r2, r2, #4
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e32:	e023      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fc76 	bl	800472c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	021a      	lsls	r2, r3, #8
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e74:	e002      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0de      	b.n	800406a <HAL_TIM_ConfigClockSource+0x1da>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a63      	ldr	r2, [pc, #396]	@ (8004074 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	f000 80a9 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003eec:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f200 80ae 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ef4:	4a60      	ldr	r2, [pc, #384]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f000 80a1 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003efc:	4a5e      	ldr	r2, [pc, #376]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f200 80a6 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f04:	4a5d      	ldr	r2, [pc, #372]	@ (800407c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 8099 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f200 809e 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f14:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 8091 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f1c:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 8096 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f28:	f000 8089 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f30:	f200 808e 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f38:	d03e      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x128>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3e:	f200 8087 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	f000 8086 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1c6>
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4e:	d87f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f50:	2b70      	cmp	r3, #112	@ 0x70
 8003f52:	d01a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfa>
 8003f54:	2b70      	cmp	r3, #112	@ 0x70
 8003f56:	d87b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f58:	2b60      	cmp	r3, #96	@ 0x60
 8003f5a:	d050      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x16e>
 8003f5c:	2b60      	cmp	r3, #96	@ 0x60
 8003f5e:	d877      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f60:	2b50      	cmp	r3, #80	@ 0x50
 8003f62:	d03c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x14e>
 8003f64:	2b50      	cmp	r3, #80	@ 0x50
 8003f66:	d873      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	d058      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d86f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f70:	2b30      	cmp	r3, #48	@ 0x30
 8003f72:	d064      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f74:	2b30      	cmp	r3, #48	@ 0x30
 8003f76:	d86b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d060      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d867      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d05a      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f88:	e062      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	f000 fca9 	bl	80048f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	609a      	str	r2, [r3, #8]
      break;
 8003fb6:	e04f      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	f000 fc92 	bl	80048f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fda:	609a      	str	r2, [r3, #8]
      break;
 8003fdc:	e03c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fc04 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2150      	movs	r1, #80	@ 0x50
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fc5d 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e02c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fc23 	bl	8004856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2160      	movs	r1, #96	@ 0x60
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fc4d 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800401c:	e01c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	461a      	mov	r2, r3
 800402c:	f000 fbe4 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fc3d 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800403c:	e00c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 fc34 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800404e:	e003      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	00100070 	.word	0x00100070
 8004078:	00100040 	.word	0x00100040
 800407c:	00100030 	.word	0x00100030
 8004080:	00100020 	.word	0x00100020

08004084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <TIM_Base_SetConfig+0x11c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00f      	beq.n	800410c <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f2:	d00b      	beq.n	800410c <TIM_Base_SetConfig+0x38>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3f      	ldr	r2, [pc, #252]	@ (80041f4 <TIM_Base_SetConfig+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_Base_SetConfig+0x38>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3e      	ldr	r2, [pc, #248]	@ (80041f8 <TIM_Base_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_Base_SetConfig+0x38>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	@ (80041fc <TIM_Base_SetConfig+0x128>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01b      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d017      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a30      	ldr	r2, [pc, #192]	@ (80041f4 <TIM_Base_SetConfig+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	@ (80041f8 <TIM_Base_SetConfig+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2e      	ldr	r2, [pc, #184]	@ (80041fc <TIM_Base_SetConfig+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0x8a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <TIM_Base_SetConfig+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0xe8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <TIM_Base_SetConfig+0x128>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0xe8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <TIM_Base_SetConfig+0x12c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0xe8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a15      	ldr	r2, [pc, #84]	@ (8004204 <TIM_Base_SetConfig+0x130>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xe8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <TIM_Base_SetConfig+0x134>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40013400 	.word	0x40013400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0201 	bic.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f023 0302 	bic.w	r3, r3, #2
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2c      	ldr	r2, [pc, #176]	@ (8004318 <TIM_OC1_SetConfig+0x10c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00f      	beq.n	800428c <TIM_OC1_SetConfig+0x80>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a2b      	ldr	r2, [pc, #172]	@ (800431c <TIM_OC1_SetConfig+0x110>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_OC1_SetConfig+0x80>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a2a      	ldr	r2, [pc, #168]	@ (8004320 <TIM_OC1_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_OC1_SetConfig+0x80>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <TIM_OC1_SetConfig+0x118>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC1_SetConfig+0x80>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a28      	ldr	r2, [pc, #160]	@ (8004328 <TIM_OC1_SetConfig+0x11c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10c      	bne.n	80042a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0308 	bic.w	r3, r3, #8
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004318 <TIM_OC1_SetConfig+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_OC1_SetConfig+0xc2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	@ (800431c <TIM_OC1_SetConfig+0x110>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_OC1_SetConfig+0xc2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <TIM_OC1_SetConfig+0x114>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_OC1_SetConfig+0xc2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <TIM_OC1_SetConfig+0x118>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_OC1_SetConfig+0xc2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <TIM_OC1_SetConfig+0x11c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d111      	bne.n	80042f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800

0800432c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0210 	bic.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0320 	bic.w	r3, r3, #32
 800437a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a28      	ldr	r2, [pc, #160]	@ (800442c <TIM_OC2_SetConfig+0x100>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC2_SetConfig+0x6c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a27      	ldr	r2, [pc, #156]	@ (8004430 <TIM_OC2_SetConfig+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10d      	bne.n	80043b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <TIM_OC2_SetConfig+0x100>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00f      	beq.n	80043dc <TIM_OC2_SetConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1c      	ldr	r2, [pc, #112]	@ (8004430 <TIM_OC2_SetConfig+0x104>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_OC2_SetConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004434 <TIM_OC2_SetConfig+0x108>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_OC2_SetConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004438 <TIM_OC2_SetConfig+0x10c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC2_SetConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a19      	ldr	r2, [pc, #100]	@ (800443c <TIM_OC2_SetConfig+0x110>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d113      	bne.n	8004404 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800448c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a27      	ldr	r2, [pc, #156]	@ (800453c <TIM_OC3_SetConfig+0xfc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC3_SetConfig+0x6a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	@ (8004540 <TIM_OC3_SetConfig+0x100>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10d      	bne.n	80044c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <TIM_OC3_SetConfig+0xfc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00f      	beq.n	80044ee <TIM_OC3_SetConfig+0xae>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <TIM_OC3_SetConfig+0x100>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_OC3_SetConfig+0xae>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004544 <TIM_OC3_SetConfig+0x104>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_OC3_SetConfig+0xae>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <TIM_OC3_SetConfig+0x108>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC3_SetConfig+0xae>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a18      	ldr	r2, [pc, #96]	@ (800454c <TIM_OC3_SetConfig+0x10c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d113      	bne.n	8004516 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40013400 	.word	0x40013400
 8004544:	40014000 	.word	0x40014000
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800

08004550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800459e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a28      	ldr	r2, [pc, #160]	@ (8004650 <TIM_OC4_SetConfig+0x100>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC4_SetConfig+0x6c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a27      	ldr	r2, [pc, #156]	@ (8004654 <TIM_OC4_SetConfig+0x104>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10d      	bne.n	80045d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <TIM_OC4_SetConfig+0x100>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00f      	beq.n	8004600 <TIM_OC4_SetConfig+0xb0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004654 <TIM_OC4_SetConfig+0x104>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_OC4_SetConfig+0xb0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <TIM_OC4_SetConfig+0x108>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_OC4_SetConfig+0xb0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a1a      	ldr	r2, [pc, #104]	@ (800465c <TIM_OC4_SetConfig+0x10c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC4_SetConfig+0xb0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a19      	ldr	r2, [pc, #100]	@ (8004660 <TIM_OC4_SetConfig+0x110>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d113      	bne.n	8004628 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004606:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800460e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40013400 	.word	0x40013400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800

08004664 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <TIM_OC5_SetConfig+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_OC5_SetConfig+0x7a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a16      	ldr	r2, [pc, #88]	@ (800471c <TIM_OC5_SetConfig+0xb8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC5_SetConfig+0x7a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a15      	ldr	r2, [pc, #84]	@ (8004720 <TIM_OC5_SetConfig+0xbc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC5_SetConfig+0x7a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <TIM_OC5_SetConfig+0xc0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC5_SetConfig+0x7a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <TIM_OC5_SetConfig+0xc4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d109      	bne.n	80046f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <TIM_OC6_SetConfig+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00f      	beq.n	80047a8 <TIM_OC6_SetConfig+0x7c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <TIM_OC6_SetConfig+0xbc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00b      	beq.n	80047a8 <TIM_OC6_SetConfig+0x7c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <TIM_OC6_SetConfig+0xc0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_OC6_SetConfig+0x7c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <TIM_OC6_SetConfig+0xc4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC6_SetConfig+0x7c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <TIM_OC6_SetConfig+0xc8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d109      	bne.n	80047bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800

080047f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 030a 	bic.w	r3, r3, #10
 8004834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0210 	bic.w	r2, r3, #16
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f043 0307 	orr.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800490a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	431a      	orrs	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2201      	movs	r2, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1a      	ldr	r2, [r3, #32]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	431a      	orrs	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e065      	b.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a12      	ldr	r2, [pc, #72]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10c      	bne.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40013400 	.word	0x40013400
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40014000 	.word	0x40014000

08004a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e073      	b.n	8004b84 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d11c      	bne.n	8004b72 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	051b      	lsls	r3, r3, #20
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400

08004b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e042      	b.n	8004cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fec9 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2224      	movs	r2, #36	@ 0x24
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fb82 	bl	8005378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8b3 	bl	8004de0 <UART_SetConfig>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e01b      	b.n	8004cbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fc01 	bl	80054bc <UART_CheckIdleState>
 8004cba:	4603      	mov	r3, r0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	@ 0x28
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d17b      	bne.n	8004dd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_UART_Transmit+0x26>
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e074      	b.n	8004dd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2221      	movs	r2, #33	@ 0x21
 8004cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cfe:	f7fd f96d 	bl	8001fdc <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1c:	d108      	bne.n	8004d30 <HAL_UART_Transmit+0x6c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e003      	b.n	8004d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d38:	e030      	b.n	8004d9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	@ 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fc63 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e03d      	b.n	8004dd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3302      	adds	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e007      	b.n	8004d8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1c8      	bne.n	8004d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2140      	movs	r1, #64	@ 0x40
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fc2c 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e006      	b.n	8004dd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b08c      	sub	sp, #48	@ 0x30
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4bab      	ldr	r3, [pc, #684]	@ (80050bc <UART_SetConfig+0x2dc>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4aa0      	ldr	r2, [pc, #640]	@ (80050c0 <UART_SetConfig+0x2e0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	f023 010f 	bic.w	r1, r3, #15
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a91      	ldr	r2, [pc, #580]	@ (80050c4 <UART_SetConfig+0x2e4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d125      	bne.n	8004ed0 <UART_SetConfig+0xf0>
 8004e84:	4b90      	ldr	r3, [pc, #576]	@ (80050c8 <UART_SetConfig+0x2e8>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d81a      	bhi.n	8004ec8 <UART_SetConfig+0xe8>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0xb8>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004eb9 	.word	0x08004eb9
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e0d6      	b.n	800505e <UART_SetConfig+0x27e>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e0d2      	b.n	800505e <UART_SetConfig+0x27e>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	e0ce      	b.n	800505e <UART_SetConfig+0x27e>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec6:	e0ca      	b.n	800505e <UART_SetConfig+0x27e>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ece:	e0c6      	b.n	800505e <UART_SetConfig+0x27e>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80050cc <UART_SetConfig+0x2ec>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d138      	bne.n	8004f4c <UART_SetConfig+0x16c>
 8004eda:	4b7b      	ldr	r3, [pc, #492]	@ (80050c8 <UART_SetConfig+0x2e8>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d82d      	bhi.n	8004f44 <UART_SetConfig+0x164>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0x110>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f45 	.word	0x08004f45
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f3d 	.word	0x08004f3d
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e098      	b.n	800505e <UART_SetConfig+0x27e>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e094      	b.n	800505e <UART_SetConfig+0x27e>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e090      	b.n	800505e <UART_SetConfig+0x27e>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f42:	e08c      	b.n	800505e <UART_SetConfig+0x27e>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4a:	e088      	b.n	800505e <UART_SetConfig+0x27e>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a5f      	ldr	r2, [pc, #380]	@ (80050d0 <UART_SetConfig+0x2f0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d125      	bne.n	8004fa2 <UART_SetConfig+0x1c2>
 8004f56:	4b5c      	ldr	r3, [pc, #368]	@ (80050c8 <UART_SetConfig+0x2e8>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f60:	2b30      	cmp	r3, #48	@ 0x30
 8004f62:	d016      	beq.n	8004f92 <UART_SetConfig+0x1b2>
 8004f64:	2b30      	cmp	r3, #48	@ 0x30
 8004f66:	d818      	bhi.n	8004f9a <UART_SetConfig+0x1ba>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d00a      	beq.n	8004f82 <UART_SetConfig+0x1a2>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d814      	bhi.n	8004f9a <UART_SetConfig+0x1ba>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <UART_SetConfig+0x19a>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d008      	beq.n	8004f8a <UART_SetConfig+0x1aa>
 8004f78:	e00f      	b.n	8004f9a <UART_SetConfig+0x1ba>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f80:	e06d      	b.n	800505e <UART_SetConfig+0x27e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f88:	e069      	b.n	800505e <UART_SetConfig+0x27e>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f90:	e065      	b.n	800505e <UART_SetConfig+0x27e>
 8004f92:	2308      	movs	r3, #8
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f98:	e061      	b.n	800505e <UART_SetConfig+0x27e>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa0:	e05d      	b.n	800505e <UART_SetConfig+0x27e>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a4b      	ldr	r2, [pc, #300]	@ (80050d4 <UART_SetConfig+0x2f4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d125      	bne.n	8004ff8 <UART_SetConfig+0x218>
 8004fac:	4b46      	ldr	r3, [pc, #280]	@ (80050c8 <UART_SetConfig+0x2e8>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb8:	d016      	beq.n	8004fe8 <UART_SetConfig+0x208>
 8004fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fbc:	d818      	bhi.n	8004ff0 <UART_SetConfig+0x210>
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d00a      	beq.n	8004fd8 <UART_SetConfig+0x1f8>
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d814      	bhi.n	8004ff0 <UART_SetConfig+0x210>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x1f0>
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d008      	beq.n	8004fe0 <UART_SetConfig+0x200>
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e042      	b.n	800505e <UART_SetConfig+0x27e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e03e      	b.n	800505e <UART_SetConfig+0x27e>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e03a      	b.n	800505e <UART_SetConfig+0x27e>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e036      	b.n	800505e <UART_SetConfig+0x27e>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff6:	e032      	b.n	800505e <UART_SetConfig+0x27e>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	@ (80050c0 <UART_SetConfig+0x2e0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d12a      	bne.n	8005058 <UART_SetConfig+0x278>
 8005002:	4b31      	ldr	r3, [pc, #196]	@ (80050c8 <UART_SetConfig+0x2e8>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005010:	d01a      	beq.n	8005048 <UART_SetConfig+0x268>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005016:	d81b      	bhi.n	8005050 <UART_SetConfig+0x270>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x258>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005022:	d815      	bhi.n	8005050 <UART_SetConfig+0x270>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x250>
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502c:	d008      	beq.n	8005040 <UART_SetConfig+0x260>
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x270>
 8005030:	2300      	movs	r3, #0
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e012      	b.n	800505e <UART_SetConfig+0x27e>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e00e      	b.n	800505e <UART_SetConfig+0x27e>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e00a      	b.n	800505e <UART_SetConfig+0x27e>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e006      	b.n	800505e <UART_SetConfig+0x27e>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005056:	e002      	b.n	800505e <UART_SetConfig+0x27e>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <UART_SetConfig+0x2e0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	f040 80a8 	bne.w	80051ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800506a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800506e:	2b08      	cmp	r3, #8
 8005070:	d834      	bhi.n	80050dc <UART_SetConfig+0x2fc>
 8005072:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <UART_SetConfig+0x298>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050dd 	.word	0x080050dd
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050ab 	.word	0x080050ab
 800508c:	080050dd 	.word	0x080050dd
 8005090:	080050dd 	.word	0x080050dd
 8005094:	080050dd 	.word	0x080050dd
 8005098:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800509c:	f7fd ffe6 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80050a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a2:	e021      	b.n	80050e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <UART_SetConfig+0x2f8>)
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a8:	e01e      	b.n	80050e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fd ff71 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80050ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050b0:	e01a      	b.n	80050e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050b8:	e016      	b.n	80050e8 <UART_SetConfig+0x308>
 80050ba:	bf00      	nop
 80050bc:	cfff69f3 	.word	0xcfff69f3
 80050c0:	40008000 	.word	0x40008000
 80050c4:	40013800 	.word	0x40013800
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40004400 	.word	0x40004400
 80050d0:	40004800 	.word	0x40004800
 80050d4:	40004c00 	.word	0x40004c00
 80050d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 812a 	beq.w	8005344 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005370 <UART_SetConfig+0x590>)
 80050f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005102:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d305      	bcc.n	8005120 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d903      	bls.n	8005128 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005126:	e10d      	b.n	8005344 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	2200      	movs	r2, #0
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	60fa      	str	r2, [r7, #12]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	4a8e      	ldr	r2, [pc, #568]	@ (8005370 <UART_SetConfig+0x590>)
 8005136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800513a:	b29b      	uxth	r3, r3
 800513c:	2200      	movs	r2, #0
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800514a:	f7fb fd55 	bl	8000bf8 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	020b      	lsls	r3, r1, #8
 8005160:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005164:	0202      	lsls	r2, r0, #8
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	6849      	ldr	r1, [r1, #4]
 800516a:	0849      	lsrs	r1, r1, #1
 800516c:	2000      	movs	r0, #0
 800516e:	460c      	mov	r4, r1
 8005170:	4605      	mov	r5, r0
 8005172:	eb12 0804 	adds.w	r8, r2, r4
 8005176:	eb43 0905 	adc.w	r9, r3, r5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	469a      	mov	sl, r3
 8005182:	4693      	mov	fp, r2
 8005184:	4652      	mov	r2, sl
 8005186:	465b      	mov	r3, fp
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb fd34 	bl	8000bf8 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800519e:	d308      	bcc.n	80051b2 <UART_SetConfig+0x3d2>
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a6:	d204      	bcs.n	80051b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	60da      	str	r2, [r3, #12]
 80051b0:	e0c8      	b.n	8005344 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051b8:	e0c4      	b.n	8005344 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c2:	d167      	bne.n	8005294 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80051c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d828      	bhi.n	800521e <UART_SetConfig+0x43e>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0x3f4>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	0800521f 	.word	0x0800521f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	08005217 	.word	0x08005217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7fd ff38 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80051fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051fe:	e014      	b.n	800522a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005200:	f7fd ff4a 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005206:	e010      	b.n	800522a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005208:	4b5a      	ldr	r3, [pc, #360]	@ (8005374 <UART_SetConfig+0x594>)
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800520c:	e00d      	b.n	800522a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520e:	f7fd febf 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8005212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005214:	e009      	b.n	800522a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800521c:	e005      	b.n	800522a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8089 	beq.w	8005344 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	4a4e      	ldr	r2, [pc, #312]	@ (8005370 <UART_SetConfig+0x590>)
 8005238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523c:	461a      	mov	r2, r3
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	fbb3 f3f2 	udiv	r3, r3, r2
 8005244:	005a      	lsls	r2, r3, #1
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	441a      	add	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d916      	bls.n	800528c <UART_SetConfig+0x4ac>
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005264:	d212      	bcs.n	800528c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f023 030f 	bic.w	r3, r3, #15
 800526e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	b29b      	uxth	r3, r3
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	b29a      	uxth	r2, r3
 800527c:	8bfb      	ldrh	r3, [r7, #30]
 800527e:	4313      	orrs	r3, r2
 8005280:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	8bfa      	ldrh	r2, [r7, #30]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e05b      	b.n	8005344 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005292:	e057      	b.n	8005344 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005294:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005298:	2b08      	cmp	r3, #8
 800529a:	d828      	bhi.n	80052ee <UART_SetConfig+0x50e>
 800529c:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <UART_SetConfig+0x4c4>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fd fed0 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fd fee2 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d6:	e010      	b.n	80052fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b26      	ldr	r3, [pc, #152]	@ (8005374 <UART_SetConfig+0x594>)
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052dc:	e00d      	b.n	80052fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fd fe57 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80052e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052e4:	e009      	b.n	80052fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052ec:	e005      	b.n	80052fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f8:	bf00      	nop
    }

    if (pclk != 0U)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d021      	beq.n	8005344 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	4a1a      	ldr	r2, [pc, #104]	@ (8005370 <UART_SetConfig+0x590>)
 8005306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800530a:	461a      	mov	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	441a      	add	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d909      	bls.n	800533e <UART_SetConfig+0x55e>
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d205      	bcs.n	800533e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	b29a      	uxth	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e002      	b.n	8005344 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2201      	movs	r2, #1
 8005348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2201      	movs	r2, #1
 8005350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005360:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005364:	4618      	mov	r0, r3
 8005366:	3730      	adds	r7, #48	@ 0x30
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	0800aef4 	.word	0x0800aef4
 8005374:	00f42400 	.word	0x00f42400

08005378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01a      	beq.n	800548e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005476:	d10a      	bne.n	800548e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b098      	sub	sp, #96	@ 0x60
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054cc:	f7fc fd86 	bl	8001fdc <HAL_GetTick>
 80054d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d12f      	bne.n	8005540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f88e 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d022      	beq.n	8005540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005518:	647b      	str	r3, [r7, #68]	@ 0x44
 800551a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800551e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e063      	b.n	8005608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d149      	bne.n	80055e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005556:	2200      	movs	r2, #0
 8005558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f857 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d03c      	beq.n	80055e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	623b      	str	r3, [r7, #32]
   return(result);
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800557c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30
 8005588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800558c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	617b      	str	r3, [r7, #20]
   return(result);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e012      	b.n	8005608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3758      	adds	r7, #88	@ 0x58
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005620:	e04f      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d04b      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fc fcd7 	bl	8001fdc <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <UART_WaitOnFlagUntilTimeout+0x30>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e04e      	b.n	80056e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d037      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b80      	cmp	r3, #128	@ 0x80
 8005656:	d034      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b40      	cmp	r3, #64	@ 0x40
 800565c:	d031      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b08      	cmp	r3, #8
 800566a:	d110      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f838 	bl	80056ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2208      	movs	r2, #8
 800567e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e029      	b.n	80056e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569c:	d111      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f81e 	bl	80056ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e00f      	b.n	80056e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d0a0      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b095      	sub	sp, #84	@ 0x54
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005710:	643b      	str	r3, [r7, #64]	@ 0x40
 8005712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3308      	adds	r3, #8
 800572a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	61fb      	str	r3, [r7, #28]
   return(result);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d118      	bne.n	8005796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	60bb      	str	r3, [r7, #8]
   return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	613b      	str	r3, [r7, #16]
   return(result);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057aa:	bf00      	nop
 80057ac:	3754      	adds	r7, #84	@ 0x54
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_UARTEx_DisableFifoMode+0x16>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e027      	b.n	800581c <HAL_UARTEx_DisableFifoMode+0x66>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2224      	movs	r2, #36	@ 0x24
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800583c:	2302      	movs	r3, #2
 800583e:	e02d      	b.n	800589c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	@ 0x24
 800584c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f84f 	bl	8005920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e02d      	b.n	8005918 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	@ 0x24
 80058c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f811 	bl	8005920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005940:	e031      	b.n	80059a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005942:	2308      	movs	r3, #8
 8005944:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005946:	2308      	movs	r3, #8
 8005948:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	0e5b      	lsrs	r3, r3, #25
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	0f5b      	lsrs	r3, r3, #29
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	7b3a      	ldrb	r2, [r7, #12]
 800596e:	4911      	ldr	r1, [pc, #68]	@ (80059b4 <UARTEx_SetNbDataToProcess+0x94>)
 8005970:	5c8a      	ldrb	r2, [r1, r2]
 8005972:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005976:	7b3a      	ldrb	r2, [r7, #12]
 8005978:	490f      	ldr	r1, [pc, #60]	@ (80059b8 <UARTEx_SetNbDataToProcess+0x98>)
 800597a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800597c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	7b7a      	ldrb	r2, [r7, #13]
 800598c:	4909      	ldr	r1, [pc, #36]	@ (80059b4 <UARTEx_SetNbDataToProcess+0x94>)
 800598e:	5c8a      	ldrb	r2, [r1, r2]
 8005990:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005994:	7b7a      	ldrb	r2, [r7, #13]
 8005996:	4908      	ldr	r1, [pc, #32]	@ (80059b8 <UARTEx_SetNbDataToProcess+0x98>)
 8005998:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800599a:	fb93 f3f2 	sdiv	r3, r3, r2
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	0800af0c 	.word	0x0800af0c
 80059b8:	0800af14 	.word	0x0800af14

080059bc <__NVIC_SetPriority>:
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	6039      	str	r1, [r7, #0]
 80059c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db0a      	blt.n	80059e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	490c      	ldr	r1, [pc, #48]	@ (8005a08 <__NVIC_SetPriority+0x4c>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	0112      	lsls	r2, r2, #4
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	440b      	add	r3, r1
 80059e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059e4:	e00a      	b.n	80059fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4908      	ldr	r1, [pc, #32]	@ (8005a0c <__NVIC_SetPriority+0x50>)
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3b04      	subs	r3, #4
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	440b      	add	r3, r1
 80059fa:	761a      	strb	r2, [r3, #24]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000e100 	.word	0xe000e100
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a14:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <SysTick_Handler+0x1c>)
 8005a16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a18:	f001 fcc6 	bl	80073a8 <xTaskGetSchedulerState>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d001      	beq.n	8005a26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a22:	f002 fac1 	bl	8007fa8 <xPortSysTickHandler>
  }
}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	e000e010 	.word	0xe000e010

08005a30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a34:	2100      	movs	r1, #0
 8005a36:	f06f 0004 	mvn.w	r0, #4
 8005a3a:	f7ff ffbf 	bl	80059bc <__NVIC_SetPriority>
#endif
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4a:	f3ef 8305 	mrs	r3, IPSR
 8005a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a56:	f06f 0305 	mvn.w	r3, #5
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e00c      	b.n	8005a78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <osKernelInitialize+0x44>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a66:	4b08      	ldr	r3, [pc, #32]	@ (8005a88 <osKernelInitialize+0x44>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e002      	b.n	8005a78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a78:	687b      	ldr	r3, [r7, #4]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	200003f0 	.word	0x200003f0

08005a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a92:	f3ef 8305 	mrs	r3, IPSR
 8005a96:	603b      	str	r3, [r7, #0]
  return(result);
 8005a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a9e:	f06f 0305 	mvn.w	r3, #5
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	e010      	b.n	8005ac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <osKernelStart+0x48>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d109      	bne.n	8005ac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005aae:	f7ff ffbf 	bl	8005a30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ab2:	4b08      	ldr	r3, [pc, #32]	@ (8005ad4 <osKernelStart+0x48>)
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ab8:	f001 f828 	bl	8006b0c <vTaskStartScheduler>
      stat = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	e002      	b.n	8005ac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ac8:	687b      	ldr	r3, [r7, #4]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200003f0 	.word	0x200003f0

08005ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08e      	sub	sp, #56	@ 0x38
 8005adc:	af04      	add	r7, sp, #16
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae8:	f3ef 8305 	mrs	r3, IPSR
 8005aec:	617b      	str	r3, [r7, #20]
  return(result);
 8005aee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d17e      	bne.n	8005bf2 <osThreadNew+0x11a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d07b      	beq.n	8005bf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005afa:	2380      	movs	r3, #128	@ 0x80
 8005afc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005afe:	2318      	movs	r3, #24
 8005b00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d045      	beq.n	8005b9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <osThreadNew+0x48>
        name = attr->name;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <osThreadNew+0x6e>
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b38      	cmp	r3, #56	@ 0x38
 8005b38:	d805      	bhi.n	8005b46 <osThreadNew+0x6e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <osThreadNew+0x72>
        return (NULL);
 8005b46:	2300      	movs	r3, #0
 8005b48:	e054      	b.n	8005bf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <osThreadNew+0xa8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b68:	d90a      	bls.n	8005b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <osThreadNew+0xa8>
        mem = 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e010      	b.n	8005ba2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <osThreadNew+0xca>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <osThreadNew+0xca>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <osThreadNew+0xca>
          mem = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	e001      	b.n	8005ba2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d110      	bne.n	8005bca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bb0:	9202      	str	r2, [sp, #8]
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fdfe 	bl	80067c0 <xTaskCreateStatic>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	e013      	b.n	8005bf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d110      	bne.n	8005bf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f107 0310 	add.w	r3, r7, #16
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fe4c 	bl	8006880 <xTaskCreate>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d001      	beq.n	8005bf2 <osThreadNew+0x11a>
            hTask = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bf2:	693b      	ldr	r3, [r7, #16]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3728      	adds	r7, #40	@ 0x28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	@ (8005c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	@ (8005c2c <vApplicationGetIdleTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	@ 0x80
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200003f4 	.word	0x200003f4
 8005c2c:	20000450 	.word	0x20000450

08005c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a07      	ldr	r2, [pc, #28]	@ (8005c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a06      	ldr	r2, [pc, #24]	@ (8005c60 <vApplicationGetTimerTaskMemory+0x30>)
 8005c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000650 	.word	0x20000650
 8005c60:	200006ac 	.word	0x200006ac

08005c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f103 0208 	add.w	r2, r3, #8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f103 0208 	add.w	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0208 	add.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d103      	bne.n	8005d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e00c      	b.n	8005d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e002      	b.n	8005d34 <vListInsert+0x2e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d2f6      	bcs.n	8005d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6852      	ldr	r2, [r2, #4]
 8005d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d103      	bne.n	8005dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005df8:	f002 f846 	bl	8007e88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	68f9      	ldr	r1, [r7, #12]
 8005e06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	22ff      	movs	r2, #255	@ 0xff
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	22ff      	movs	r2, #255	@ 0xff
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d114      	bne.n	8005e78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01a      	beq.n	8005e8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3310      	adds	r3, #16
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 f8e4 	bl	8007028 <xTaskRemoveFromEventList>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d012      	beq.n	8005e8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <xQueueGenericReset+0xd0>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	e009      	b.n	8005e8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fef1 	bl	8005c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3324      	adds	r3, #36	@ 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff feec 	bl	8005c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e8c:	f002 f82e 	bl	8007eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e90:	2301      	movs	r3, #1
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08e      	sub	sp, #56	@ 0x38
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	e7fd      	b.n	8005ee6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <xQueueGenericCreateStatic+0x56>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <xQueueGenericCreateStatic+0x5a>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <xQueueGenericCreateStatic+0x5c>
 8005efa:	2300      	movs	r3, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	623b      	str	r3, [r7, #32]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <xQueueGenericCreateStatic+0x84>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <xQueueGenericCreateStatic+0x88>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <xQueueGenericCreateStatic+0x8a>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61fb      	str	r3, [r7, #28]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f46:	2350      	movs	r3, #80	@ 0x50
 8005f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b50      	cmp	r3, #80	@ 0x50
 8005f4e:	d00b      	beq.n	8005f68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00d      	beq.n	8005f90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f805 	bl	8005f9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3730      	adds	r7, #48	@ 0x30
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e002      	b.n	8005fbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fc8:	2101      	movs	r1, #1
 8005fca:	69b8      	ldr	r0, [r7, #24]
 8005fcc:	f7ff fefe 	bl	8005dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08e      	sub	sp, #56	@ 0x38
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <xQueueGenericSend+0x34>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <xQueueGenericSend+0x42>
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <xQueueGenericSend+0x46>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <xQueueGenericSend+0x48>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <xQueueGenericSend+0x64>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x72>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <xQueueGenericSend+0x76>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueGenericSend+0x78>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericSend+0x94>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	623b      	str	r3, [r7, #32]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006074:	f001 f998 	bl	80073a8 <xTaskGetSchedulerState>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <xQueueGenericSend+0xa4>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <xQueueGenericSend+0xa8>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <xQueueGenericSend+0xaa>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61fb      	str	r3, [r7, #28]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a6:	f001 feef 	bl	8007e88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <xQueueGenericSend+0xdc>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d129      	bne.n	8006110 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060c2:	f000 fa0f 	bl	80064e4 <prvCopyDataToQueue>
 80060c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	3324      	adds	r3, #36	@ 0x24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 ffa7 	bl	8007028 <xTaskRemoveFromEventList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060e0:	4b3f      	ldr	r3, [pc, #252]	@ (80061e0 <xQueueGenericSend+0x200>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	e00a      	b.n	8006108 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <xQueueGenericSend+0x200>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006108:	f001 fef0 	bl	8007eec <vPortExitCritical>
				return pdPASS;
 800610c:	2301      	movs	r3, #1
 800610e:	e063      	b.n	80061d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006116:	f001 fee9 	bl	8007eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800611a:	2300      	movs	r3, #0
 800611c:	e05c      	b.n	80061d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800611e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	4618      	mov	r0, r3
 800612a:	f000 ffe1 	bl	80070f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800612e:	2301      	movs	r3, #1
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006132:	f001 fedb 	bl	8007eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006136:	f000 fd51 	bl	8006bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800613a:	f001 fea5 	bl	8007e88 <vPortEnterCritical>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006144:	b25b      	sxtb	r3, r3
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d103      	bne.n	8006154 <xQueueGenericSend+0x174>
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800615a:	b25b      	sxtb	r3, r3
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d103      	bne.n	800616a <xQueueGenericSend+0x18a>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800616a:	f001 febf 	bl	8007eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800616e:	1d3a      	adds	r2, r7, #4
 8006170:	f107 0314 	add.w	r3, r7, #20
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f000 ffd0 	bl	800711c <xTaskCheckForTimeOut>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d124      	bne.n	80061cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006184:	f000 faa6 	bl	80066d4 <prvIsQueueFull>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d018      	beq.n	80061c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	3310      	adds	r3, #16
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fef4 	bl	8006f84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800619c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800619e:	f000 fa31 	bl	8006604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061a2:	f000 fd29 	bl	8006bf8 <xTaskResumeAll>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f af7c 	bne.w	80060a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <xQueueGenericSend+0x200>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	e772      	b.n	80060a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061c2:	f000 fa1f 	bl	8006604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061c6:	f000 fd17 	bl	8006bf8 <xTaskResumeAll>
 80061ca:	e76c      	b.n	80060a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ce:	f000 fa19 	bl	8006604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061d2:	f000 fd11 	bl	8006bf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3738      	adds	r7, #56	@ 0x38
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b090      	sub	sp, #64	@ 0x40
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <xQueueGenericSendFromISR+0x3e>
 800621a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <xQueueGenericSendFromISR+0x42>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <xQueueGenericSendFromISR+0x44>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d103      	bne.n	8006252 <xQueueGenericSendFromISR+0x6e>
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <xQueueGenericSendFromISR+0x72>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <xQueueGenericSendFromISR+0x74>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	623b      	str	r3, [r7, #32]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006274:	f001 fee8 	bl	8008048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006278:	f3ef 8211 	mrs	r2, BASEPRI
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61fa      	str	r2, [r7, #28]
 800628e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006290:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <xQueueGenericSendFromISR+0xc2>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d12f      	bne.n	8006306 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062bc:	f000 f912 	bl	80064e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d112      	bne.n	80062f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	3324      	adds	r3, #36	@ 0x24
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fea6 	bl	8007028 <xTaskRemoveFromEventList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e007      	b.n	8006300 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062f4:	3301      	adds	r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	b25a      	sxtb	r2, r3
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006300:	2301      	movs	r3, #1
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006304:	e001      	b.n	800630a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006306:	2300      	movs	r3, #0
 8006308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006314:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006318:	4618      	mov	r0, r3
 800631a:	3740      	adds	r7, #64	@ 0x40
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	@ 0x30
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800632c:	2300      	movs	r3, #0
 800632e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <xQueueReceive+0x32>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	623b      	str	r3, [r7, #32]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <xQueueReceive+0x40>
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <xQueueReceive+0x44>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <xQueueReceive+0x46>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <xQueueReceive+0x62>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61fb      	str	r3, [r7, #28]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006382:	f001 f811 	bl	80073a8 <xTaskGetSchedulerState>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xQueueReceive+0x72>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueReceive+0x76>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueReceive+0x78>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <xQueueReceive+0x94>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61bb      	str	r3, [r7, #24]
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b4:	f001 fd68 	bl	8007e88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01f      	beq.n	8006404 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c8:	f000 f8f6 	bl	80065b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	1e5a      	subs	r2, r3, #1
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	3310      	adds	r3, #16
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fe21 	bl	8007028 <xTaskRemoveFromEventList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b3c      	ldr	r3, [pc, #240]	@ (80064e0 <xQueueReceive+0x1c0>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063fc:	f001 fd76 	bl	8007eec <vPortExitCritical>
				return pdPASS;
 8006400:	2301      	movs	r3, #1
 8006402:	e069      	b.n	80064d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800640a:	f001 fd6f 	bl	8007eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800640e:	2300      	movs	r3, #0
 8006410:	e062      	b.n	80064d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006418:	f107 0310 	add.w	r3, r7, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fe67 	bl	80070f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006426:	f001 fd61 	bl	8007eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800642a:	f000 fbd7 	bl	8006bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642e:	f001 fd2b 	bl	8007e88 <vPortEnterCritical>
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <xQueueReceive+0x128>
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800644e:	b25b      	sxtb	r3, r3
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d103      	bne.n	800645e <xQueueReceive+0x13e>
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800645e:	f001 fd45 	bl	8007eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006462:	1d3a      	adds	r2, r7, #4
 8006464:	f107 0310 	add.w	r3, r7, #16
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fe56 	bl	800711c <xTaskCheckForTimeOut>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d123      	bne.n	80064be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006478:	f000 f916 	bl	80066a8 <prvIsQueueEmpty>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	3324      	adds	r3, #36	@ 0x24
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fd7a 	bl	8006f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006492:	f000 f8b7 	bl	8006604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006496:	f000 fbaf 	bl	8006bf8 <xTaskResumeAll>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d189      	bne.n	80063b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80064a0:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <xQueueReceive+0x1c0>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	e780      	b.n	80063b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b4:	f000 f8a6 	bl	8006604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064b8:	f000 fb9e 	bl	8006bf8 <xTaskResumeAll>
 80064bc:	e77a      	b.n	80063b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c0:	f000 f8a0 	bl	8006604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c4:	f000 fb98 	bl	8006bf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ca:	f000 f8ed 	bl	80066a8 <prvIsQueueEmpty>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f43f af6f 	beq.w	80063b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3730      	adds	r7, #48	@ 0x30
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d14d      	bne.n	80065a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 ff68 	bl	80073e4 <xTaskPriorityDisinherit>
 8006514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	e043      	b.n	80065a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d119      	bne.n	8006558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6858      	ldr	r0, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	461a      	mov	r2, r3
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	f002 fda9 	bl	8009086 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	d32b      	bcc.n	80065a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	e026      	b.n	80065a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68d8      	ldr	r0, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	461a      	mov	r2, r3
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	f002 fd8f 	bl	8009086 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	425b      	negs	r3, r3
 8006572:	441a      	add	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d207      	bcs.n	8006594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	425b      	negs	r3, r3
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d105      	bne.n	80065a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80065ae:	697b      	ldr	r3, [r7, #20]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d018      	beq.n	80065fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	441a      	add	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d303      	bcc.n	80065ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68d9      	ldr	r1, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	461a      	mov	r2, r3
 80065f6:	6838      	ldr	r0, [r7, #0]
 80065f8:	f002 fd45 	bl	8009086 <memcpy>
	}
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800660c:	f001 fc3c 	bl	8007e88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006618:	e011      	b.n	800663e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3324      	adds	r3, #36	@ 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fcfe 	bl	8007028 <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006632:	f000 fdd7 	bl	80071e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3b01      	subs	r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	dce9      	bgt.n	800661a <prvUnlockQueue+0x16>
 8006646:	e000      	b.n	800664a <prvUnlockQueue+0x46>
					break;
 8006648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	22ff      	movs	r2, #255	@ 0xff
 800664e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006652:	f001 fc4b 	bl	8007eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006656:	f001 fc17 	bl	8007e88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006662:	e011      	b.n	8006688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d012      	beq.n	8006692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3310      	adds	r3, #16
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fcd9 	bl	8007028 <xTaskRemoveFromEventList>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800667c:	f000 fdb2 	bl	80071e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	3b01      	subs	r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	dce9      	bgt.n	8006664 <prvUnlockQueue+0x60>
 8006690:	e000      	b.n	8006694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	22ff      	movs	r2, #255	@ 0xff
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800669c:	f001 fc26 	bl	8007eec <vPortExitCritical>
}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b0:	f001 fbea 	bl	8007e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e001      	b.n	80066c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066c6:	f001 fc11 	bl	8007eec <vPortExitCritical>

	return xReturn;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066dc:	f001 fbd4 	bl	8007e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e001      	b.n	80066f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 fbf9 	bl	8007eec <vPortExitCritical>

	return xReturn;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e014      	b.n	800673e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006714:	4a0f      	ldr	r2, [pc, #60]	@ (8006754 <vQueueAddToRegistry+0x50>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006720:	490c      	ldr	r1, [pc, #48]	@ (8006754 <vQueueAddToRegistry+0x50>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800672a:	4a0a      	ldr	r2, [pc, #40]	@ (8006754 <vQueueAddToRegistry+0x50>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006736:	e006      	b.n	8006746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b07      	cmp	r3, #7
 8006742:	d9e7      	bls.n	8006714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000aac 	.word	0x20000aac

08006758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006768:	f001 fb8e 	bl	8007e88 <vPortEnterCritical>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006772:	b25b      	sxtb	r3, r3
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d103      	bne.n	8006782 <vQueueWaitForMessageRestricted+0x2a>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006788:	b25b      	sxtb	r3, r3
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d103      	bne.n	8006798 <vQueueWaitForMessageRestricted+0x40>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006798:	f001 fba8 	bl	8007eec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3324      	adds	r3, #36	@ 0x24
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fc0f 	bl	8006fd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f7ff ff26 	bl	8006604 <prvUnlockQueue>
	}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08e      	sub	sp, #56	@ 0x38
 80067c4:	af04      	add	r7, sp, #16
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	623b      	str	r3, [r7, #32]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <xTaskCreateStatic+0x4a>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	61fb      	str	r3, [r7, #28]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800680a:	235c      	movs	r3, #92	@ 0x5c
 800680c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b5c      	cmp	r3, #92	@ 0x5c
 8006812:	d00b      	beq.n	800682c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	61bb      	str	r3, [r7, #24]
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800682c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01e      	beq.n	8006872 <xTaskCreateStatic+0xb2>
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01b      	beq.n	8006872 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006842:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800684c:	2300      	movs	r3, #0
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f850 	bl	800690a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800686a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800686c:	f000 f8de 	bl	8006a2c <prvAddNewTaskToReadyList>
 8006870:	e001      	b.n	8006876 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006876:	697b      	ldr	r3, [r7, #20]
	}
 8006878:	4618      	mov	r0, r3
 800687a:	3728      	adds	r7, #40	@ 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	@ 0x30
 8006884:	af04      	add	r7, sp, #16
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fc19 	bl	80080cc <pvPortMalloc>
 800689a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00e      	beq.n	80068c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068a2:	205c      	movs	r0, #92	@ 0x5c
 80068a4:	f001 fc12 	bl	80080cc <pvPortMalloc>
 80068a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068b6:	e005      	b.n	80068c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068b8:	6978      	ldr	r0, [r7, #20]
 80068ba:	f001 fcd5 	bl	8008268 <vPortFree>
 80068be:	e001      	b.n	80068c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d017      	beq.n	80068fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	2300      	movs	r3, #0
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f80e 	bl	800690a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ee:	69f8      	ldr	r0, [r7, #28]
 80068f0:	f000 f89c 	bl	8006a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068f4:	2301      	movs	r3, #1
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e002      	b.n	8006900 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068fa:	f04f 33ff 	mov.w	r3, #4294967295
 80068fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006900:	69bb      	ldr	r3, [r7, #24]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b088      	sub	sp, #32
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	461a      	mov	r2, r3
 8006922:	21a5      	movs	r1, #165	@ 0xa5
 8006924:	f002 fb2f 	bl	8008f86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006932:	3b01      	subs	r3, #1
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	617b      	str	r3, [r7, #20]
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	e7fd      	b.n	8006960 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01f      	beq.n	80069aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	e012      	b.n	8006996 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	3334      	adds	r3, #52	@ 0x34
 8006980:	460a      	mov	r2, r1
 8006982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b0f      	cmp	r3, #15
 800699a:	d9e9      	bls.n	8006970 <prvInitialiseNewTask+0x66>
 800699c:	e000      	b.n	80069a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800699e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069a8:	e003      	b.n	80069b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	2b37      	cmp	r3, #55	@ 0x37
 80069b6:	d901      	bls.n	80069bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069b8:	2337      	movs	r3, #55	@ 0x37
 80069ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	3304      	adds	r3, #4
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f966 	bl	8005ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	3318      	adds	r3, #24
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff f961 	bl	8005ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	2200      	movs	r2, #0
 80069fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	69b8      	ldr	r0, [r7, #24]
 8006a0c:	f001 f908 	bl	8007c20 <pxPortInitialiseStack>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a22:	bf00      	nop
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f001 fa28 	bl	8007e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a38:	4b2d      	ldr	r3, [pc, #180]	@ (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a42:	4b2c      	ldr	r3, [pc, #176]	@ (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a50:	4b27      	ldr	r3, [pc, #156]	@ (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d110      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a58:	f000 fbe8 	bl	800722c <prvInitialiseTaskLists>
 8006a5c:	e00d      	b.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a5e:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <prvAddNewTaskToReadyList+0xcc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a66:	4b23      	ldr	r3, [pc, #140]	@ (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d802      	bhi.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a74:	4a1f      	ldr	r2, [pc, #124]	@ (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7a:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a1e      	ldr	r2, [pc, #120]	@ (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a90:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <prvAddNewTaskToReadyList+0xd4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d903      	bls.n	8006aa0 <prvAddNewTaskToReadyList+0x74>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9c:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <prvAddNewTaskToReadyList+0xd4>)
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <prvAddNewTaskToReadyList+0xd8>)
 8006aae:	441a      	add	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f7ff f901 	bl	8005cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006abc:	f001 fa16 	bl	8007eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <prvAddNewTaskToReadyList+0xcc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00e      	beq.n	8006ae6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d207      	bcs.n	8006ae6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <prvAddNewTaskToReadyList+0xdc>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000fc0 	.word	0x20000fc0
 8006af4:	20000aec 	.word	0x20000aec
 8006af8:	20000fcc 	.word	0x20000fcc
 8006afc:	20000fdc 	.word	0x20000fdc
 8006b00:	20000fc8 	.word	0x20000fc8
 8006b04:	20000af0 	.word	0x20000af0
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	1d39      	adds	r1, r7, #4
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff f86a 	bl	8005bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	9202      	str	r2, [sp, #8]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	2300      	movs	r3, #0
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	460a      	mov	r2, r1
 8006b3a:	4922      	ldr	r1, [pc, #136]	@ (8006bc4 <vTaskStartScheduler+0xb8>)
 8006b3c:	4822      	ldr	r0, [pc, #136]	@ (8006bc8 <vTaskStartScheduler+0xbc>)
 8006b3e:	f7ff fe3f 	bl	80067c0 <xTaskCreateStatic>
 8006b42:	4603      	mov	r3, r0
 8006b44:	4a21      	ldr	r2, [pc, #132]	@ (8006bcc <vTaskStartScheduler+0xc0>)
 8006b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b48:	4b20      	ldr	r3, [pc, #128]	@ (8006bcc <vTaskStartScheduler+0xc0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e001      	b.n	8006b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d102      	bne.n	8006b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b60:	f000 fd04 	bl	800756c <xTimerCreateTimerTask>
 8006b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d116      	bne.n	8006b9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	613b      	str	r3, [r7, #16]
}
 8006b7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b80:	4b13      	ldr	r3, [pc, #76]	@ (8006bd0 <vTaskStartScheduler+0xc4>)
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b88:	4b12      	ldr	r3, [pc, #72]	@ (8006bd4 <vTaskStartScheduler+0xc8>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b8e:	4b12      	ldr	r3, [pc, #72]	@ (8006bd8 <vTaskStartScheduler+0xcc>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b94:	f001 f8d4 	bl	8007d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b98:	e00f      	b.n	8006bba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d10b      	bne.n	8006bba <vTaskStartScheduler+0xae>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60fb      	str	r3, [r7, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <vTaskStartScheduler+0xaa>
}
 8006bba:	bf00      	nop
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	0800ae34 	.word	0x0800ae34
 8006bc8:	080071fd 	.word	0x080071fd
 8006bcc:	20000fe4 	.word	0x20000fe4
 8006bd0:	20000fe0 	.word	0x20000fe0
 8006bd4:	20000fcc 	.word	0x20000fcc
 8006bd8:	20000fc4 	.word	0x20000fc4

08006bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006be0:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <vTaskSuspendAll+0x18>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a03      	ldr	r2, [pc, #12]	@ (8006bf4 <vTaskSuspendAll+0x18>)
 8006be8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000fe8 	.word	0x20000fe8

08006bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c06:	4b42      	ldr	r3, [pc, #264]	@ (8006d10 <xTaskResumeAll+0x118>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <xTaskResumeAll+0x2e>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	603b      	str	r3, [r7, #0]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c26:	f001 f92f 	bl	8007e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c2a:	4b39      	ldr	r3, [pc, #228]	@ (8006d10 <xTaskResumeAll+0x118>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	4a37      	ldr	r2, [pc, #220]	@ (8006d10 <xTaskResumeAll+0x118>)
 8006c32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c34:	4b36      	ldr	r3, [pc, #216]	@ (8006d10 <xTaskResumeAll+0x118>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d162      	bne.n	8006d02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c3c:	4b35      	ldr	r3, [pc, #212]	@ (8006d14 <xTaskResumeAll+0x11c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d05e      	beq.n	8006d02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c44:	e02f      	b.n	8006ca6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <xTaskResumeAll+0x120>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3318      	adds	r3, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff f890 	bl	8005d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f88b 	bl	8005d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4b2d      	ldr	r3, [pc, #180]	@ (8006d1c <xTaskResumeAll+0x124>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d903      	bls.n	8006c76 <xTaskResumeAll+0x7e>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4a2a      	ldr	r2, [pc, #168]	@ (8006d1c <xTaskResumeAll+0x124>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a27      	ldr	r2, [pc, #156]	@ (8006d20 <xTaskResumeAll+0x128>)
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f7ff f816 	bl	8005cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <xTaskResumeAll+0x12c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ca0:	4b21      	ldr	r3, [pc, #132]	@ (8006d28 <xTaskResumeAll+0x130>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d18 <xTaskResumeAll+0x120>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1cb      	bne.n	8006c46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cb4:	f000 fb58 	bl	8007368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d2c <xTaskResumeAll+0x134>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cc4:	f000 f846 	bl	8006d54 <xTaskIncrementTick>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006cce:	4b16      	ldr	r3, [pc, #88]	@ (8006d28 <xTaskResumeAll+0x130>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f1      	bne.n	8006cc4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <xTaskResumeAll+0x134>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ce6:	4b10      	ldr	r3, [pc, #64]	@ (8006d28 <xTaskResumeAll+0x130>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <xTaskResumeAll+0x138>)
 8006cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d02:	f001 f8f3 	bl	8007eec <vPortExitCritical>

	return xAlreadyYielded;
 8006d06:	68bb      	ldr	r3, [r7, #8]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000fe8 	.word	0x20000fe8
 8006d14:	20000fc0 	.word	0x20000fc0
 8006d18:	20000f80 	.word	0x20000f80
 8006d1c:	20000fc8 	.word	0x20000fc8
 8006d20:	20000af0 	.word	0x20000af0
 8006d24:	20000aec 	.word	0x20000aec
 8006d28:	20000fd4 	.word	0x20000fd4
 8006d2c:	20000fd0 	.word	0x20000fd0
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d3a:	4b05      	ldr	r3, [pc, #20]	@ (8006d50 <xTaskGetTickCount+0x1c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d40:	687b      	ldr	r3, [r7, #4]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000fc4 	.word	0x20000fc4

08006d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e9c <xTaskIncrementTick+0x148>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 8090 	bne.w	8006e88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d68:	4b4d      	ldr	r3, [pc, #308]	@ (8006ea0 <xTaskIncrementTick+0x14c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d70:	4a4b      	ldr	r2, [pc, #300]	@ (8006ea0 <xTaskIncrementTick+0x14c>)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d121      	bne.n	8006dc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d7c:	4b49      	ldr	r3, [pc, #292]	@ (8006ea4 <xTaskIncrementTick+0x150>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	603b      	str	r3, [r7, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <xTaskIncrementTick+0x46>
 8006d9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ea4 <xTaskIncrementTick+0x150>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	4b40      	ldr	r3, [pc, #256]	@ (8006ea8 <xTaskIncrementTick+0x154>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea4 <xTaskIncrementTick+0x150>)
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea8 <xTaskIncrementTick+0x154>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b3e      	ldr	r3, [pc, #248]	@ (8006eac <xTaskIncrementTick+0x158>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a3c      	ldr	r2, [pc, #240]	@ (8006eac <xTaskIncrementTick+0x158>)
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	f000 fad4 	bl	8007368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb0 <xTaskIncrementTick+0x15c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d349      	bcc.n	8006e5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <xTaskIncrementTick+0x150>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd4:	4b36      	ldr	r3, [pc, #216]	@ (8006eb0 <xTaskIncrementTick+0x15c>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	601a      	str	r2, [r3, #0]
					break;
 8006ddc:	e03f      	b.n	8006e5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b31      	ldr	r3, [pc, #196]	@ (8006ea4 <xTaskIncrementTick+0x150>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d203      	bcs.n	8006dfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006df6:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb0 <xTaskIncrementTick+0x15c>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dfc:	e02f      	b.n	8006e5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe ffb8 	bl	8005d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe ffaf 	bl	8005d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1e:	4b25      	ldr	r3, [pc, #148]	@ (8006eb4 <xTaskIncrementTick+0x160>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d903      	bls.n	8006e2e <xTaskIncrementTick+0xda>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <xTaskIncrementTick+0x160>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb8 <xTaskIncrementTick+0x164>)
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7fe ff3a 	bl	8005cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <xTaskIncrementTick+0x168>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3b8      	bcc.n	8006dca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5c:	e7b5      	b.n	8006dca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e5e:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <xTaskIncrementTick+0x168>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e64:	4914      	ldr	r1, [pc, #80]	@ (8006eb8 <xTaskIncrementTick+0x164>)
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d901      	bls.n	8006e7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e7a:	4b11      	ldr	r3, [pc, #68]	@ (8006ec0 <xTaskIncrementTick+0x16c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e004      	b.n	8006e92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e88:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec4 <xTaskIncrementTick+0x170>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec4 <xTaskIncrementTick+0x170>)
 8006e90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e92:	697b      	ldr	r3, [r7, #20]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000fe8 	.word	0x20000fe8
 8006ea0:	20000fc4 	.word	0x20000fc4
 8006ea4:	20000f78 	.word	0x20000f78
 8006ea8:	20000f7c 	.word	0x20000f7c
 8006eac:	20000fd8 	.word	0x20000fd8
 8006eb0:	20000fe0 	.word	0x20000fe0
 8006eb4:	20000fc8 	.word	0x20000fc8
 8006eb8:	20000af0 	.word	0x20000af0
 8006ebc:	20000aec 	.word	0x20000aec
 8006ec0:	20000fd4 	.word	0x20000fd4
 8006ec4:	20000fd0 	.word	0x20000fd0

08006ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ece:	4b28      	ldr	r3, [pc, #160]	@ (8006f70 <vTaskSwitchContext+0xa8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ed6:	4b27      	ldr	r3, [pc, #156]	@ (8006f74 <vTaskSwitchContext+0xac>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006edc:	e042      	b.n	8006f64 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006ede:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <vTaskSwitchContext+0xac>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b24      	ldr	r3, [pc, #144]	@ (8006f78 <vTaskSwitchContext+0xb0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e011      	b.n	8006f10 <vTaskSwitchContext+0x48>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <vTaskSwitchContext+0x42>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	607b      	str	r3, [r7, #4]
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <vTaskSwitchContext+0x3e>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	491a      	ldr	r1, [pc, #104]	@ (8006f7c <vTaskSwitchContext+0xb4>)
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0e3      	beq.n	8006eec <vTaskSwitchContext+0x24>
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a13      	ldr	r2, [pc, #76]	@ (8006f7c <vTaskSwitchContext+0xb4>)
 8006f30:	4413      	add	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3308      	adds	r3, #8
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d104      	bne.n	8006f54 <vTaskSwitchContext+0x8c>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <vTaskSwitchContext+0xb8>)
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4a06      	ldr	r2, [pc, #24]	@ (8006f78 <vTaskSwitchContext+0xb0>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6013      	str	r3, [r2, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000fe8 	.word	0x20000fe8
 8006f74:	20000fd4 	.word	0x20000fd4
 8006f78:	20000fc8 	.word	0x20000fc8
 8006f7c:	20000af0 	.word	0x20000af0
 8006f80:	20000aec 	.word	0x20000aec

08006f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fac:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <vTaskPlaceOnEventList+0x48>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fe fea6 	bl	8005d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fba:	2101      	movs	r1, #1
 8006fbc:	6838      	ldr	r0, [r7, #0]
 8006fbe:	f000 fa81 	bl	80074c4 <prvAddCurrentTaskToDelayedList>
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000aec 	.word	0x20000aec

08006fd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3318      	adds	r3, #24
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7fe fe5b 	bl	8005cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800700e:	f04f 33ff 	mov.w	r3, #4294967295
 8007012:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f000 fa54 	bl	80074c4 <prvAddCurrentTaskToDelayedList>
	}
 800701c:	bf00      	nop
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000aec 	.word	0x20000aec

08007028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60fb      	str	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	e7fd      	b.n	8007052 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3318      	adds	r3, #24
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fe8c 	bl	8005d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007060:	4b1d      	ldr	r3, [pc, #116]	@ (80070d8 <xTaskRemoveFromEventList+0xb0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11d      	bne.n	80070a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	3304      	adds	r3, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fe83 	bl	8005d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007076:	4b19      	ldr	r3, [pc, #100]	@ (80070dc <xTaskRemoveFromEventList+0xb4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <xTaskRemoveFromEventList+0x5e>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <xTaskRemoveFromEventList+0xb4>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a13      	ldr	r2, [pc, #76]	@ (80070e0 <xTaskRemoveFromEventList+0xb8>)
 8007094:	441a      	add	r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fe fe0e 	bl	8005cbe <vListInsertEnd>
 80070a2:	e005      	b.n	80070b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3318      	adds	r3, #24
 80070a8:	4619      	mov	r1, r3
 80070aa:	480e      	ldr	r0, [pc, #56]	@ (80070e4 <xTaskRemoveFromEventList+0xbc>)
 80070ac:	f7fe fe07 	bl	8005cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <xTaskRemoveFromEventList+0xc0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d905      	bls.n	80070ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <xTaskRemoveFromEventList+0xc4>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e001      	b.n	80070ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070ce:	697b      	ldr	r3, [r7, #20]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000fe8 	.word	0x20000fe8
 80070dc:	20000fc8 	.word	0x20000fc8
 80070e0:	20000af0 	.word	0x20000af0
 80070e4:	20000f80 	.word	0x20000f80
 80070e8:	20000aec 	.word	0x20000aec
 80070ec:	20000fd4 	.word	0x20000fd4

080070f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070f8:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <vTaskInternalSetTimeOutState+0x24>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <vTaskInternalSetTimeOutState+0x28>)
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	605a      	str	r2, [r3, #4]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20000fd8 	.word	0x20000fd8
 8007118:	20000fc4 	.word	0x20000fc4

0800711c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10b      	bne.n	8007144 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	60fb      	str	r3, [r7, #12]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007162:	f000 fe91 	bl	8007e88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007166:	4b1d      	ldr	r3, [pc, #116]	@ (80071dc <xTaskCheckForTimeOut+0xc0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	d102      	bne.n	8007186 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e023      	b.n	80071ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	4b15      	ldr	r3, [pc, #84]	@ (80071e0 <xTaskCheckForTimeOut+0xc4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d007      	beq.n	80071a2 <xTaskCheckForTimeOut+0x86>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e015      	b.n	80071ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d20b      	bcs.n	80071c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1ad2      	subs	r2, r2, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff ff99 	bl	80070f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	e004      	b.n	80071ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071ce:	f000 fe8d 	bl	8007eec <vPortExitCritical>

	return xReturn;
 80071d2:	69fb      	ldr	r3, [r7, #28]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000fc4 	.word	0x20000fc4
 80071e0:	20000fd8 	.word	0x20000fd8

080071e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071e8:	4b03      	ldr	r3, [pc, #12]	@ (80071f8 <vTaskMissedYield+0x14>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	20000fd4 	.word	0x20000fd4

080071fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007204:	f000 f852 	bl	80072ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <prvIdleTask+0x28>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d9f9      	bls.n	8007204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <prvIdleTask+0x2c>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007220:	e7f0      	b.n	8007204 <prvIdleTask+0x8>
 8007222:	bf00      	nop
 8007224:	20000af0 	.word	0x20000af0
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	e00c      	b.n	8007252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a12      	ldr	r2, [pc, #72]	@ (800728c <prvInitialiseTaskLists+0x60>)
 8007244:	4413      	add	r3, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fd0c 	bl	8005c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3301      	adds	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b37      	cmp	r3, #55	@ 0x37
 8007256:	d9ef      	bls.n	8007238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007258:	480d      	ldr	r0, [pc, #52]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800725a:	f7fe fd03 	bl	8005c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800725e:	480d      	ldr	r0, [pc, #52]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007260:	f7fe fd00 	bl	8005c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007264:	480c      	ldr	r0, [pc, #48]	@ (8007298 <prvInitialiseTaskLists+0x6c>)
 8007266:	f7fe fcfd 	bl	8005c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800726a:	480c      	ldr	r0, [pc, #48]	@ (800729c <prvInitialiseTaskLists+0x70>)
 800726c:	f7fe fcfa 	bl	8005c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007270:	480b      	ldr	r0, [pc, #44]	@ (80072a0 <prvInitialiseTaskLists+0x74>)
 8007272:	f7fe fcf7 	bl	8005c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <prvInitialiseTaskLists+0x78>)
 8007278:	4a05      	ldr	r2, [pc, #20]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800727a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <prvInitialiseTaskLists+0x7c>)
 800727e:	4a05      	ldr	r2, [pc, #20]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000af0 	.word	0x20000af0
 8007290:	20000f50 	.word	0x20000f50
 8007294:	20000f64 	.word	0x20000f64
 8007298:	20000f80 	.word	0x20000f80
 800729c:	20000f94 	.word	0x20000f94
 80072a0:	20000fac 	.word	0x20000fac
 80072a4:	20000f78 	.word	0x20000f78
 80072a8:	20000f7c 	.word	0x20000f7c

080072ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b2:	e019      	b.n	80072e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072b4:	f000 fde8 	bl	8007e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <prvCheckTasksWaitingTermination+0x50>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fd57 	bl	8005d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	4a0a      	ldr	r2, [pc, #40]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072de:	f000 fe05 	bl	8007eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f810 	bl	8007308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e1      	bne.n	80072b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000f94 	.word	0x20000f94
 8007300:	20000fc0 	.word	0x20000fc0
 8007304:	20000fa8 	.word	0x20000fa8

08007308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	4618      	mov	r0, r3
 8007320:	f000 ffa2 	bl	8008268 <vPortFree>
				vPortFree( pxTCB );
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 ff9f 	bl	8008268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800732a:	e019      	b.n	8007360 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007332:	2b01      	cmp	r3, #1
 8007334:	d103      	bne.n	800733e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff96 	bl	8008268 <vPortFree>
	}
 800733c:	e010      	b.n	8007360 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007344:	2b02      	cmp	r3, #2
 8007346:	d00b      	beq.n	8007360 <prvDeleteTCB+0x58>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <prvDeleteTCB+0x54>
	}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007380:	e008      	b.n	8007394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a04      	ldr	r2, [pc, #16]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000f78 	.word	0x20000f78
 80073a4:	20000fe0 	.word	0x20000fe0

080073a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <xTaskGetSchedulerState+0x34>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073b6:	2301      	movs	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	e008      	b.n	80073ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073bc:	4b08      	ldr	r3, [pc, #32]	@ (80073e0 <xTaskGetSchedulerState+0x38>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073c4:	2302      	movs	r3, #2
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	e001      	b.n	80073ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073ca:	2300      	movs	r3, #0
 80073cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ce:	687b      	ldr	r3, [r7, #4]
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000fcc 	.word	0x20000fcc
 80073e0:	20000fe8 	.word	0x20000fe8

080073e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d058      	beq.n	80074ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073fa:	4b2f      	ldr	r3, [pc, #188]	@ (80074b8 <xTaskPriorityDisinherit+0xd4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	429a      	cmp	r2, r3
 8007402:	d00b      	beq.n	800741c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60fb      	str	r3, [r7, #12]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60bb      	str	r3, [r7, #8]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007440:	1e5a      	subs	r2, r3, #1
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800744e:	429a      	cmp	r2, r3
 8007450:	d02c      	beq.n	80074ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007456:	2b00      	cmp	r3, #0
 8007458:	d128      	bne.n	80074ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fc8a 	bl	8005d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747c:	4b0f      	ldr	r3, [pc, #60]	@ (80074bc <xTaskPriorityDisinherit+0xd8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <xTaskPriorityDisinherit+0xa8>
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4a0c      	ldr	r2, [pc, #48]	@ (80074bc <xTaskPriorityDisinherit+0xd8>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a09      	ldr	r2, [pc, #36]	@ (80074c0 <xTaskPriorityDisinherit+0xdc>)
 800749a:	441a      	add	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe fc0b 	bl	8005cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ac:	697b      	ldr	r3, [r7, #20]
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000aec 	.word	0x20000aec
 80074bc:	20000fc8 	.word	0x20000fc8
 80074c0:	20000af0 	.word	0x20000af0

080074c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074ce:	4b21      	ldr	r3, [pc, #132]	@ (8007554 <prvAddCurrentTaskToDelayedList+0x90>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d4:	4b20      	ldr	r3, [pc, #128]	@ (8007558 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3304      	adds	r3, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fc4c 	bl	8005d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d10a      	bne.n	80074fe <prvAddCurrentTaskToDelayedList+0x3a>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <prvAddCurrentTaskToDelayedList+0x94>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	4819      	ldr	r0, [pc, #100]	@ (800755c <prvAddCurrentTaskToDelayedList+0x98>)
 80074f8:	f7fe fbe1 	bl	8005cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074fc:	e026      	b.n	800754c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007506:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <prvAddCurrentTaskToDelayedList+0x94>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	429a      	cmp	r2, r3
 8007514:	d209      	bcs.n	800752a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007516:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <prvAddCurrentTaskToDelayedList+0x94>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f7fe fbef 	bl	8005d06 <vListInsert>
}
 8007528:	e010      	b.n	800754c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800752a:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <prvAddCurrentTaskToDelayedList+0xa0>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <prvAddCurrentTaskToDelayedList+0x94>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3304      	adds	r3, #4
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fe fbe5 	bl	8005d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800753c:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <prvAddCurrentTaskToDelayedList+0xa4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d202      	bcs.n	800754c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007546:	4a08      	ldr	r2, [pc, #32]	@ (8007568 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20000fc4 	.word	0x20000fc4
 8007558:	20000aec 	.word	0x20000aec
 800755c:	20000fac 	.word	0x20000fac
 8007560:	20000f7c 	.word	0x20000f7c
 8007564:	20000f78 	.word	0x20000f78
 8007568:	20000fe0 	.word	0x20000fe0

0800756c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	@ 0x28
 8007570:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007576:	f000 fb13 	bl	8007ba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800757a:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <xTimerCreateTimerTask+0x84>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d021      	beq.n	80075c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800758a:	1d3a      	adds	r2, r7, #4
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	f107 030c 	add.w	r3, r7, #12
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fb4b 	bl	8005c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	2302      	movs	r3, #2
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	460a      	mov	r2, r1
 80075ac:	4911      	ldr	r1, [pc, #68]	@ (80075f4 <xTimerCreateTimerTask+0x88>)
 80075ae:	4812      	ldr	r0, [pc, #72]	@ (80075f8 <xTimerCreateTimerTask+0x8c>)
 80075b0:	f7ff f906 	bl	80067c0 <xTaskCreateStatic>
 80075b4:	4603      	mov	r3, r0
 80075b6:	4a11      	ldr	r2, [pc, #68]	@ (80075fc <xTimerCreateTimerTask+0x90>)
 80075b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80075ba:	4b10      	ldr	r3, [pc, #64]	@ (80075fc <xTimerCreateTimerTask+0x90>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80075c2:	2301      	movs	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	613b      	str	r3, [r7, #16]
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80075e4:	697b      	ldr	r3, [r7, #20]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	2000101c 	.word	0x2000101c
 80075f4:	0800ae3c 	.word	0x0800ae3c
 80075f8:	08007739 	.word	0x08007739
 80075fc:	20001020 	.word	0x20001020

08007600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800760e:	2300      	movs	r3, #0
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <xTimerGenericCommand+0x30>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	623b      	str	r3, [r7, #32]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <xTimerGenericCommand+0x98>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02a      	beq.n	800768e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b05      	cmp	r3, #5
 8007648:	dc18      	bgt.n	800767c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800764a:	f7ff fead 	bl	80073a8 <xTaskGetSchedulerState>
 800764e:	4603      	mov	r3, r0
 8007650:	2b02      	cmp	r3, #2
 8007652:	d109      	bne.n	8007668 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007654:	4b10      	ldr	r3, [pc, #64]	@ (8007698 <xTimerGenericCommand+0x98>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	f107 0110 	add.w	r1, r7, #16
 800765c:	2300      	movs	r3, #0
 800765e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007660:	f7fe fcbe 	bl	8005fe0 <xQueueGenericSend>
 8007664:	6278      	str	r0, [r7, #36]	@ 0x24
 8007666:	e012      	b.n	800768e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007668:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <xTimerGenericCommand+0x98>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	f107 0110 	add.w	r1, r7, #16
 8007670:	2300      	movs	r3, #0
 8007672:	2200      	movs	r2, #0
 8007674:	f7fe fcb4 	bl	8005fe0 <xQueueGenericSend>
 8007678:	6278      	str	r0, [r7, #36]	@ 0x24
 800767a:	e008      	b.n	800768e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <xTimerGenericCommand+0x98>)
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	f107 0110 	add.w	r1, r7, #16
 8007684:	2300      	movs	r3, #0
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	f7fe fdac 	bl	80061e4 <xQueueGenericSendFromISR>
 800768c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007690:	4618      	mov	r0, r3
 8007692:	3728      	adds	r7, #40	@ 0x28
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	2000101c 	.word	0x2000101c

0800769c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a6:	4b23      	ldr	r3, [pc, #140]	@ (8007734 <prvProcessExpiredTimer+0x98>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe fb5f 	bl	8005d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d023      	beq.n	8007710 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	18d1      	adds	r1, r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	6978      	ldr	r0, [r7, #20]
 80076d6:	f000 f8d5 	bl	8007884 <prvInsertTimerInActiveList>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d020      	beq.n	8007722 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076e0:	2300      	movs	r3, #0
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	f7ff ff88 	bl	8007600 <xTimerGenericCommand>
 80076f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d114      	bne.n	8007722 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60fb      	str	r3, [r7, #12]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	b2da      	uxtb	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	6978      	ldr	r0, [r7, #20]
 8007728:	4798      	blx	r3
}
 800772a:	bf00      	nop
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20001014 	.word	0x20001014

08007738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007740:	f107 0308 	add.w	r3, r7, #8
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f859 	bl	80077fc <prvGetNextExpireTime>
 800774a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f805 	bl	8007760 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007756:	f000 f8d7 	bl	8007908 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800775a:	bf00      	nop
 800775c:	e7f0      	b.n	8007740 <prvTimerTask+0x8>
	...

08007760 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800776a:	f7ff fa37 	bl	8006bdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f866 	bl	8007844 <prvSampleTimeNow>
 8007778:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d130      	bne.n	80077e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <prvProcessTimerOrBlockTask+0x3c>
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d806      	bhi.n	800779c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800778e:	f7ff fa33 	bl	8006bf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff ff81 	bl	800769c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800779a:	e024      	b.n	80077e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077a2:	4b13      	ldr	r3, [pc, #76]	@ (80077f0 <prvProcessTimerOrBlockTask+0x90>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <prvProcessTimerOrBlockTask+0x50>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <prvProcessTimerOrBlockTask+0x52>
 80077b0:	2300      	movs	r3, #0
 80077b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077b4:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <prvProcessTimerOrBlockTask+0x94>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	f7fe ffc9 	bl	8006758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80077c6:	f7ff fa17 	bl	8006bf8 <xTaskResumeAll>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80077d0:	4b09      	ldr	r3, [pc, #36]	@ (80077f8 <prvProcessTimerOrBlockTask+0x98>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
}
 80077e0:	e001      	b.n	80077e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80077e2:	f7ff fa09 	bl	8006bf8 <xTaskResumeAll>
}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20001018 	.word	0x20001018
 80077f4:	2000101c 	.word	0x2000101c
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007804:	4b0e      	ldr	r3, [pc, #56]	@ (8007840 <prvGetNextExpireTime+0x44>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <prvGetNextExpireTime+0x16>
 800780e:	2201      	movs	r2, #1
 8007810:	e000      	b.n	8007814 <prvGetNextExpireTime+0x18>
 8007812:	2200      	movs	r2, #0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007820:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <prvGetNextExpireTime+0x44>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e001      	b.n	8007830 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20001014 	.word	0x20001014

08007844 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800784c:	f7ff fa72 	bl	8006d34 <xTaskGetTickCount>
 8007850:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <prvSampleTimeNow+0x3c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	429a      	cmp	r2, r3
 800785a:	d205      	bcs.n	8007868 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800785c:	f000 f93a 	bl	8007ad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e002      	b.n	800786e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800786e:	4a04      	ldr	r2, [pc, #16]	@ (8007880 <prvSampleTimeNow+0x3c>)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20001024 	.word	0x20001024

08007884 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d812      	bhi.n	80078d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d302      	bcc.n	80078be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	e01b      	b.n	80078f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078be:	4b10      	ldr	r3, [pc, #64]	@ (8007900 <prvInsertTimerInActiveList+0x7c>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7fe fa1c 	bl	8005d06 <vListInsert>
 80078ce:	e012      	b.n	80078f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d206      	bcs.n	80078e6 <prvInsertTimerInActiveList+0x62>
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d302      	bcc.n	80078e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e007      	b.n	80078f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078e6:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <prvInsertTimerInActiveList+0x80>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3304      	adds	r3, #4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f7fe fa08 	bl	8005d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20001018 	.word	0x20001018
 8007904:	20001014 	.word	0x20001014

08007908 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08e      	sub	sp, #56	@ 0x38
 800790c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800790e:	e0ce      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	da19      	bge.n	800794a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	3304      	adds	r3, #4
 800791a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	61fb      	str	r3, [r7, #28]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800793a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007940:	6850      	ldr	r0, [r2, #4]
 8007942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007944:	6892      	ldr	r2, [r2, #8]
 8007946:	4611      	mov	r1, r2
 8007948:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f2c0 80ae 	blt.w	8007aae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800795e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fa08 	bl	8005d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007968:	463b      	mov	r3, r7
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ff6a 	bl	8007844 <prvSampleTimeNow>
 8007970:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b09      	cmp	r3, #9
 8007976:	f200 8097 	bhi.w	8007aa8 <prvProcessReceivedCommands+0x1a0>
 800797a:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <prvProcessReceivedCommands+0x78>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079a9 	.word	0x080079a9
 800798c:	08007a1f 	.word	0x08007a1f
 8007990:	08007a33 	.word	0x08007a33
 8007994:	08007a7f 	.word	0x08007a7f
 8007998:	080079a9 	.word	0x080079a9
 800799c:	080079a9 	.word	0x080079a9
 80079a0:	08007a1f 	.word	0x08007a1f
 80079a4:	08007a33 	.word	0x08007a33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ae:	f043 0301 	orr.w	r3, r3, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	18d1      	adds	r1, r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c8:	f7ff ff5c 	bl	8007884 <prvInsertTimerInActiveList>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d06c      	beq.n	8007aac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d061      	beq.n	8007aac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	441a      	add	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	2300      	movs	r3, #0
 80079f6:	2100      	movs	r1, #0
 80079f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079fa:	f7ff fe01 	bl	8007600 <xTimerGenericCommand>
 80079fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d152      	bne.n	8007aac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	61bb      	str	r3, [r7, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a30:	e03d      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	617b      	str	r3, [r7, #20]
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	e7fd      	b.n	8007a66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	18d1      	adds	r1, r2, r3
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a78:	f7ff ff04 	bl	8007884 <prvInsertTimerInActiveList>
					break;
 8007a7c:	e017      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a8e:	f000 fbeb 	bl	8008268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a92:	e00c      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007aa6:	e002      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <prvProcessReceivedCommands+0x1a6>
					break;
 8007aac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aae:	4b08      	ldr	r3, [pc, #32]	@ (8007ad0 <prvProcessReceivedCommands+0x1c8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	1d39      	adds	r1, r7, #4
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fc32 	bl	8006320 <xQueueReceive>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f47f af26 	bne.w	8007910 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	3730      	adds	r7, #48	@ 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	2000101c 	.word	0x2000101c

08007ad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ada:	e049      	b.n	8007b70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007adc:	4b2e      	ldr	r3, [pc, #184]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe f93f 	bl	8005d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d02f      	beq.n	8007b70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d90e      	bls.n	8007b40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7fe f8e4 	bl	8005d06 <vListInsert>
 8007b3e:	e017      	b.n	8007b70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff fd58 	bl	8007600 <xTimerGenericCommand>
 8007b50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	603b      	str	r3, [r7, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
 8007b6e:	e7fd      	b.n	8007b6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1b0      	bne.n	8007adc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b7a:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b80:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <prvSwitchTimerLists+0xc8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a04      	ldr	r2, [pc, #16]	@ (8007b98 <prvSwitchTimerLists+0xc4>)
 8007b86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b88:	4a04      	ldr	r2, [pc, #16]	@ (8007b9c <prvSwitchTimerLists+0xc8>)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6013      	str	r3, [r2, #0]
}
 8007b8e:	bf00      	nop
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20001014 	.word	0x20001014
 8007b9c:	20001018 	.word	0x20001018

08007ba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ba6:	f000 f96f 	bl	8007e88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007baa:	4b15      	ldr	r3, [pc, #84]	@ (8007c00 <prvCheckForValidListAndQueue+0x60>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d120      	bne.n	8007bf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007bb2:	4814      	ldr	r0, [pc, #80]	@ (8007c04 <prvCheckForValidListAndQueue+0x64>)
 8007bb4:	f7fe f856 	bl	8005c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007bb8:	4813      	ldr	r0, [pc, #76]	@ (8007c08 <prvCheckForValidListAndQueue+0x68>)
 8007bba:	f7fe f853 	bl	8005c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007bbe:	4b13      	ldr	r3, [pc, #76]	@ (8007c0c <prvCheckForValidListAndQueue+0x6c>)
 8007bc0:	4a10      	ldr	r2, [pc, #64]	@ (8007c04 <prvCheckForValidListAndQueue+0x64>)
 8007bc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007bc4:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <prvCheckForValidListAndQueue+0x70>)
 8007bc6:	4a10      	ldr	r2, [pc, #64]	@ (8007c08 <prvCheckForValidListAndQueue+0x68>)
 8007bc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4b11      	ldr	r3, [pc, #68]	@ (8007c14 <prvCheckForValidListAndQueue+0x74>)
 8007bd0:	4a11      	ldr	r2, [pc, #68]	@ (8007c18 <prvCheckForValidListAndQueue+0x78>)
 8007bd2:	2110      	movs	r1, #16
 8007bd4:	200a      	movs	r0, #10
 8007bd6:	f7fe f963 	bl	8005ea0 <xQueueGenericCreateStatic>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4a08      	ldr	r2, [pc, #32]	@ (8007c00 <prvCheckForValidListAndQueue+0x60>)
 8007bde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <prvCheckForValidListAndQueue+0x60>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <prvCheckForValidListAndQueue+0x60>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	490b      	ldr	r1, [pc, #44]	@ (8007c1c <prvCheckForValidListAndQueue+0x7c>)
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fd88 	bl	8006704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bf4:	f000 f97a 	bl	8007eec <vPortExitCritical>
}
 8007bf8:	bf00      	nop
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000101c 	.word	0x2000101c
 8007c04:	20000fec 	.word	0x20000fec
 8007c08:	20001000 	.word	0x20001000
 8007c0c:	20001014 	.word	0x20001014
 8007c10:	20001018 	.word	0x20001018
 8007c14:	200010c8 	.word	0x200010c8
 8007c18:	20001028 	.word	0x20001028
 8007c1c:	0800ae44 	.word	0x0800ae44

08007c20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3b04      	subs	r3, #4
 8007c30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3b04      	subs	r3, #4
 8007c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f023 0201 	bic.w	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c50:	4a0c      	ldr	r2, [pc, #48]	@ (8007c84 <pxPortInitialiseStack+0x64>)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3b14      	subs	r3, #20
 8007c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3b04      	subs	r3, #4
 8007c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f06f 0202 	mvn.w	r2, #2
 8007c6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3b20      	subs	r3, #32
 8007c74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	08007c89 	.word	0x08007c89

08007c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c92:	4b13      	ldr	r3, [pc, #76]	@ (8007ce0 <prvTaskExitError+0x58>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9a:	d00b      	beq.n	8007cb4 <prvTaskExitError+0x2c>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60fb      	str	r3, [r7, #12]
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	e7fd      	b.n	8007cb0 <prvTaskExitError+0x28>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	60bb      	str	r3, [r7, #8]
}
 8007cc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cc8:	bf00      	nop
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0fc      	beq.n	8007cca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000000c 	.word	0x2000000c
	...

08007cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cf0:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <pxCurrentTCBConst2>)
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	f380 8809 	msr	PSP, r0
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	4770      	bx	lr
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst2>:
 8007d10:	20000aec 	.word	0x20000aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d18:	4808      	ldr	r0, [pc, #32]	@ (8007d3c <prvPortStartFirstTask+0x24>)
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f380 8808 	msr	MSP, r0
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8814 	msr	CONTROL, r0
 8007d2a:	b662      	cpsie	i
 8007d2c:	b661      	cpsie	f
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	df00      	svc	0
 8007d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d3a:	bf00      	nop
 8007d3c:	e000ed08 	.word	0xe000ed08

08007d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d46:	4b47      	ldr	r3, [pc, #284]	@ (8007e64 <xPortStartScheduler+0x124>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a47      	ldr	r2, [pc, #284]	@ (8007e68 <xPortStartScheduler+0x128>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d10b      	bne.n	8007d68 <xPortStartScheduler+0x28>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	613b      	str	r3, [r7, #16]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d68:	4b3e      	ldr	r3, [pc, #248]	@ (8007e64 <xPortStartScheduler+0x124>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e6c <xPortStartScheduler+0x12c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d10b      	bne.n	8007d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60fb      	str	r3, [r7, #12]
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d8a:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <xPortStartScheduler+0x130>)
 8007d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	22ff      	movs	r2, #255	@ 0xff
 8007d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	4b31      	ldr	r3, [pc, #196]	@ (8007e74 <xPortStartScheduler+0x134>)
 8007db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007db2:	4b31      	ldr	r3, [pc, #196]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007db4:	2207      	movs	r2, #7
 8007db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007db8:	e009      	b.n	8007dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007dba:	4b2f      	ldr	r3, [pc, #188]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd6:	2b80      	cmp	r3, #128	@ 0x80
 8007dd8:	d0ef      	beq.n	8007dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dda:	4b27      	ldr	r3, [pc, #156]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1c3 0307 	rsb	r3, r3, #7
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d00b      	beq.n	8007dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60bb      	str	r3, [r7, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	4a1c      	ldr	r2, [pc, #112]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e08:	4b1b      	ldr	r3, [pc, #108]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e10:	4a19      	ldr	r2, [pc, #100]	@ (8007e78 <xPortStartScheduler+0x138>)
 8007e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e1c:	4b17      	ldr	r3, [pc, #92]	@ (8007e7c <xPortStartScheduler+0x13c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a16      	ldr	r2, [pc, #88]	@ (8007e7c <xPortStartScheduler+0x13c>)
 8007e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e28:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <xPortStartScheduler+0x13c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	@ (8007e7c <xPortStartScheduler+0x13c>)
 8007e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e34:	f000 f8da 	bl	8007fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e38:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <xPortStartScheduler+0x140>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e3e:	f000 f8f9 	bl	8008034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e42:	4b10      	ldr	r3, [pc, #64]	@ (8007e84 <xPortStartScheduler+0x144>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a0f      	ldr	r2, [pc, #60]	@ (8007e84 <xPortStartScheduler+0x144>)
 8007e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e4e:	f7ff ff63 	bl	8007d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e52:	f7ff f839 	bl	8006ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8007e56:	f7ff ff17 	bl	8007c88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed00 	.word	0xe000ed00
 8007e68:	410fc271 	.word	0x410fc271
 8007e6c:	410fc270 	.word	0x410fc270
 8007e70:	e000e400 	.word	0xe000e400
 8007e74:	20001118 	.word	0x20001118
 8007e78:	2000111c 	.word	0x2000111c
 8007e7c:	e000ed20 	.word	0xe000ed20
 8007e80:	2000000c 	.word	0x2000000c
 8007e84:	e000ef34 	.word	0xe000ef34

08007e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <vPortEnterCritical+0x5c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee4 <vPortEnterCritical+0x5c>)
 8007eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007eac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <vPortEnterCritical+0x5c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d110      	bne.n	8007ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <vPortEnterCritical+0x60>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	603b      	str	r3, [r7, #0]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <vPortEnterCritical+0x4a>
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	2000000c 	.word	0x2000000c
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ef2:	4b12      	ldr	r3, [pc, #72]	@ (8007f3c <vPortExitCritical+0x50>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <vPortExitCritical+0x26>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	607b      	str	r3, [r7, #4]
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f12:	4b0a      	ldr	r3, [pc, #40]	@ (8007f3c <vPortExitCritical+0x50>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	4a08      	ldr	r2, [pc, #32]	@ (8007f3c <vPortExitCritical+0x50>)
 8007f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f1c:	4b07      	ldr	r3, [pc, #28]	@ (8007f3c <vPortExitCritical+0x50>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <vPortExitCritical+0x44>
 8007f24:	2300      	movs	r3, #0
 8007f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f383 8811 	msr	BASEPRI, r3
}
 8007f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	2000000c 	.word	0x2000000c

08007f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f40:	f3ef 8009 	mrs	r0, PSP
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	4b15      	ldr	r3, [pc, #84]	@ (8007fa0 <pxCurrentTCBConst>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	f01e 0f10 	tst.w	lr, #16
 8007f50:	bf08      	it	eq
 8007f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	6010      	str	r0, [r2, #0]
 8007f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f64:	f380 8811 	msr	BASEPRI, r0
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f7fe ffaa 	bl	8006ec8 <vTaskSwitchContext>
 8007f74:	f04f 0000 	mov.w	r0, #0
 8007f78:	f380 8811 	msr	BASEPRI, r0
 8007f7c:	bc09      	pop	{r0, r3}
 8007f7e:	6819      	ldr	r1, [r3, #0]
 8007f80:	6808      	ldr	r0, [r1, #0]
 8007f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f86:	f01e 0f10 	tst.w	lr, #16
 8007f8a:	bf08      	it	eq
 8007f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f90:	f380 8809 	msr	PSP, r0
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	f3af 8000 	nop.w

08007fa0 <pxCurrentTCBConst>:
 8007fa0:	20000aec 	.word	0x20000aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fc2:	f7fe fec7 	bl	8006d54 <xTaskIncrementTick>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <xPortSysTickHandler+0x40>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f383 8811 	msr	BASEPRI, r3
}
 8007fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <vPortSetupTimerInterrupt+0x34>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <vPortSetupTimerInterrupt+0x38>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8008028 <vPortSetupTimerInterrupt+0x3c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a0a      	ldr	r2, [pc, #40]	@ (800802c <vPortSetupTimerInterrupt+0x40>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	4a09      	ldr	r2, [pc, #36]	@ (8008030 <vPortSetupTimerInterrupt+0x44>)
 800800a:	3b01      	subs	r3, #1
 800800c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800800e:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <vPortSetupTimerInterrupt+0x34>)
 8008010:	2207      	movs	r2, #7
 8008012:	601a      	str	r2, [r3, #0]
}
 8008014:	bf00      	nop
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	e000e010 	.word	0xe000e010
 8008024:	e000e018 	.word	0xe000e018
 8008028:	20000000 	.word	0x20000000
 800802c:	51eb851f 	.word	0x51eb851f
 8008030:	e000e014 	.word	0xe000e014

08008034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008044 <vPortEnableVFP+0x10>
 8008038:	6801      	ldr	r1, [r0, #0]
 800803a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800803e:	6001      	str	r1, [r0, #0]
 8008040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008042:	bf00      	nop
 8008044:	e000ed88 	.word	0xe000ed88

08008048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800804e:	f3ef 8305 	mrs	r3, IPSR
 8008052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b0f      	cmp	r3, #15
 8008058:	d915      	bls.n	8008086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800805a:	4a18      	ldr	r2, [pc, #96]	@ (80080bc <vPortValidateInterruptPriority+0x74>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008064:	4b16      	ldr	r3, [pc, #88]	@ (80080c0 <vPortValidateInterruptPriority+0x78>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	7afa      	ldrb	r2, [r7, #11]
 800806a:	429a      	cmp	r2, r3
 800806c:	d20b      	bcs.n	8008086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	607b      	str	r3, [r7, #4]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008086:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <vPortValidateInterruptPriority+0x7c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800808e:	4b0e      	ldr	r3, [pc, #56]	@ (80080c8 <vPortValidateInterruptPriority+0x80>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d90b      	bls.n	80080ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	603b      	str	r3, [r7, #0]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vPortValidateInterruptPriority+0x62>
	}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	e000e3f0 	.word	0xe000e3f0
 80080c0:	20001118 	.word	0x20001118
 80080c4:	e000ed0c 	.word	0xe000ed0c
 80080c8:	2000111c 	.word	0x2000111c

080080cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	@ 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080d8:	f7fe fd80 	bl	8006bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008250 <pvPortMalloc+0x184>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e4:	f000 f924 	bl	8008330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008254 <pvPortMalloc+0x188>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 8095 	bne.w	8008220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01e      	beq.n	800813a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80080fc:	2208      	movs	r2, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d015      	beq.n	800813a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	3308      	adds	r3, #8
 8008116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <pvPortMalloc+0x6e>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	617b      	str	r3, [r7, #20]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d06f      	beq.n	8008220 <pvPortMalloc+0x154>
 8008140:	4b45      	ldr	r3, [pc, #276]	@ (8008258 <pvPortMalloc+0x18c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d86a      	bhi.n	8008220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800814a:	4b44      	ldr	r3, [pc, #272]	@ (800825c <pvPortMalloc+0x190>)
 800814c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800814e:	4b43      	ldr	r3, [pc, #268]	@ (800825c <pvPortMalloc+0x190>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008154:	e004      	b.n	8008160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d903      	bls.n	8008172 <pvPortMalloc+0xa6>
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f1      	bne.n	8008156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008172:	4b37      	ldr	r3, [pc, #220]	@ (8008250 <pvPortMalloc+0x184>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	d051      	beq.n	8008220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	4413      	add	r3, r2
 8008184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1ad2      	subs	r2, r2, r3
 8008196:	2308      	movs	r3, #8
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	429a      	cmp	r2, r3
 800819c:	d920      	bls.n	80081e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800819e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4413      	add	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <pvPortMalloc+0xfc>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081da:	69b8      	ldr	r0, [r7, #24]
 80081dc:	f000 f90a 	bl	80083f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008258 <pvPortMalloc+0x18c>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008258 <pvPortMalloc+0x18c>)
 80081ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008258 <pvPortMalloc+0x18c>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <pvPortMalloc+0x194>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d203      	bcs.n	8008202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081fa:	4b17      	ldr	r3, [pc, #92]	@ (8008258 <pvPortMalloc+0x18c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a18      	ldr	r2, [pc, #96]	@ (8008260 <pvPortMalloc+0x194>)
 8008200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <pvPortMalloc+0x188>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	431a      	orrs	r2, r3
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008216:	4b13      	ldr	r3, [pc, #76]	@ (8008264 <pvPortMalloc+0x198>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	4a11      	ldr	r2, [pc, #68]	@ (8008264 <pvPortMalloc+0x198>)
 800821e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008220:	f7fe fcea 	bl	8006bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <pvPortMalloc+0x17a>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
}
 8008240:	bf00      	nop
 8008242:	bf00      	nop
 8008244:	e7fd      	b.n	8008242 <pvPortMalloc+0x176>
	return pvReturn;
 8008246:	69fb      	ldr	r3, [r7, #28]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3728      	adds	r7, #40	@ 0x28
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20001d28 	.word	0x20001d28
 8008254:	20001d3c 	.word	0x20001d3c
 8008258:	20001d2c 	.word	0x20001d2c
 800825c:	20001d20 	.word	0x20001d20
 8008260:	20001d30 	.word	0x20001d30
 8008264:	20001d34 	.word	0x20001d34

08008268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d04f      	beq.n	800831a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800827a:	2308      	movs	r3, #8
 800827c:	425b      	negs	r3, r3
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4413      	add	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <vPortFree+0xbc>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4013      	ands	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <vPortFree+0x46>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60fb      	str	r3, [r7, #12]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <vPortFree+0x66>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	60bb      	str	r3, [r7, #8]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	4b14      	ldr	r3, [pc, #80]	@ (8008324 <vPortFree+0xbc>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01e      	beq.n	800831a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11a      	bne.n	800831a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008324 <vPortFree+0xbc>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	43db      	mvns	r3, r3
 80082ee:	401a      	ands	r2, r3
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f4:	f7fe fc72 	bl	8006bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <vPortFree+0xc0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4413      	add	r3, r2
 8008302:	4a09      	ldr	r2, [pc, #36]	@ (8008328 <vPortFree+0xc0>)
 8008304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008306:	6938      	ldr	r0, [r7, #16]
 8008308:	f000 f874 	bl	80083f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <vPortFree+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a06      	ldr	r2, [pc, #24]	@ (800832c <vPortFree+0xc4>)
 8008314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008316:	f7fe fc6f 	bl	8006bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800831a:	bf00      	nop
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20001d3c 	.word	0x20001d3c
 8008328:	20001d2c 	.word	0x20001d2c
 800832c:	20001d38 	.word	0x20001d38

08008330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008336:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800833a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800833c:	4b27      	ldr	r3, [pc, #156]	@ (80083dc <prvHeapInit+0xac>)
 800833e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00c      	beq.n	8008364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3307      	adds	r3, #7
 800834e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0307 	bic.w	r3, r3, #7
 8008356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	4a1f      	ldr	r2, [pc, #124]	@ (80083dc <prvHeapInit+0xac>)
 8008360:	4413      	add	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008368:	4a1d      	ldr	r2, [pc, #116]	@ (80083e0 <prvHeapInit+0xb0>)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800836e:	4b1c      	ldr	r3, [pc, #112]	@ (80083e0 <prvHeapInit+0xb0>)
 8008370:	2200      	movs	r2, #0
 8008372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	4413      	add	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800837c:	2208      	movs	r2, #8
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0307 	bic.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <prvHeapInit+0xb4>)
 8008390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008392:	4b14      	ldr	r3, [pc, #80]	@ (80083e4 <prvHeapInit+0xb4>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2200      	movs	r2, #0
 8008398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800839a:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <prvHeapInit+0xb4>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <prvHeapInit+0xb4>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	4a0a      	ldr	r2, [pc, #40]	@ (80083e8 <prvHeapInit+0xb8>)
 80083be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4a09      	ldr	r2, [pc, #36]	@ (80083ec <prvHeapInit+0xbc>)
 80083c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083c8:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <prvHeapInit+0xc0>)
 80083ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	bf00      	nop
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20001120 	.word	0x20001120
 80083e0:	20001d20 	.word	0x20001d20
 80083e4:	20001d28 	.word	0x20001d28
 80083e8:	20001d30 	.word	0x20001d30
 80083ec:	20001d2c 	.word	0x20001d2c
 80083f0:	20001d3c 	.word	0x20001d3c

080083f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083fc:	4b28      	ldr	r3, [pc, #160]	@ (80084a0 <prvInsertBlockIntoFreeList+0xac>)
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e002      	b.n	8008408 <prvInsertBlockIntoFreeList+0x14>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	429a      	cmp	r2, r3
 8008410:	d8f7      	bhi.n	8008402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d108      	bne.n	8008436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	441a      	add	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d118      	bne.n	800847c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b15      	ldr	r3, [pc, #84]	@ (80084a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d00d      	beq.n	8008472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	441a      	add	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	e008      	b.n	8008484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008472:	4b0c      	ldr	r3, [pc, #48]	@ (80084a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e003      	b.n	8008484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d002      	beq.n	8008492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20001d20 	.word	0x20001d20
 80084a4:	20001d28 	.word	0x20001d28

080084a8 <__cvt>:
 80084a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	ec57 6b10 	vmov	r6, r7, d0
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	460c      	mov	r4, r1
 80084b4:	4619      	mov	r1, r3
 80084b6:	463b      	mov	r3, r7
 80084b8:	bfbb      	ittet	lt
 80084ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80084be:	461f      	movlt	r7, r3
 80084c0:	2300      	movge	r3, #0
 80084c2:	232d      	movlt	r3, #45	@ 0x2d
 80084c4:	700b      	strb	r3, [r1, #0]
 80084c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80084cc:	4691      	mov	r9, r2
 80084ce:	f023 0820 	bic.w	r8, r3, #32
 80084d2:	bfbc      	itt	lt
 80084d4:	4632      	movlt	r2, r6
 80084d6:	4616      	movlt	r6, r2
 80084d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084dc:	d005      	beq.n	80084ea <__cvt+0x42>
 80084de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80084e2:	d100      	bne.n	80084e6 <__cvt+0x3e>
 80084e4:	3401      	adds	r4, #1
 80084e6:	2102      	movs	r1, #2
 80084e8:	e000      	b.n	80084ec <__cvt+0x44>
 80084ea:	2103      	movs	r1, #3
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	ab02      	add	r3, sp, #8
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	ec47 6b10 	vmov	d0, r6, r7
 80084f8:	4653      	mov	r3, sl
 80084fa:	4622      	mov	r2, r4
 80084fc:	f000 fe5c 	bl	80091b8 <_dtoa_r>
 8008500:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008504:	4605      	mov	r5, r0
 8008506:	d119      	bne.n	800853c <__cvt+0x94>
 8008508:	f019 0f01 	tst.w	r9, #1
 800850c:	d00e      	beq.n	800852c <__cvt+0x84>
 800850e:	eb00 0904 	add.w	r9, r0, r4
 8008512:	2200      	movs	r2, #0
 8008514:	2300      	movs	r3, #0
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f8 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800851e:	b108      	cbz	r0, 8008524 <__cvt+0x7c>
 8008520:	f8cd 900c 	str.w	r9, [sp, #12]
 8008524:	2230      	movs	r2, #48	@ 0x30
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	454b      	cmp	r3, r9
 800852a:	d31e      	bcc.n	800856a <__cvt+0xc2>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008530:	1b5b      	subs	r3, r3, r5
 8008532:	4628      	mov	r0, r5
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	b004      	add	sp, #16
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008540:	eb00 0904 	add.w	r9, r0, r4
 8008544:	d1e5      	bne.n	8008512 <__cvt+0x6a>
 8008546:	7803      	ldrb	r3, [r0, #0]
 8008548:	2b30      	cmp	r3, #48	@ 0x30
 800854a:	d10a      	bne.n	8008562 <__cvt+0xba>
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f8 fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8008558:	b918      	cbnz	r0, 8008562 <__cvt+0xba>
 800855a:	f1c4 0401 	rsb	r4, r4, #1
 800855e:	f8ca 4000 	str.w	r4, [sl]
 8008562:	f8da 3000 	ldr.w	r3, [sl]
 8008566:	4499      	add	r9, r3
 8008568:	e7d3      	b.n	8008512 <__cvt+0x6a>
 800856a:	1c59      	adds	r1, r3, #1
 800856c:	9103      	str	r1, [sp, #12]
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	e7d9      	b.n	8008526 <__cvt+0x7e>

08008572 <__exponent>:
 8008572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008574:	2900      	cmp	r1, #0
 8008576:	bfba      	itte	lt
 8008578:	4249      	neglt	r1, r1
 800857a:	232d      	movlt	r3, #45	@ 0x2d
 800857c:	232b      	movge	r3, #43	@ 0x2b
 800857e:	2909      	cmp	r1, #9
 8008580:	7002      	strb	r2, [r0, #0]
 8008582:	7043      	strb	r3, [r0, #1]
 8008584:	dd29      	ble.n	80085da <__exponent+0x68>
 8008586:	f10d 0307 	add.w	r3, sp, #7
 800858a:	461d      	mov	r5, r3
 800858c:	270a      	movs	r7, #10
 800858e:	461a      	mov	r2, r3
 8008590:	fbb1 f6f7 	udiv	r6, r1, r7
 8008594:	fb07 1416 	mls	r4, r7, r6, r1
 8008598:	3430      	adds	r4, #48	@ 0x30
 800859a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800859e:	460c      	mov	r4, r1
 80085a0:	2c63      	cmp	r4, #99	@ 0x63
 80085a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085a6:	4631      	mov	r1, r6
 80085a8:	dcf1      	bgt.n	800858e <__exponent+0x1c>
 80085aa:	3130      	adds	r1, #48	@ 0x30
 80085ac:	1e94      	subs	r4, r2, #2
 80085ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085b2:	1c41      	adds	r1, r0, #1
 80085b4:	4623      	mov	r3, r4
 80085b6:	42ab      	cmp	r3, r5
 80085b8:	d30a      	bcc.n	80085d0 <__exponent+0x5e>
 80085ba:	f10d 0309 	add.w	r3, sp, #9
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	42ac      	cmp	r4, r5
 80085c2:	bf88      	it	hi
 80085c4:	2300      	movhi	r3, #0
 80085c6:	3302      	adds	r3, #2
 80085c8:	4403      	add	r3, r0
 80085ca:	1a18      	subs	r0, r3, r0
 80085cc:	b003      	add	sp, #12
 80085ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80085d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80085d8:	e7ed      	b.n	80085b6 <__exponent+0x44>
 80085da:	2330      	movs	r3, #48	@ 0x30
 80085dc:	3130      	adds	r1, #48	@ 0x30
 80085de:	7083      	strb	r3, [r0, #2]
 80085e0:	70c1      	strb	r1, [r0, #3]
 80085e2:	1d03      	adds	r3, r0, #4
 80085e4:	e7f1      	b.n	80085ca <__exponent+0x58>
	...

080085e8 <_printf_float>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	b08d      	sub	sp, #52	@ 0x34
 80085ee:	460c      	mov	r4, r1
 80085f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80085f4:	4616      	mov	r6, r2
 80085f6:	461f      	mov	r7, r3
 80085f8:	4605      	mov	r5, r0
 80085fa:	f000 fccd 	bl	8008f98 <_localeconv_r>
 80085fe:	6803      	ldr	r3, [r0, #0]
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 fe5c 	bl	80002c0 <strlen>
 8008608:	2300      	movs	r3, #0
 800860a:	930a      	str	r3, [sp, #40]	@ 0x28
 800860c:	f8d8 3000 	ldr.w	r3, [r8]
 8008610:	9005      	str	r0, [sp, #20]
 8008612:	3307      	adds	r3, #7
 8008614:	f023 0307 	bic.w	r3, r3, #7
 8008618:	f103 0208 	add.w	r2, r3, #8
 800861c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008620:	f8d4 b000 	ldr.w	fp, [r4]
 8008624:	f8c8 2000 	str.w	r2, [r8]
 8008628:	e9d3 8900 	ldrd	r8, r9, [r3]
 800862c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	f8cd 8018 	str.w	r8, [sp, #24]
 8008636:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800863a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800863e:	4b9c      	ldr	r3, [pc, #624]	@ (80088b0 <_printf_float+0x2c8>)
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	f7f8 fa9a 	bl	8000b7c <__aeabi_dcmpun>
 8008648:	bb70      	cbnz	r0, 80086a8 <_printf_float+0xc0>
 800864a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800864e:	4b98      	ldr	r3, [pc, #608]	@ (80088b0 <_printf_float+0x2c8>)
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	f7f8 fa74 	bl	8000b40 <__aeabi_dcmple>
 8008658:	bb30      	cbnz	r0, 80086a8 <_printf_float+0xc0>
 800865a:	2200      	movs	r2, #0
 800865c:	2300      	movs	r3, #0
 800865e:	4640      	mov	r0, r8
 8008660:	4649      	mov	r1, r9
 8008662:	f7f8 fa63 	bl	8000b2c <__aeabi_dcmplt>
 8008666:	b110      	cbz	r0, 800866e <_printf_float+0x86>
 8008668:	232d      	movs	r3, #45	@ 0x2d
 800866a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800866e:	4a91      	ldr	r2, [pc, #580]	@ (80088b4 <_printf_float+0x2cc>)
 8008670:	4b91      	ldr	r3, [pc, #580]	@ (80088b8 <_printf_float+0x2d0>)
 8008672:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008676:	bf94      	ite	ls
 8008678:	4690      	movls	r8, r2
 800867a:	4698      	movhi	r8, r3
 800867c:	2303      	movs	r3, #3
 800867e:	6123      	str	r3, [r4, #16]
 8008680:	f02b 0304 	bic.w	r3, fp, #4
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	9700      	str	r7, [sp, #0]
 800868c:	4633      	mov	r3, r6
 800868e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008690:	4621      	mov	r1, r4
 8008692:	4628      	mov	r0, r5
 8008694:	f000 f9d2 	bl	8008a3c <_printf_common>
 8008698:	3001      	adds	r0, #1
 800869a:	f040 808d 	bne.w	80087b8 <_printf_float+0x1d0>
 800869e:	f04f 30ff 	mov.w	r0, #4294967295
 80086a2:	b00d      	add	sp, #52	@ 0x34
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f8 fa64 	bl	8000b7c <__aeabi_dcmpun>
 80086b4:	b140      	cbz	r0, 80086c8 <_printf_float+0xe0>
 80086b6:	464b      	mov	r3, r9
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bfbc      	itt	lt
 80086bc:	232d      	movlt	r3, #45	@ 0x2d
 80086be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80086c2:	4a7e      	ldr	r2, [pc, #504]	@ (80088bc <_printf_float+0x2d4>)
 80086c4:	4b7e      	ldr	r3, [pc, #504]	@ (80088c0 <_printf_float+0x2d8>)
 80086c6:	e7d4      	b.n	8008672 <_printf_float+0x8a>
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80086ce:	9206      	str	r2, [sp, #24]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	d13b      	bne.n	800874c <_printf_float+0x164>
 80086d4:	2306      	movs	r3, #6
 80086d6:	6063      	str	r3, [r4, #4]
 80086d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80086dc:	2300      	movs	r3, #0
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80086e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80086e8:	ab09      	add	r3, sp, #36	@ 0x24
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	ec49 8b10 	vmov	d0, r8, r9
 80086f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80086f6:	4628      	mov	r0, r5
 80086f8:	f7ff fed6 	bl	80084a8 <__cvt>
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008700:	2b47      	cmp	r3, #71	@ 0x47
 8008702:	4680      	mov	r8, r0
 8008704:	d129      	bne.n	800875a <_printf_float+0x172>
 8008706:	1cc8      	adds	r0, r1, #3
 8008708:	db02      	blt.n	8008710 <_printf_float+0x128>
 800870a:	6863      	ldr	r3, [r4, #4]
 800870c:	4299      	cmp	r1, r3
 800870e:	dd41      	ble.n	8008794 <_printf_float+0x1ac>
 8008710:	f1aa 0a02 	sub.w	sl, sl, #2
 8008714:	fa5f fa8a 	uxtb.w	sl, sl
 8008718:	3901      	subs	r1, #1
 800871a:	4652      	mov	r2, sl
 800871c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008720:	9109      	str	r1, [sp, #36]	@ 0x24
 8008722:	f7ff ff26 	bl	8008572 <__exponent>
 8008726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008728:	1813      	adds	r3, r2, r0
 800872a:	2a01      	cmp	r2, #1
 800872c:	4681      	mov	r9, r0
 800872e:	6123      	str	r3, [r4, #16]
 8008730:	dc02      	bgt.n	8008738 <_printf_float+0x150>
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	07d2      	lsls	r2, r2, #31
 8008736:	d501      	bpl.n	800873c <_printf_float+0x154>
 8008738:	3301      	adds	r3, #1
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0a2      	beq.n	800868a <_printf_float+0xa2>
 8008744:	232d      	movs	r3, #45	@ 0x2d
 8008746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800874a:	e79e      	b.n	800868a <_printf_float+0xa2>
 800874c:	9a06      	ldr	r2, [sp, #24]
 800874e:	2a47      	cmp	r2, #71	@ 0x47
 8008750:	d1c2      	bne.n	80086d8 <_printf_float+0xf0>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1c0      	bne.n	80086d8 <_printf_float+0xf0>
 8008756:	2301      	movs	r3, #1
 8008758:	e7bd      	b.n	80086d6 <_printf_float+0xee>
 800875a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800875e:	d9db      	bls.n	8008718 <_printf_float+0x130>
 8008760:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008764:	d118      	bne.n	8008798 <_printf_float+0x1b0>
 8008766:	2900      	cmp	r1, #0
 8008768:	6863      	ldr	r3, [r4, #4]
 800876a:	dd0b      	ble.n	8008784 <_printf_float+0x19c>
 800876c:	6121      	str	r1, [r4, #16]
 800876e:	b913      	cbnz	r3, 8008776 <_printf_float+0x18e>
 8008770:	6822      	ldr	r2, [r4, #0]
 8008772:	07d0      	lsls	r0, r2, #31
 8008774:	d502      	bpl.n	800877c <_printf_float+0x194>
 8008776:	3301      	adds	r3, #1
 8008778:	440b      	add	r3, r1
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800877e:	f04f 0900 	mov.w	r9, #0
 8008782:	e7db      	b.n	800873c <_printf_float+0x154>
 8008784:	b913      	cbnz	r3, 800878c <_printf_float+0x1a4>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	07d2      	lsls	r2, r2, #31
 800878a:	d501      	bpl.n	8008790 <_printf_float+0x1a8>
 800878c:	3302      	adds	r3, #2
 800878e:	e7f4      	b.n	800877a <_printf_float+0x192>
 8008790:	2301      	movs	r3, #1
 8008792:	e7f2      	b.n	800877a <_printf_float+0x192>
 8008794:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800879a:	4299      	cmp	r1, r3
 800879c:	db05      	blt.n	80087aa <_printf_float+0x1c2>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	6121      	str	r1, [r4, #16]
 80087a2:	07d8      	lsls	r0, r3, #31
 80087a4:	d5ea      	bpl.n	800877c <_printf_float+0x194>
 80087a6:	1c4b      	adds	r3, r1, #1
 80087a8:	e7e7      	b.n	800877a <_printf_float+0x192>
 80087aa:	2900      	cmp	r1, #0
 80087ac:	bfd4      	ite	le
 80087ae:	f1c1 0202 	rsble	r2, r1, #2
 80087b2:	2201      	movgt	r2, #1
 80087b4:	4413      	add	r3, r2
 80087b6:	e7e0      	b.n	800877a <_printf_float+0x192>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	055a      	lsls	r2, r3, #21
 80087bc:	d407      	bmi.n	80087ce <_printf_float+0x1e6>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	4642      	mov	r2, r8
 80087c2:	4631      	mov	r1, r6
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b8      	blx	r7
 80087c8:	3001      	adds	r0, #1
 80087ca:	d12b      	bne.n	8008824 <_printf_float+0x23c>
 80087cc:	e767      	b.n	800869e <_printf_float+0xb6>
 80087ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087d2:	f240 80dd 	bls.w	8008990 <_printf_float+0x3a8>
 80087d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087da:	2200      	movs	r2, #0
 80087dc:	2300      	movs	r3, #0
 80087de:	f7f8 f99b 	bl	8000b18 <__aeabi_dcmpeq>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d033      	beq.n	800884e <_printf_float+0x266>
 80087e6:	4a37      	ldr	r2, [pc, #220]	@ (80088c4 <_printf_float+0x2dc>)
 80087e8:	2301      	movs	r3, #1
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f af54 	beq.w	800869e <_printf_float+0xb6>
 80087f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80087fa:	4543      	cmp	r3, r8
 80087fc:	db02      	blt.n	8008804 <_printf_float+0x21c>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	07d8      	lsls	r0, r3, #31
 8008802:	d50f      	bpl.n	8008824 <_printf_float+0x23c>
 8008804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f af45 	beq.w	800869e <_printf_float+0xb6>
 8008814:	f04f 0900 	mov.w	r9, #0
 8008818:	f108 38ff 	add.w	r8, r8, #4294967295
 800881c:	f104 0a1a 	add.w	sl, r4, #26
 8008820:	45c8      	cmp	r8, r9
 8008822:	dc09      	bgt.n	8008838 <_printf_float+0x250>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	f100 8103 	bmi.w	8008a32 <_printf_float+0x44a>
 800882c:	68e0      	ldr	r0, [r4, #12]
 800882e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008830:	4298      	cmp	r0, r3
 8008832:	bfb8      	it	lt
 8008834:	4618      	movlt	r0, r3
 8008836:	e734      	b.n	80086a2 <_printf_float+0xba>
 8008838:	2301      	movs	r3, #1
 800883a:	4652      	mov	r2, sl
 800883c:	4631      	mov	r1, r6
 800883e:	4628      	mov	r0, r5
 8008840:	47b8      	blx	r7
 8008842:	3001      	adds	r0, #1
 8008844:	f43f af2b 	beq.w	800869e <_printf_float+0xb6>
 8008848:	f109 0901 	add.w	r9, r9, #1
 800884c:	e7e8      	b.n	8008820 <_printf_float+0x238>
 800884e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008850:	2b00      	cmp	r3, #0
 8008852:	dc39      	bgt.n	80088c8 <_printf_float+0x2e0>
 8008854:	4a1b      	ldr	r2, [pc, #108]	@ (80088c4 <_printf_float+0x2dc>)
 8008856:	2301      	movs	r3, #1
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	f43f af1d 	beq.w	800869e <_printf_float+0xb6>
 8008864:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008868:	ea59 0303 	orrs.w	r3, r9, r3
 800886c:	d102      	bne.n	8008874 <_printf_float+0x28c>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	07d9      	lsls	r1, r3, #31
 8008872:	d5d7      	bpl.n	8008824 <_printf_float+0x23c>
 8008874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af0d 	beq.w	800869e <_printf_float+0xb6>
 8008884:	f04f 0a00 	mov.w	sl, #0
 8008888:	f104 0b1a 	add.w	fp, r4, #26
 800888c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888e:	425b      	negs	r3, r3
 8008890:	4553      	cmp	r3, sl
 8008892:	dc01      	bgt.n	8008898 <_printf_float+0x2b0>
 8008894:	464b      	mov	r3, r9
 8008896:	e793      	b.n	80087c0 <_printf_float+0x1d8>
 8008898:	2301      	movs	r3, #1
 800889a:	465a      	mov	r2, fp
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f aefb 	beq.w	800869e <_printf_float+0xb6>
 80088a8:	f10a 0a01 	add.w	sl, sl, #1
 80088ac:	e7ee      	b.n	800888c <_printf_float+0x2a4>
 80088ae:	bf00      	nop
 80088b0:	7fefffff 	.word	0x7fefffff
 80088b4:	0800af1c 	.word	0x0800af1c
 80088b8:	0800af20 	.word	0x0800af20
 80088bc:	0800af24 	.word	0x0800af24
 80088c0:	0800af28 	.word	0x0800af28
 80088c4:	0800af2c 	.word	0x0800af2c
 80088c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088ce:	4553      	cmp	r3, sl
 80088d0:	bfa8      	it	ge
 80088d2:	4653      	movge	r3, sl
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	4699      	mov	r9, r3
 80088d8:	dc36      	bgt.n	8008948 <_printf_float+0x360>
 80088da:	f04f 0b00 	mov.w	fp, #0
 80088de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088e2:	f104 021a 	add.w	r2, r4, #26
 80088e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088e8:	9306      	str	r3, [sp, #24]
 80088ea:	eba3 0309 	sub.w	r3, r3, r9
 80088ee:	455b      	cmp	r3, fp
 80088f0:	dc31      	bgt.n	8008956 <_printf_float+0x36e>
 80088f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f4:	459a      	cmp	sl, r3
 80088f6:	dc3a      	bgt.n	800896e <_printf_float+0x386>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	07da      	lsls	r2, r3, #31
 80088fc:	d437      	bmi.n	800896e <_printf_float+0x386>
 80088fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008900:	ebaa 0903 	sub.w	r9, sl, r3
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	ebaa 0303 	sub.w	r3, sl, r3
 800890a:	4599      	cmp	r9, r3
 800890c:	bfa8      	it	ge
 800890e:	4699      	movge	r9, r3
 8008910:	f1b9 0f00 	cmp.w	r9, #0
 8008914:	dc33      	bgt.n	800897e <_printf_float+0x396>
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800891e:	f104 0b1a 	add.w	fp, r4, #26
 8008922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008924:	ebaa 0303 	sub.w	r3, sl, r3
 8008928:	eba3 0309 	sub.w	r3, r3, r9
 800892c:	4543      	cmp	r3, r8
 800892e:	f77f af79 	ble.w	8008824 <_printf_float+0x23c>
 8008932:	2301      	movs	r3, #1
 8008934:	465a      	mov	r2, fp
 8008936:	4631      	mov	r1, r6
 8008938:	4628      	mov	r0, r5
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	f43f aeae 	beq.w	800869e <_printf_float+0xb6>
 8008942:	f108 0801 	add.w	r8, r8, #1
 8008946:	e7ec      	b.n	8008922 <_printf_float+0x33a>
 8008948:	4642      	mov	r2, r8
 800894a:	4631      	mov	r1, r6
 800894c:	4628      	mov	r0, r5
 800894e:	47b8      	blx	r7
 8008950:	3001      	adds	r0, #1
 8008952:	d1c2      	bne.n	80088da <_printf_float+0x2f2>
 8008954:	e6a3      	b.n	800869e <_printf_float+0xb6>
 8008956:	2301      	movs	r3, #1
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	9206      	str	r2, [sp, #24]
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	f43f ae9c 	beq.w	800869e <_printf_float+0xb6>
 8008966:	9a06      	ldr	r2, [sp, #24]
 8008968:	f10b 0b01 	add.w	fp, fp, #1
 800896c:	e7bb      	b.n	80088e6 <_printf_float+0x2fe>
 800896e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	d1c0      	bne.n	80088fe <_printf_float+0x316>
 800897c:	e68f      	b.n	800869e <_printf_float+0xb6>
 800897e:	9a06      	ldr	r2, [sp, #24]
 8008980:	464b      	mov	r3, r9
 8008982:	4442      	add	r2, r8
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	d1c3      	bne.n	8008916 <_printf_float+0x32e>
 800898e:	e686      	b.n	800869e <_printf_float+0xb6>
 8008990:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008994:	f1ba 0f01 	cmp.w	sl, #1
 8008998:	dc01      	bgt.n	800899e <_printf_float+0x3b6>
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	d536      	bpl.n	8008a0c <_printf_float+0x424>
 800899e:	2301      	movs	r3, #1
 80089a0:	4642      	mov	r2, r8
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	f43f ae78 	beq.w	800869e <_printf_float+0xb6>
 80089ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	f43f ae70 	beq.w	800869e <_printf_float+0xb6>
 80089be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089c2:	2200      	movs	r2, #0
 80089c4:	2300      	movs	r3, #0
 80089c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ca:	f7f8 f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 80089ce:	b9c0      	cbnz	r0, 8008a02 <_printf_float+0x41a>
 80089d0:	4653      	mov	r3, sl
 80089d2:	f108 0201 	add.w	r2, r8, #1
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	d10c      	bne.n	80089fa <_printf_float+0x412>
 80089e0:	e65d      	b.n	800869e <_printf_float+0xb6>
 80089e2:	2301      	movs	r3, #1
 80089e4:	465a      	mov	r2, fp
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	f43f ae56 	beq.w	800869e <_printf_float+0xb6>
 80089f2:	f108 0801 	add.w	r8, r8, #1
 80089f6:	45d0      	cmp	r8, sl
 80089f8:	dbf3      	blt.n	80089e2 <_printf_float+0x3fa>
 80089fa:	464b      	mov	r3, r9
 80089fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a00:	e6df      	b.n	80087c2 <_printf_float+0x1da>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	f104 0b1a 	add.w	fp, r4, #26
 8008a0a:	e7f4      	b.n	80089f6 <_printf_float+0x40e>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4642      	mov	r2, r8
 8008a10:	e7e1      	b.n	80089d6 <_printf_float+0x3ee>
 8008a12:	2301      	movs	r3, #1
 8008a14:	464a      	mov	r2, r9
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f ae3e 	beq.w	800869e <_printf_float+0xb6>
 8008a22:	f108 0801 	add.w	r8, r8, #1
 8008a26:	68e3      	ldr	r3, [r4, #12]
 8008a28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a2a:	1a5b      	subs	r3, r3, r1
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	dcf0      	bgt.n	8008a12 <_printf_float+0x42a>
 8008a30:	e6fc      	b.n	800882c <_printf_float+0x244>
 8008a32:	f04f 0800 	mov.w	r8, #0
 8008a36:	f104 0919 	add.w	r9, r4, #25
 8008a3a:	e7f4      	b.n	8008a26 <_printf_float+0x43e>

08008a3c <_printf_common>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	4616      	mov	r6, r2
 8008a42:	4698      	mov	r8, r3
 8008a44:	688a      	ldr	r2, [r1, #8]
 8008a46:	690b      	ldr	r3, [r1, #16]
 8008a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bfb8      	it	lt
 8008a50:	4613      	movlt	r3, r2
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a58:	4607      	mov	r7, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_printf_common+0x26>
 8008a5e:	3301      	adds	r3, #1
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	0699      	lsls	r1, r3, #26
 8008a66:	bf42      	ittt	mi
 8008a68:	6833      	ldrmi	r3, [r6, #0]
 8008a6a:	3302      	addmi	r3, #2
 8008a6c:	6033      	strmi	r3, [r6, #0]
 8008a6e:	6825      	ldr	r5, [r4, #0]
 8008a70:	f015 0506 	ands.w	r5, r5, #6
 8008a74:	d106      	bne.n	8008a84 <_printf_common+0x48>
 8008a76:	f104 0a19 	add.w	sl, r4, #25
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	6832      	ldr	r2, [r6, #0]
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dc26      	bgt.n	8008ad2 <_printf_common+0x96>
 8008a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	3b00      	subs	r3, #0
 8008a8c:	bf18      	it	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	0692      	lsls	r2, r2, #26
 8008a92:	d42b      	bmi.n	8008aec <_printf_common+0xb0>
 8008a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a98:	4641      	mov	r1, r8
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c8      	blx	r9
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d01e      	beq.n	8008ae0 <_printf_common+0xa4>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	6922      	ldr	r2, [r4, #16]
 8008aa6:	f003 0306 	and.w	r3, r3, #6
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	bf02      	ittt	eq
 8008aae:	68e5      	ldreq	r5, [r4, #12]
 8008ab0:	6833      	ldreq	r3, [r6, #0]
 8008ab2:	1aed      	subeq	r5, r5, r3
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	bf0c      	ite	eq
 8008ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008abc:	2500      	movne	r5, #0
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bfc4      	itt	gt
 8008ac2:	1a9b      	subgt	r3, r3, r2
 8008ac4:	18ed      	addgt	r5, r5, r3
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	341a      	adds	r4, #26
 8008aca:	42b5      	cmp	r5, r6
 8008acc:	d11a      	bne.n	8008b04 <_printf_common+0xc8>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e008      	b.n	8008ae4 <_printf_common+0xa8>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	4638      	mov	r0, r7
 8008ada:	47c8      	blx	r9
 8008adc:	3001      	adds	r0, #1
 8008ade:	d103      	bne.n	8008ae8 <_printf_common+0xac>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae8:	3501      	adds	r5, #1
 8008aea:	e7c6      	b.n	8008a7a <_printf_common+0x3e>
 8008aec:	18e1      	adds	r1, r4, r3
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	2030      	movs	r0, #48	@ 0x30
 8008af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008af6:	4422      	add	r2, r4
 8008af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b00:	3302      	adds	r3, #2
 8008b02:	e7c7      	b.n	8008a94 <_printf_common+0x58>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4622      	mov	r2, r4
 8008b08:	4641      	mov	r1, r8
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c8      	blx	r9
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d0e6      	beq.n	8008ae0 <_printf_common+0xa4>
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7d9      	b.n	8008aca <_printf_common+0x8e>
	...

08008b18 <_printf_i>:
 8008b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	7e0f      	ldrb	r7, [r1, #24]
 8008b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b20:	2f78      	cmp	r7, #120	@ 0x78
 8008b22:	4691      	mov	r9, r2
 8008b24:	4680      	mov	r8, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	469a      	mov	sl, r3
 8008b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b2e:	d807      	bhi.n	8008b40 <_printf_i+0x28>
 8008b30:	2f62      	cmp	r7, #98	@ 0x62
 8008b32:	d80a      	bhi.n	8008b4a <_printf_i+0x32>
 8008b34:	2f00      	cmp	r7, #0
 8008b36:	f000 80d2 	beq.w	8008cde <_printf_i+0x1c6>
 8008b3a:	2f58      	cmp	r7, #88	@ 0x58
 8008b3c:	f000 80b9 	beq.w	8008cb2 <_printf_i+0x19a>
 8008b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b48:	e03a      	b.n	8008bc0 <_printf_i+0xa8>
 8008b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b4e:	2b15      	cmp	r3, #21
 8008b50:	d8f6      	bhi.n	8008b40 <_printf_i+0x28>
 8008b52:	a101      	add	r1, pc, #4	@ (adr r1, 8008b58 <_printf_i+0x40>)
 8008b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008b41 	.word	0x08008b41
 8008b64:	08008b41 	.word	0x08008b41
 8008b68:	08008b41 	.word	0x08008b41
 8008b6c:	08008b41 	.word	0x08008b41
 8008b70:	08008bc5 	.word	0x08008bc5
 8008b74:	08008b41 	.word	0x08008b41
 8008b78:	08008b41 	.word	0x08008b41
 8008b7c:	08008b41 	.word	0x08008b41
 8008b80:	08008b41 	.word	0x08008b41
 8008b84:	08008cc5 	.word	0x08008cc5
 8008b88:	08008bef 	.word	0x08008bef
 8008b8c:	08008c7f 	.word	0x08008c7f
 8008b90:	08008b41 	.word	0x08008b41
 8008b94:	08008b41 	.word	0x08008b41
 8008b98:	08008ce7 	.word	0x08008ce7
 8008b9c:	08008b41 	.word	0x08008b41
 8008ba0:	08008bef 	.word	0x08008bef
 8008ba4:	08008b41 	.word	0x08008b41
 8008ba8:	08008b41 	.word	0x08008b41
 8008bac:	08008c87 	.word	0x08008c87
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	1d1a      	adds	r2, r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6032      	str	r2, [r6, #0]
 8008bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e09d      	b.n	8008d00 <_printf_i+0x1e8>
 8008bc4:	6833      	ldr	r3, [r6, #0]
 8008bc6:	6820      	ldr	r0, [r4, #0]
 8008bc8:	1d19      	adds	r1, r3, #4
 8008bca:	6031      	str	r1, [r6, #0]
 8008bcc:	0606      	lsls	r6, r0, #24
 8008bce:	d501      	bpl.n	8008bd4 <_printf_i+0xbc>
 8008bd0:	681d      	ldr	r5, [r3, #0]
 8008bd2:	e003      	b.n	8008bdc <_printf_i+0xc4>
 8008bd4:	0645      	lsls	r5, r0, #25
 8008bd6:	d5fb      	bpl.n	8008bd0 <_printf_i+0xb8>
 8008bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	da03      	bge.n	8008be8 <_printf_i+0xd0>
 8008be0:	232d      	movs	r3, #45	@ 0x2d
 8008be2:	426d      	negs	r5, r5
 8008be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008be8:	4859      	ldr	r0, [pc, #356]	@ (8008d50 <_printf_i+0x238>)
 8008bea:	230a      	movs	r3, #10
 8008bec:	e011      	b.n	8008c12 <_printf_i+0xfa>
 8008bee:	6821      	ldr	r1, [r4, #0]
 8008bf0:	6833      	ldr	r3, [r6, #0]
 8008bf2:	0608      	lsls	r0, r1, #24
 8008bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bf8:	d402      	bmi.n	8008c00 <_printf_i+0xe8>
 8008bfa:	0649      	lsls	r1, r1, #25
 8008bfc:	bf48      	it	mi
 8008bfe:	b2ad      	uxthmi	r5, r5
 8008c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c02:	4853      	ldr	r0, [pc, #332]	@ (8008d50 <_printf_i+0x238>)
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	bf14      	ite	ne
 8008c08:	230a      	movne	r3, #10
 8008c0a:	2308      	moveq	r3, #8
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c12:	6866      	ldr	r6, [r4, #4]
 8008c14:	60a6      	str	r6, [r4, #8]
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	bfa2      	ittt	ge
 8008c1a:	6821      	ldrge	r1, [r4, #0]
 8008c1c:	f021 0104 	bicge.w	r1, r1, #4
 8008c20:	6021      	strge	r1, [r4, #0]
 8008c22:	b90d      	cbnz	r5, 8008c28 <_printf_i+0x110>
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	d04b      	beq.n	8008cc0 <_printf_i+0x1a8>
 8008c28:	4616      	mov	r6, r2
 8008c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c32:	5dc7      	ldrb	r7, [r0, r7]
 8008c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c38:	462f      	mov	r7, r5
 8008c3a:	42bb      	cmp	r3, r7
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	d9f4      	bls.n	8008c2a <_printf_i+0x112>
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d10b      	bne.n	8008c5c <_printf_i+0x144>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	07df      	lsls	r7, r3, #31
 8008c48:	d508      	bpl.n	8008c5c <_printf_i+0x144>
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	bfde      	ittt	le
 8008c52:	2330      	movle	r3, #48	@ 0x30
 8008c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c5c:	1b92      	subs	r2, r2, r6
 8008c5e:	6122      	str	r2, [r4, #16]
 8008c60:	f8cd a000 	str.w	sl, [sp]
 8008c64:	464b      	mov	r3, r9
 8008c66:	aa03      	add	r2, sp, #12
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	f7ff fee6 	bl	8008a3c <_printf_common>
 8008c70:	3001      	adds	r0, #1
 8008c72:	d14a      	bne.n	8008d0a <_printf_i+0x1f2>
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	b004      	add	sp, #16
 8008c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	f043 0320 	orr.w	r3, r3, #32
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	4833      	ldr	r0, [pc, #204]	@ (8008d54 <_printf_i+0x23c>)
 8008c88:	2778      	movs	r7, #120	@ 0x78
 8008c8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	6831      	ldr	r1, [r6, #0]
 8008c92:	061f      	lsls	r7, r3, #24
 8008c94:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c98:	d402      	bmi.n	8008ca0 <_printf_i+0x188>
 8008c9a:	065f      	lsls	r7, r3, #25
 8008c9c:	bf48      	it	mi
 8008c9e:	b2ad      	uxthmi	r5, r5
 8008ca0:	6031      	str	r1, [r6, #0]
 8008ca2:	07d9      	lsls	r1, r3, #31
 8008ca4:	bf44      	itt	mi
 8008ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8008caa:	6023      	strmi	r3, [r4, #0]
 8008cac:	b11d      	cbz	r5, 8008cb6 <_printf_i+0x19e>
 8008cae:	2310      	movs	r3, #16
 8008cb0:	e7ac      	b.n	8008c0c <_printf_i+0xf4>
 8008cb2:	4827      	ldr	r0, [pc, #156]	@ (8008d50 <_printf_i+0x238>)
 8008cb4:	e7e9      	b.n	8008c8a <_printf_i+0x172>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f023 0320 	bic.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	e7f6      	b.n	8008cae <_printf_i+0x196>
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	e7bd      	b.n	8008c40 <_printf_i+0x128>
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	6825      	ldr	r5, [r4, #0]
 8008cc8:	6961      	ldr	r1, [r4, #20]
 8008cca:	1d18      	adds	r0, r3, #4
 8008ccc:	6030      	str	r0, [r6, #0]
 8008cce:	062e      	lsls	r6, r5, #24
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	d501      	bpl.n	8008cd8 <_printf_i+0x1c0>
 8008cd4:	6019      	str	r1, [r3, #0]
 8008cd6:	e002      	b.n	8008cde <_printf_i+0x1c6>
 8008cd8:	0668      	lsls	r0, r5, #25
 8008cda:	d5fb      	bpl.n	8008cd4 <_printf_i+0x1bc>
 8008cdc:	8019      	strh	r1, [r3, #0]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	4616      	mov	r6, r2
 8008ce4:	e7bc      	b.n	8008c60 <_printf_i+0x148>
 8008ce6:	6833      	ldr	r3, [r6, #0]
 8008ce8:	1d1a      	adds	r2, r3, #4
 8008cea:	6032      	str	r2, [r6, #0]
 8008cec:	681e      	ldr	r6, [r3, #0]
 8008cee:	6862      	ldr	r2, [r4, #4]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7f7 fa94 	bl	8000220 <memchr>
 8008cf8:	b108      	cbz	r0, 8008cfe <_printf_i+0x1e6>
 8008cfa:	1b80      	subs	r0, r0, r6
 8008cfc:	6060      	str	r0, [r4, #4]
 8008cfe:	6863      	ldr	r3, [r4, #4]
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	2300      	movs	r3, #0
 8008d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d08:	e7aa      	b.n	8008c60 <_printf_i+0x148>
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	4649      	mov	r1, r9
 8008d10:	4640      	mov	r0, r8
 8008d12:	47d0      	blx	sl
 8008d14:	3001      	adds	r0, #1
 8008d16:	d0ad      	beq.n	8008c74 <_printf_i+0x15c>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	079b      	lsls	r3, r3, #30
 8008d1c:	d413      	bmi.n	8008d46 <_printf_i+0x22e>
 8008d1e:	68e0      	ldr	r0, [r4, #12]
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	4298      	cmp	r0, r3
 8008d24:	bfb8      	it	lt
 8008d26:	4618      	movlt	r0, r3
 8008d28:	e7a6      	b.n	8008c78 <_printf_i+0x160>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4649      	mov	r1, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	47d0      	blx	sl
 8008d34:	3001      	adds	r0, #1
 8008d36:	d09d      	beq.n	8008c74 <_printf_i+0x15c>
 8008d38:	3501      	adds	r5, #1
 8008d3a:	68e3      	ldr	r3, [r4, #12]
 8008d3c:	9903      	ldr	r1, [sp, #12]
 8008d3e:	1a5b      	subs	r3, r3, r1
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	dcf2      	bgt.n	8008d2a <_printf_i+0x212>
 8008d44:	e7eb      	b.n	8008d1e <_printf_i+0x206>
 8008d46:	2500      	movs	r5, #0
 8008d48:	f104 0619 	add.w	r6, r4, #25
 8008d4c:	e7f5      	b.n	8008d3a <_printf_i+0x222>
 8008d4e:	bf00      	nop
 8008d50:	0800af2e 	.word	0x0800af2e
 8008d54:	0800af3f 	.word	0x0800af3f

08008d58 <std>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d66:	6083      	str	r3, [r0, #8]
 8008d68:	8181      	strh	r1, [r0, #12]
 8008d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d6c:	81c2      	strh	r2, [r0, #14]
 8008d6e:	6183      	str	r3, [r0, #24]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2208      	movs	r2, #8
 8008d74:	305c      	adds	r0, #92	@ 0x5c
 8008d76:	f000 f906 	bl	8008f86 <memset>
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008db0 <std+0x58>)
 8008d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008db4 <std+0x5c>)
 8008d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d82:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <std+0x60>)
 8008d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d86:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <std+0x64>)
 8008d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc0 <std+0x68>)
 8008d8c:	6224      	str	r4, [r4, #32]
 8008d8e:	429c      	cmp	r4, r3
 8008d90:	d006      	beq.n	8008da0 <std+0x48>
 8008d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d96:	4294      	cmp	r4, r2
 8008d98:	d002      	beq.n	8008da0 <std+0x48>
 8008d9a:	33d0      	adds	r3, #208	@ 0xd0
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	d105      	bne.n	8008dac <std+0x54>
 8008da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da8:	f000 b96a 	b.w	8009080 <__retarget_lock_init_recursive>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	bf00      	nop
 8008db0:	08008f01 	.word	0x08008f01
 8008db4:	08008f23 	.word	0x08008f23
 8008db8:	08008f5b 	.word	0x08008f5b
 8008dbc:	08008f7f 	.word	0x08008f7f
 8008dc0:	20001d40 	.word	0x20001d40

08008dc4 <stdio_exit_handler>:
 8008dc4:	4a02      	ldr	r2, [pc, #8]	@ (8008dd0 <stdio_exit_handler+0xc>)
 8008dc6:	4903      	ldr	r1, [pc, #12]	@ (8008dd4 <stdio_exit_handler+0x10>)
 8008dc8:	4803      	ldr	r0, [pc, #12]	@ (8008dd8 <stdio_exit_handler+0x14>)
 8008dca:	f000 b869 	b.w	8008ea0 <_fwalk_sglue>
 8008dce:	bf00      	nop
 8008dd0:	20000010 	.word	0x20000010
 8008dd4:	0800a9d1 	.word	0x0800a9d1
 8008dd8:	20000020 	.word	0x20000020

08008ddc <cleanup_stdio>:
 8008ddc:	6841      	ldr	r1, [r0, #4]
 8008dde:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <cleanup_stdio+0x34>)
 8008de0:	4299      	cmp	r1, r3
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	d001      	beq.n	8008dec <cleanup_stdio+0x10>
 8008de8:	f001 fdf2 	bl	800a9d0 <_fflush_r>
 8008dec:	68a1      	ldr	r1, [r4, #8]
 8008dee:	4b09      	ldr	r3, [pc, #36]	@ (8008e14 <cleanup_stdio+0x38>)
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d002      	beq.n	8008dfa <cleanup_stdio+0x1e>
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 fdeb 	bl	800a9d0 <_fflush_r>
 8008dfa:	68e1      	ldr	r1, [r4, #12]
 8008dfc:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <cleanup_stdio+0x3c>)
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	d004      	beq.n	8008e0c <cleanup_stdio+0x30>
 8008e02:	4620      	mov	r0, r4
 8008e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e08:	f001 bde2 	b.w	800a9d0 <_fflush_r>
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	20001d40 	.word	0x20001d40
 8008e14:	20001da8 	.word	0x20001da8
 8008e18:	20001e10 	.word	0x20001e10

08008e1c <global_stdio_init.part.0>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <global_stdio_init.part.0+0x30>)
 8008e20:	4c0b      	ldr	r4, [pc, #44]	@ (8008e50 <global_stdio_init.part.0+0x34>)
 8008e22:	4a0c      	ldr	r2, [pc, #48]	@ (8008e54 <global_stdio_init.part.0+0x38>)
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	4620      	mov	r0, r4
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	f7ff ff94 	bl	8008d58 <std>
 8008e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e34:	2201      	movs	r2, #1
 8008e36:	2109      	movs	r1, #9
 8008e38:	f7ff ff8e 	bl	8008d58 <std>
 8008e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e40:	2202      	movs	r2, #2
 8008e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e46:	2112      	movs	r1, #18
 8008e48:	f7ff bf86 	b.w	8008d58 <std>
 8008e4c:	20001e78 	.word	0x20001e78
 8008e50:	20001d40 	.word	0x20001d40
 8008e54:	08008dc5 	.word	0x08008dc5

08008e58 <__sfp_lock_acquire>:
 8008e58:	4801      	ldr	r0, [pc, #4]	@ (8008e60 <__sfp_lock_acquire+0x8>)
 8008e5a:	f000 b912 	b.w	8009082 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20001e81 	.word	0x20001e81

08008e64 <__sfp_lock_release>:
 8008e64:	4801      	ldr	r0, [pc, #4]	@ (8008e6c <__sfp_lock_release+0x8>)
 8008e66:	f000 b90d 	b.w	8009084 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20001e81 	.word	0x20001e81

08008e70 <__sinit>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	4604      	mov	r4, r0
 8008e74:	f7ff fff0 	bl	8008e58 <__sfp_lock_acquire>
 8008e78:	6a23      	ldr	r3, [r4, #32]
 8008e7a:	b11b      	cbz	r3, 8008e84 <__sinit+0x14>
 8008e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e80:	f7ff bff0 	b.w	8008e64 <__sfp_lock_release>
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <__sinit+0x28>)
 8008e86:	6223      	str	r3, [r4, #32]
 8008e88:	4b04      	ldr	r3, [pc, #16]	@ (8008e9c <__sinit+0x2c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f5      	bne.n	8008e7c <__sinit+0xc>
 8008e90:	f7ff ffc4 	bl	8008e1c <global_stdio_init.part.0>
 8008e94:	e7f2      	b.n	8008e7c <__sinit+0xc>
 8008e96:	bf00      	nop
 8008e98:	08008ddd 	.word	0x08008ddd
 8008e9c:	20001e78 	.word	0x20001e78

08008ea0 <_fwalk_sglue>:
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	4688      	mov	r8, r1
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	2600      	movs	r6, #0
 8008eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8008eb4:	d505      	bpl.n	8008ec2 <_fwalk_sglue+0x22>
 8008eb6:	6824      	ldr	r4, [r4, #0]
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d1f7      	bne.n	8008eac <_fwalk_sglue+0xc>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d907      	bls.n	8008ed8 <_fwalk_sglue+0x38>
 8008ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	d003      	beq.n	8008ed8 <_fwalk_sglue+0x38>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	47c0      	blx	r8
 8008ed6:	4306      	orrs	r6, r0
 8008ed8:	3568      	adds	r5, #104	@ 0x68
 8008eda:	e7e9      	b.n	8008eb0 <_fwalk_sglue+0x10>

08008edc <iprintf>:
 8008edc:	b40f      	push	{r0, r1, r2, r3}
 8008ede:	b507      	push	{r0, r1, r2, lr}
 8008ee0:	4906      	ldr	r1, [pc, #24]	@ (8008efc <iprintf+0x20>)
 8008ee2:	ab04      	add	r3, sp, #16
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	6881      	ldr	r1, [r0, #8]
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	f001 fbd3 	bl	800a698 <_vfiprintf_r>
 8008ef2:	b003      	add	sp, #12
 8008ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef8:	b004      	add	sp, #16
 8008efa:	4770      	bx	lr
 8008efc:	2000001c 	.word	0x2000001c

08008f00 <__sread>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	460c      	mov	r4, r1
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	f000 f86c 	bl	8008fe4 <_read_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	bfab      	itete	ge
 8008f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f12:	89a3      	ldrhlt	r3, [r4, #12]
 8008f14:	181b      	addge	r3, r3, r0
 8008f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f1a:	bfac      	ite	ge
 8008f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f1e:	81a3      	strhlt	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__swrite>:
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	461f      	mov	r7, r3
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	05db      	lsls	r3, r3, #23
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4616      	mov	r6, r2
 8008f32:	d505      	bpl.n	8008f40 <__swrite+0x1e>
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2302      	movs	r3, #2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f000 f840 	bl	8008fc0 <_lseek_r>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	463b      	mov	r3, r7
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f56:	f000 b857 	b.w	8009008 <_write_r>

08008f5a <__sseek>:
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 f82d 	bl	8008fc0 <_lseek_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	bf15      	itete	ne
 8008f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f76:	81a3      	strheq	r3, [r4, #12]
 8008f78:	bf18      	it	ne
 8008f7a:	81a3      	strhne	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__sclose>:
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 b80d 	b.w	8008fa0 <_close_r>

08008f86 <memset>:
 8008f86:	4402      	add	r2, r0
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d100      	bne.n	8008f90 <memset+0xa>
 8008f8e:	4770      	bx	lr
 8008f90:	f803 1b01 	strb.w	r1, [r3], #1
 8008f94:	e7f9      	b.n	8008f8a <memset+0x4>
	...

08008f98 <_localeconv_r>:
 8008f98:	4800      	ldr	r0, [pc, #0]	@ (8008f9c <_localeconv_r+0x4>)
 8008f9a:	4770      	bx	lr
 8008f9c:	2000015c 	.word	0x2000015c

08008fa0 <_close_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d06      	ldr	r5, [pc, #24]	@ (8008fbc <_close_r+0x1c>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7f8 ff46 	bl	8001e3c <_close>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_close_r+0x1a>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_close_r+0x1a>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20001e7c 	.word	0x20001e7c

08008fc0 <_lseek_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	@ (8008fe0 <_lseek_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f8 ff5b 	bl	8001e8a <_lseek>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_lseek_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_lseek_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20001e7c 	.word	0x20001e7c

08008fe4 <_read_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	@ (8009004 <_read_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f8 fee9 	bl	8001dca <_read>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_read_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_read_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20001e7c 	.word	0x20001e7c

08009008 <_write_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_write_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7f8 fef4 	bl	8001e04 <_write>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_write_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_write_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20001e7c 	.word	0x20001e7c

0800902c <__errno>:
 800902c:	4b01      	ldr	r3, [pc, #4]	@ (8009034 <__errno+0x8>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000001c 	.word	0x2000001c

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4d0d      	ldr	r5, [pc, #52]	@ (8009070 <__libc_init_array+0x38>)
 800903c:	4c0d      	ldr	r4, [pc, #52]	@ (8009074 <__libc_init_array+0x3c>)
 800903e:	1b64      	subs	r4, r4, r5
 8009040:	10a4      	asrs	r4, r4, #2
 8009042:	2600      	movs	r6, #0
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	4d0b      	ldr	r5, [pc, #44]	@ (8009078 <__libc_init_array+0x40>)
 800904a:	4c0c      	ldr	r4, [pc, #48]	@ (800907c <__libc_init_array+0x44>)
 800904c:	f001 fec0 	bl	800add0 <_init>
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	2600      	movs	r6, #0
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	0800b298 	.word	0x0800b298
 8009074:	0800b298 	.word	0x0800b298
 8009078:	0800b298 	.word	0x0800b298
 800907c:	0800b29c 	.word	0x0800b29c

08009080 <__retarget_lock_init_recursive>:
 8009080:	4770      	bx	lr

08009082 <__retarget_lock_acquire_recursive>:
 8009082:	4770      	bx	lr

08009084 <__retarget_lock_release_recursive>:
 8009084:	4770      	bx	lr

08009086 <memcpy>:
 8009086:	440a      	add	r2, r1
 8009088:	4291      	cmp	r1, r2
 800908a:	f100 33ff 	add.w	r3, r0, #4294967295
 800908e:	d100      	bne.n	8009092 <memcpy+0xc>
 8009090:	4770      	bx	lr
 8009092:	b510      	push	{r4, lr}
 8009094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909c:	4291      	cmp	r1, r2
 800909e:	d1f9      	bne.n	8009094 <memcpy+0xe>
 80090a0:	bd10      	pop	{r4, pc}

080090a2 <quorem>:
 80090a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a6:	6903      	ldr	r3, [r0, #16]
 80090a8:	690c      	ldr	r4, [r1, #16]
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	4607      	mov	r7, r0
 80090ae:	db7e      	blt.n	80091ae <quorem+0x10c>
 80090b0:	3c01      	subs	r4, #1
 80090b2:	f101 0814 	add.w	r8, r1, #20
 80090b6:	00a3      	lsls	r3, r4, #2
 80090b8:	f100 0514 	add.w	r5, r0, #20
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090cc:	3301      	adds	r3, #1
 80090ce:	429a      	cmp	r2, r3
 80090d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80090d8:	d32e      	bcc.n	8009138 <quorem+0x96>
 80090da:	f04f 0a00 	mov.w	sl, #0
 80090de:	46c4      	mov	ip, r8
 80090e0:	46ae      	mov	lr, r5
 80090e2:	46d3      	mov	fp, sl
 80090e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090e8:	b298      	uxth	r0, r3
 80090ea:	fb06 a000 	mla	r0, r6, r0, sl
 80090ee:	0c02      	lsrs	r2, r0, #16
 80090f0:	0c1b      	lsrs	r3, r3, #16
 80090f2:	fb06 2303 	mla	r3, r6, r3, r2
 80090f6:	f8de 2000 	ldr.w	r2, [lr]
 80090fa:	b280      	uxth	r0, r0
 80090fc:	b292      	uxth	r2, r2
 80090fe:	1a12      	subs	r2, r2, r0
 8009100:	445a      	add	r2, fp
 8009102:	f8de 0000 	ldr.w	r0, [lr]
 8009106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800910a:	b29b      	uxth	r3, r3
 800910c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009110:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009114:	b292      	uxth	r2, r2
 8009116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800911a:	45e1      	cmp	r9, ip
 800911c:	f84e 2b04 	str.w	r2, [lr], #4
 8009120:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009124:	d2de      	bcs.n	80090e4 <quorem+0x42>
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	58eb      	ldr	r3, [r5, r3]
 800912a:	b92b      	cbnz	r3, 8009138 <quorem+0x96>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	3b04      	subs	r3, #4
 8009130:	429d      	cmp	r5, r3
 8009132:	461a      	mov	r2, r3
 8009134:	d32f      	bcc.n	8009196 <quorem+0xf4>
 8009136:	613c      	str	r4, [r7, #16]
 8009138:	4638      	mov	r0, r7
 800913a:	f001 f97b 	bl	800a434 <__mcmp>
 800913e:	2800      	cmp	r0, #0
 8009140:	db25      	blt.n	800918e <quorem+0xec>
 8009142:	4629      	mov	r1, r5
 8009144:	2000      	movs	r0, #0
 8009146:	f858 2b04 	ldr.w	r2, [r8], #4
 800914a:	f8d1 c000 	ldr.w	ip, [r1]
 800914e:	fa1f fe82 	uxth.w	lr, r2
 8009152:	fa1f f38c 	uxth.w	r3, ip
 8009156:	eba3 030e 	sub.w	r3, r3, lr
 800915a:	4403      	add	r3, r0
 800915c:	0c12      	lsrs	r2, r2, #16
 800915e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009162:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009166:	b29b      	uxth	r3, r3
 8009168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800916c:	45c1      	cmp	r9, r8
 800916e:	f841 3b04 	str.w	r3, [r1], #4
 8009172:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009176:	d2e6      	bcs.n	8009146 <quorem+0xa4>
 8009178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800917c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009180:	b922      	cbnz	r2, 800918c <quorem+0xea>
 8009182:	3b04      	subs	r3, #4
 8009184:	429d      	cmp	r5, r3
 8009186:	461a      	mov	r2, r3
 8009188:	d30b      	bcc.n	80091a2 <quorem+0x100>
 800918a:	613c      	str	r4, [r7, #16]
 800918c:	3601      	adds	r6, #1
 800918e:	4630      	mov	r0, r6
 8009190:	b003      	add	sp, #12
 8009192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	3b04      	subs	r3, #4
 800919a:	2a00      	cmp	r2, #0
 800919c:	d1cb      	bne.n	8009136 <quorem+0x94>
 800919e:	3c01      	subs	r4, #1
 80091a0:	e7c6      	b.n	8009130 <quorem+0x8e>
 80091a2:	6812      	ldr	r2, [r2, #0]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	d1ef      	bne.n	800918a <quorem+0xe8>
 80091aa:	3c01      	subs	r4, #1
 80091ac:	e7ea      	b.n	8009184 <quorem+0xe2>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e7ee      	b.n	8009190 <quorem+0xee>
 80091b2:	0000      	movs	r0, r0
 80091b4:	0000      	movs	r0, r0
	...

080091b8 <_dtoa_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	69c7      	ldr	r7, [r0, #28]
 80091be:	b099      	sub	sp, #100	@ 0x64
 80091c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091c4:	ec55 4b10 	vmov	r4, r5, d0
 80091c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80091ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80091cc:	4683      	mov	fp, r0
 80091ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80091d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091d2:	b97f      	cbnz	r7, 80091f4 <_dtoa_r+0x3c>
 80091d4:	2010      	movs	r0, #16
 80091d6:	f000 fdfd 	bl	8009dd4 <malloc>
 80091da:	4602      	mov	r2, r0
 80091dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80091e0:	b920      	cbnz	r0, 80091ec <_dtoa_r+0x34>
 80091e2:	4ba7      	ldr	r3, [pc, #668]	@ (8009480 <_dtoa_r+0x2c8>)
 80091e4:	21ef      	movs	r1, #239	@ 0xef
 80091e6:	48a7      	ldr	r0, [pc, #668]	@ (8009484 <_dtoa_r+0x2cc>)
 80091e8:	f001 fcbe 	bl	800ab68 <__assert_func>
 80091ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091f0:	6007      	str	r7, [r0, #0]
 80091f2:	60c7      	str	r7, [r0, #12]
 80091f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	b159      	cbz	r1, 8009214 <_dtoa_r+0x5c>
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	604a      	str	r2, [r1, #4]
 8009200:	2301      	movs	r3, #1
 8009202:	4093      	lsls	r3, r2
 8009204:	608b      	str	r3, [r1, #8]
 8009206:	4658      	mov	r0, fp
 8009208:	f000 feda 	bl	8009fc0 <_Bfree>
 800920c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	1e2b      	subs	r3, r5, #0
 8009216:	bfb9      	ittee	lt
 8009218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800921c:	9303      	strlt	r3, [sp, #12]
 800921e:	2300      	movge	r3, #0
 8009220:	6033      	strge	r3, [r6, #0]
 8009222:	9f03      	ldr	r7, [sp, #12]
 8009224:	4b98      	ldr	r3, [pc, #608]	@ (8009488 <_dtoa_r+0x2d0>)
 8009226:	bfbc      	itt	lt
 8009228:	2201      	movlt	r2, #1
 800922a:	6032      	strlt	r2, [r6, #0]
 800922c:	43bb      	bics	r3, r7
 800922e:	d112      	bne.n	8009256 <_dtoa_r+0x9e>
 8009230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009232:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800923c:	4323      	orrs	r3, r4
 800923e:	f000 854d 	beq.w	8009cdc <_dtoa_r+0xb24>
 8009242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800949c <_dtoa_r+0x2e4>
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 854f 	beq.w	8009cec <_dtoa_r+0xb34>
 800924e:	f10a 0303 	add.w	r3, sl, #3
 8009252:	f000 bd49 	b.w	8009ce8 <_dtoa_r+0xb30>
 8009256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	ec51 0b17 	vmov	r0, r1, d7
 8009260:	2300      	movs	r3, #0
 8009262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009266:	f7f7 fc57 	bl	8000b18 <__aeabi_dcmpeq>
 800926a:	4680      	mov	r8, r0
 800926c:	b158      	cbz	r0, 8009286 <_dtoa_r+0xce>
 800926e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009270:	2301      	movs	r3, #1
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009276:	b113      	cbz	r3, 800927e <_dtoa_r+0xc6>
 8009278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800927a:	4b84      	ldr	r3, [pc, #528]	@ (800948c <_dtoa_r+0x2d4>)
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80094a0 <_dtoa_r+0x2e8>
 8009282:	f000 bd33 	b.w	8009cec <_dtoa_r+0xb34>
 8009286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800928a:	aa16      	add	r2, sp, #88	@ 0x58
 800928c:	a917      	add	r1, sp, #92	@ 0x5c
 800928e:	4658      	mov	r0, fp
 8009290:	f001 f980 	bl	800a594 <__d2b>
 8009294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009298:	4681      	mov	r9, r0
 800929a:	2e00      	cmp	r6, #0
 800929c:	d077      	beq.n	800938e <_dtoa_r+0x1d6>
 800929e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80092a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80092b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80092b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80092b8:	4619      	mov	r1, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b74      	ldr	r3, [pc, #464]	@ (8009490 <_dtoa_r+0x2d8>)
 80092be:	f7f7 f80b 	bl	80002d8 <__aeabi_dsub>
 80092c2:	a369      	add	r3, pc, #420	@ (adr r3, 8009468 <_dtoa_r+0x2b0>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f7 f9be 	bl	8000648 <__aeabi_dmul>
 80092cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009470 <_dtoa_r+0x2b8>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f7 f803 	bl	80002dc <__adddf3>
 80092d6:	4604      	mov	r4, r0
 80092d8:	4630      	mov	r0, r6
 80092da:	460d      	mov	r5, r1
 80092dc:	f7f7 f94a 	bl	8000574 <__aeabi_i2d>
 80092e0:	a365      	add	r3, pc, #404	@ (adr r3, 8009478 <_dtoa_r+0x2c0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f7 f9af 	bl	8000648 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f6 fff3 	bl	80002dc <__adddf3>
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	f7f7 fc55 	bl	8000ba8 <__aeabi_d2iz>
 80092fe:	2200      	movs	r2, #0
 8009300:	4607      	mov	r7, r0
 8009302:	2300      	movs	r3, #0
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f7 fc10 	bl	8000b2c <__aeabi_dcmplt>
 800930c:	b140      	cbz	r0, 8009320 <_dtoa_r+0x168>
 800930e:	4638      	mov	r0, r7
 8009310:	f7f7 f930 	bl	8000574 <__aeabi_i2d>
 8009314:	4622      	mov	r2, r4
 8009316:	462b      	mov	r3, r5
 8009318:	f7f7 fbfe 	bl	8000b18 <__aeabi_dcmpeq>
 800931c:	b900      	cbnz	r0, 8009320 <_dtoa_r+0x168>
 800931e:	3f01      	subs	r7, #1
 8009320:	2f16      	cmp	r7, #22
 8009322:	d851      	bhi.n	80093c8 <_dtoa_r+0x210>
 8009324:	4b5b      	ldr	r3, [pc, #364]	@ (8009494 <_dtoa_r+0x2dc>)
 8009326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009332:	f7f7 fbfb 	bl	8000b2c <__aeabi_dcmplt>
 8009336:	2800      	cmp	r0, #0
 8009338:	d048      	beq.n	80093cc <_dtoa_r+0x214>
 800933a:	3f01      	subs	r7, #1
 800933c:	2300      	movs	r3, #0
 800933e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009342:	1b9b      	subs	r3, r3, r6
 8009344:	1e5a      	subs	r2, r3, #1
 8009346:	bf44      	itt	mi
 8009348:	f1c3 0801 	rsbmi	r8, r3, #1
 800934c:	2300      	movmi	r3, #0
 800934e:	9208      	str	r2, [sp, #32]
 8009350:	bf54      	ite	pl
 8009352:	f04f 0800 	movpl.w	r8, #0
 8009356:	9308      	strmi	r3, [sp, #32]
 8009358:	2f00      	cmp	r7, #0
 800935a:	db39      	blt.n	80093d0 <_dtoa_r+0x218>
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009360:	443b      	add	r3, r7
 8009362:	9308      	str	r3, [sp, #32]
 8009364:	2300      	movs	r3, #0
 8009366:	930a      	str	r3, [sp, #40]	@ 0x28
 8009368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936a:	2b09      	cmp	r3, #9
 800936c:	d864      	bhi.n	8009438 <_dtoa_r+0x280>
 800936e:	2b05      	cmp	r3, #5
 8009370:	bfc4      	itt	gt
 8009372:	3b04      	subgt	r3, #4
 8009374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009378:	f1a3 0302 	sub.w	r3, r3, #2
 800937c:	bfcc      	ite	gt
 800937e:	2400      	movgt	r4, #0
 8009380:	2401      	movle	r4, #1
 8009382:	2b03      	cmp	r3, #3
 8009384:	d863      	bhi.n	800944e <_dtoa_r+0x296>
 8009386:	e8df f003 	tbb	[pc, r3]
 800938a:	372a      	.short	0x372a
 800938c:	5535      	.short	0x5535
 800938e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009392:	441e      	add	r6, r3
 8009394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009398:	2b20      	cmp	r3, #32
 800939a:	bfc1      	itttt	gt
 800939c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80093a0:	409f      	lslgt	r7, r3
 80093a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80093a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80093aa:	bfd6      	itet	le
 80093ac:	f1c3 0320 	rsble	r3, r3, #32
 80093b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80093b4:	fa04 f003 	lslle.w	r0, r4, r3
 80093b8:	f7f7 f8cc 	bl	8000554 <__aeabi_ui2d>
 80093bc:	2201      	movs	r2, #1
 80093be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80093c2:	3e01      	subs	r6, #1
 80093c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80093c6:	e777      	b.n	80092b8 <_dtoa_r+0x100>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e7b8      	b.n	800933e <_dtoa_r+0x186>
 80093cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80093ce:	e7b7      	b.n	8009340 <_dtoa_r+0x188>
 80093d0:	427b      	negs	r3, r7
 80093d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d4:	2300      	movs	r3, #0
 80093d6:	eba8 0807 	sub.w	r8, r8, r7
 80093da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093dc:	e7c4      	b.n	8009368 <_dtoa_r+0x1b0>
 80093de:	2300      	movs	r3, #0
 80093e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc35      	bgt.n	8009454 <_dtoa_r+0x29c>
 80093e8:	2301      	movs	r3, #1
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	9307      	str	r3, [sp, #28]
 80093ee:	461a      	mov	r2, r3
 80093f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093f2:	e00b      	b.n	800940c <_dtoa_r+0x254>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e7f3      	b.n	80093e0 <_dtoa_r+0x228>
 80093f8:	2300      	movs	r3, #0
 80093fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	2b01      	cmp	r3, #1
 8009406:	9307      	str	r3, [sp, #28]
 8009408:	bfb8      	it	lt
 800940a:	2301      	movlt	r3, #1
 800940c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009410:	2100      	movs	r1, #0
 8009412:	2204      	movs	r2, #4
 8009414:	f102 0514 	add.w	r5, r2, #20
 8009418:	429d      	cmp	r5, r3
 800941a:	d91f      	bls.n	800945c <_dtoa_r+0x2a4>
 800941c:	6041      	str	r1, [r0, #4]
 800941e:	4658      	mov	r0, fp
 8009420:	f000 fd8e 	bl	8009f40 <_Balloc>
 8009424:	4682      	mov	sl, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	d13c      	bne.n	80094a4 <_dtoa_r+0x2ec>
 800942a:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <_dtoa_r+0x2e0>)
 800942c:	4602      	mov	r2, r0
 800942e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009432:	e6d8      	b.n	80091e6 <_dtoa_r+0x2e>
 8009434:	2301      	movs	r3, #1
 8009436:	e7e0      	b.n	80093fa <_dtoa_r+0x242>
 8009438:	2401      	movs	r4, #1
 800943a:	2300      	movs	r3, #0
 800943c:	9309      	str	r3, [sp, #36]	@ 0x24
 800943e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	9307      	str	r3, [sp, #28]
 8009448:	2200      	movs	r2, #0
 800944a:	2312      	movs	r3, #18
 800944c:	e7d0      	b.n	80093f0 <_dtoa_r+0x238>
 800944e:	2301      	movs	r3, #1
 8009450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009452:	e7f5      	b.n	8009440 <_dtoa_r+0x288>
 8009454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	9307      	str	r3, [sp, #28]
 800945a:	e7d7      	b.n	800940c <_dtoa_r+0x254>
 800945c:	3101      	adds	r1, #1
 800945e:	0052      	lsls	r2, r2, #1
 8009460:	e7d8      	b.n	8009414 <_dtoa_r+0x25c>
 8009462:	bf00      	nop
 8009464:	f3af 8000 	nop.w
 8009468:	636f4361 	.word	0x636f4361
 800946c:	3fd287a7 	.word	0x3fd287a7
 8009470:	8b60c8b3 	.word	0x8b60c8b3
 8009474:	3fc68a28 	.word	0x3fc68a28
 8009478:	509f79fb 	.word	0x509f79fb
 800947c:	3fd34413 	.word	0x3fd34413
 8009480:	0800af5d 	.word	0x0800af5d
 8009484:	0800af74 	.word	0x0800af74
 8009488:	7ff00000 	.word	0x7ff00000
 800948c:	0800af2d 	.word	0x0800af2d
 8009490:	3ff80000 	.word	0x3ff80000
 8009494:	0800b070 	.word	0x0800b070
 8009498:	0800afcc 	.word	0x0800afcc
 800949c:	0800af59 	.word	0x0800af59
 80094a0:	0800af2c 	.word	0x0800af2c
 80094a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	9b07      	ldr	r3, [sp, #28]
 80094ac:	2b0e      	cmp	r3, #14
 80094ae:	f200 80a4 	bhi.w	80095fa <_dtoa_r+0x442>
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	f000 80a1 	beq.w	80095fa <_dtoa_r+0x442>
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	dd33      	ble.n	8009524 <_dtoa_r+0x36c>
 80094bc:	4bad      	ldr	r3, [pc, #692]	@ (8009774 <_dtoa_r+0x5bc>)
 80094be:	f007 020f 	and.w	r2, r7, #15
 80094c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c6:	ed93 7b00 	vldr	d7, [r3]
 80094ca:	05f8      	lsls	r0, r7, #23
 80094cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80094d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80094d4:	d516      	bpl.n	8009504 <_dtoa_r+0x34c>
 80094d6:	4ba8      	ldr	r3, [pc, #672]	@ (8009778 <_dtoa_r+0x5c0>)
 80094d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094e0:	f7f7 f9dc 	bl	800089c <__aeabi_ddiv>
 80094e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e8:	f004 040f 	and.w	r4, r4, #15
 80094ec:	2603      	movs	r6, #3
 80094ee:	4da2      	ldr	r5, [pc, #648]	@ (8009778 <_dtoa_r+0x5c0>)
 80094f0:	b954      	cbnz	r4, 8009508 <_dtoa_r+0x350>
 80094f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fa:	f7f7 f9cf 	bl	800089c <__aeabi_ddiv>
 80094fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009502:	e028      	b.n	8009556 <_dtoa_r+0x39e>
 8009504:	2602      	movs	r6, #2
 8009506:	e7f2      	b.n	80094ee <_dtoa_r+0x336>
 8009508:	07e1      	lsls	r1, r4, #31
 800950a:	d508      	bpl.n	800951e <_dtoa_r+0x366>
 800950c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009514:	f7f7 f898 	bl	8000648 <__aeabi_dmul>
 8009518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800951c:	3601      	adds	r6, #1
 800951e:	1064      	asrs	r4, r4, #1
 8009520:	3508      	adds	r5, #8
 8009522:	e7e5      	b.n	80094f0 <_dtoa_r+0x338>
 8009524:	f000 80d2 	beq.w	80096cc <_dtoa_r+0x514>
 8009528:	427c      	negs	r4, r7
 800952a:	4b92      	ldr	r3, [pc, #584]	@ (8009774 <_dtoa_r+0x5bc>)
 800952c:	4d92      	ldr	r5, [pc, #584]	@ (8009778 <_dtoa_r+0x5c0>)
 800952e:	f004 020f 	and.w	r2, r4, #15
 8009532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800953e:	f7f7 f883 	bl	8000648 <__aeabi_dmul>
 8009542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009546:	1124      	asrs	r4, r4, #4
 8009548:	2300      	movs	r3, #0
 800954a:	2602      	movs	r6, #2
 800954c:	2c00      	cmp	r4, #0
 800954e:	f040 80b2 	bne.w	80096b6 <_dtoa_r+0x4fe>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1d3      	bne.n	80094fe <_dtoa_r+0x346>
 8009556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 80b7 	beq.w	80096d0 <_dtoa_r+0x518>
 8009562:	4b86      	ldr	r3, [pc, #536]	@ (800977c <_dtoa_r+0x5c4>)
 8009564:	2200      	movs	r2, #0
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	f000 80ae 	beq.w	80096d0 <_dtoa_r+0x518>
 8009574:	9b07      	ldr	r3, [sp, #28]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 80aa 	beq.w	80096d0 <_dtoa_r+0x518>
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd37      	ble.n	80095f2 <_dtoa_r+0x43a>
 8009582:	1e7b      	subs	r3, r7, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	4620      	mov	r0, r4
 8009588:	4b7d      	ldr	r3, [pc, #500]	@ (8009780 <_dtoa_r+0x5c8>)
 800958a:	2200      	movs	r2, #0
 800958c:	4629      	mov	r1, r5
 800958e:	f7f7 f85b 	bl	8000648 <__aeabi_dmul>
 8009592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009596:	9c00      	ldr	r4, [sp, #0]
 8009598:	3601      	adds	r6, #1
 800959a:	4630      	mov	r0, r6
 800959c:	f7f6 ffea 	bl	8000574 <__aeabi_i2d>
 80095a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a4:	f7f7 f850 	bl	8000648 <__aeabi_dmul>
 80095a8:	4b76      	ldr	r3, [pc, #472]	@ (8009784 <_dtoa_r+0x5cc>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7f6 fe96 	bl	80002dc <__adddf3>
 80095b0:	4605      	mov	r5, r0
 80095b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	f040 808d 	bne.w	80096d6 <_dtoa_r+0x51e>
 80095bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c0:	4b71      	ldr	r3, [pc, #452]	@ (8009788 <_dtoa_r+0x5d0>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	f7f6 fe88 	bl	80002d8 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095d0:	462a      	mov	r2, r5
 80095d2:	4633      	mov	r3, r6
 80095d4:	f7f7 fac8 	bl	8000b68 <__aeabi_dcmpgt>
 80095d8:	2800      	cmp	r0, #0
 80095da:	f040 828b 	bne.w	8009af4 <_dtoa_r+0x93c>
 80095de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e2:	462a      	mov	r2, r5
 80095e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095e8:	f7f7 faa0 	bl	8000b2c <__aeabi_dcmplt>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f040 8128 	bne.w	8009842 <_dtoa_r+0x68a>
 80095f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80095f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80095fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f2c0 815a 	blt.w	80098b6 <_dtoa_r+0x6fe>
 8009602:	2f0e      	cmp	r7, #14
 8009604:	f300 8157 	bgt.w	80098b6 <_dtoa_r+0x6fe>
 8009608:	4b5a      	ldr	r3, [pc, #360]	@ (8009774 <_dtoa_r+0x5bc>)
 800960a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800960e:	ed93 7b00 	vldr	d7, [r3]
 8009612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009614:	2b00      	cmp	r3, #0
 8009616:	ed8d 7b00 	vstr	d7, [sp]
 800961a:	da03      	bge.n	8009624 <_dtoa_r+0x46c>
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f340 8101 	ble.w	8009826 <_dtoa_r+0x66e>
 8009624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009628:	4656      	mov	r6, sl
 800962a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 f933 	bl	800089c <__aeabi_ddiv>
 8009636:	f7f7 fab7 	bl	8000ba8 <__aeabi_d2iz>
 800963a:	4680      	mov	r8, r0
 800963c:	f7f6 ff9a 	bl	8000574 <__aeabi_i2d>
 8009640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009644:	f7f7 f800 	bl	8000648 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009654:	f7f6 fe40 	bl	80002d8 <__aeabi_dsub>
 8009658:	f806 4b01 	strb.w	r4, [r6], #1
 800965c:	9d07      	ldr	r5, [sp, #28]
 800965e:	eba6 040a 	sub.w	r4, r6, sl
 8009662:	42a5      	cmp	r5, r4
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	f040 8117 	bne.w	800989a <_dtoa_r+0x6e2>
 800966c:	f7f6 fe36 	bl	80002dc <__adddf3>
 8009670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	f7f7 fa76 	bl	8000b68 <__aeabi_dcmpgt>
 800967c:	2800      	cmp	r0, #0
 800967e:	f040 80f9 	bne.w	8009874 <_dtoa_r+0x6bc>
 8009682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f7 fa45 	bl	8000b18 <__aeabi_dcmpeq>
 800968e:	b118      	cbz	r0, 8009698 <_dtoa_r+0x4e0>
 8009690:	f018 0f01 	tst.w	r8, #1
 8009694:	f040 80ee 	bne.w	8009874 <_dtoa_r+0x6bc>
 8009698:	4649      	mov	r1, r9
 800969a:	4658      	mov	r0, fp
 800969c:	f000 fc90 	bl	8009fc0 <_Bfree>
 80096a0:	2300      	movs	r3, #0
 80096a2:	7033      	strb	r3, [r6, #0]
 80096a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096a6:	3701      	adds	r7, #1
 80096a8:	601f      	str	r7, [r3, #0]
 80096aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 831d 	beq.w	8009cec <_dtoa_r+0xb34>
 80096b2:	601e      	str	r6, [r3, #0]
 80096b4:	e31a      	b.n	8009cec <_dtoa_r+0xb34>
 80096b6:	07e2      	lsls	r2, r4, #31
 80096b8:	d505      	bpl.n	80096c6 <_dtoa_r+0x50e>
 80096ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096be:	f7f6 ffc3 	bl	8000648 <__aeabi_dmul>
 80096c2:	3601      	adds	r6, #1
 80096c4:	2301      	movs	r3, #1
 80096c6:	1064      	asrs	r4, r4, #1
 80096c8:	3508      	adds	r5, #8
 80096ca:	e73f      	b.n	800954c <_dtoa_r+0x394>
 80096cc:	2602      	movs	r6, #2
 80096ce:	e742      	b.n	8009556 <_dtoa_r+0x39e>
 80096d0:	9c07      	ldr	r4, [sp, #28]
 80096d2:	9704      	str	r7, [sp, #16]
 80096d4:	e761      	b.n	800959a <_dtoa_r+0x3e2>
 80096d6:	4b27      	ldr	r3, [pc, #156]	@ (8009774 <_dtoa_r+0x5bc>)
 80096d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096e2:	4454      	add	r4, sl
 80096e4:	2900      	cmp	r1, #0
 80096e6:	d053      	beq.n	8009790 <_dtoa_r+0x5d8>
 80096e8:	4928      	ldr	r1, [pc, #160]	@ (800978c <_dtoa_r+0x5d4>)
 80096ea:	2000      	movs	r0, #0
 80096ec:	f7f7 f8d6 	bl	800089c <__aeabi_ddiv>
 80096f0:	4633      	mov	r3, r6
 80096f2:	462a      	mov	r2, r5
 80096f4:	f7f6 fdf0 	bl	80002d8 <__aeabi_dsub>
 80096f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096fc:	4656      	mov	r6, sl
 80096fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009702:	f7f7 fa51 	bl	8000ba8 <__aeabi_d2iz>
 8009706:	4605      	mov	r5, r0
 8009708:	f7f6 ff34 	bl	8000574 <__aeabi_i2d>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009714:	f7f6 fde0 	bl	80002d8 <__aeabi_dsub>
 8009718:	3530      	adds	r5, #48	@ 0x30
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009722:	f806 5b01 	strb.w	r5, [r6], #1
 8009726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800972a:	f7f7 f9ff 	bl	8000b2c <__aeabi_dcmplt>
 800972e:	2800      	cmp	r0, #0
 8009730:	d171      	bne.n	8009816 <_dtoa_r+0x65e>
 8009732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009736:	4911      	ldr	r1, [pc, #68]	@ (800977c <_dtoa_r+0x5c4>)
 8009738:	2000      	movs	r0, #0
 800973a:	f7f6 fdcd 	bl	80002d8 <__aeabi_dsub>
 800973e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009742:	f7f7 f9f3 	bl	8000b2c <__aeabi_dcmplt>
 8009746:	2800      	cmp	r0, #0
 8009748:	f040 8095 	bne.w	8009876 <_dtoa_r+0x6be>
 800974c:	42a6      	cmp	r6, r4
 800974e:	f43f af50 	beq.w	80095f2 <_dtoa_r+0x43a>
 8009752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009756:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <_dtoa_r+0x5c8>)
 8009758:	2200      	movs	r2, #0
 800975a:	f7f6 ff75 	bl	8000648 <__aeabi_dmul>
 800975e:	4b08      	ldr	r3, [pc, #32]	@ (8009780 <_dtoa_r+0x5c8>)
 8009760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009764:	2200      	movs	r2, #0
 8009766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976a:	f7f6 ff6d 	bl	8000648 <__aeabi_dmul>
 800976e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009772:	e7c4      	b.n	80096fe <_dtoa_r+0x546>
 8009774:	0800b070 	.word	0x0800b070
 8009778:	0800b048 	.word	0x0800b048
 800977c:	3ff00000 	.word	0x3ff00000
 8009780:	40240000 	.word	0x40240000
 8009784:	401c0000 	.word	0x401c0000
 8009788:	40140000 	.word	0x40140000
 800978c:	3fe00000 	.word	0x3fe00000
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	f7f6 ff58 	bl	8000648 <__aeabi_dmul>
 8009798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800979c:	9415      	str	r4, [sp, #84]	@ 0x54
 800979e:	4656      	mov	r6, sl
 80097a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a4:	f7f7 fa00 	bl	8000ba8 <__aeabi_d2iz>
 80097a8:	4605      	mov	r5, r0
 80097aa:	f7f6 fee3 	bl	8000574 <__aeabi_i2d>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b6:	f7f6 fd8f 	bl	80002d8 <__aeabi_dsub>
 80097ba:	3530      	adds	r5, #48	@ 0x30
 80097bc:	f806 5b01 	strb.w	r5, [r6], #1
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	d124      	bne.n	800981a <_dtoa_r+0x662>
 80097d0:	4bac      	ldr	r3, [pc, #688]	@ (8009a84 <_dtoa_r+0x8cc>)
 80097d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097d6:	f7f6 fd81 	bl	80002dc <__adddf3>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e2:	f7f7 f9c1 	bl	8000b68 <__aeabi_dcmpgt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d145      	bne.n	8009876 <_dtoa_r+0x6be>
 80097ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097ee:	49a5      	ldr	r1, [pc, #660]	@ (8009a84 <_dtoa_r+0x8cc>)
 80097f0:	2000      	movs	r0, #0
 80097f2:	f7f6 fd71 	bl	80002d8 <__aeabi_dsub>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fe:	f7f7 f995 	bl	8000b2c <__aeabi_dcmplt>
 8009802:	2800      	cmp	r0, #0
 8009804:	f43f aef5 	beq.w	80095f2 <_dtoa_r+0x43a>
 8009808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800980a:	1e73      	subs	r3, r6, #1
 800980c:	9315      	str	r3, [sp, #84]	@ 0x54
 800980e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009812:	2b30      	cmp	r3, #48	@ 0x30
 8009814:	d0f8      	beq.n	8009808 <_dtoa_r+0x650>
 8009816:	9f04      	ldr	r7, [sp, #16]
 8009818:	e73e      	b.n	8009698 <_dtoa_r+0x4e0>
 800981a:	4b9b      	ldr	r3, [pc, #620]	@ (8009a88 <_dtoa_r+0x8d0>)
 800981c:	f7f6 ff14 	bl	8000648 <__aeabi_dmul>
 8009820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009824:	e7bc      	b.n	80097a0 <_dtoa_r+0x5e8>
 8009826:	d10c      	bne.n	8009842 <_dtoa_r+0x68a>
 8009828:	4b98      	ldr	r3, [pc, #608]	@ (8009a8c <_dtoa_r+0x8d4>)
 800982a:	2200      	movs	r2, #0
 800982c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009830:	f7f6 ff0a 	bl	8000648 <__aeabi_dmul>
 8009834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009838:	f7f7 f98c 	bl	8000b54 <__aeabi_dcmpge>
 800983c:	2800      	cmp	r0, #0
 800983e:	f000 8157 	beq.w	8009af0 <_dtoa_r+0x938>
 8009842:	2400      	movs	r4, #0
 8009844:	4625      	mov	r5, r4
 8009846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009848:	43db      	mvns	r3, r3
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	4656      	mov	r6, sl
 800984e:	2700      	movs	r7, #0
 8009850:	4621      	mov	r1, r4
 8009852:	4658      	mov	r0, fp
 8009854:	f000 fbb4 	bl	8009fc0 <_Bfree>
 8009858:	2d00      	cmp	r5, #0
 800985a:	d0dc      	beq.n	8009816 <_dtoa_r+0x65e>
 800985c:	b12f      	cbz	r7, 800986a <_dtoa_r+0x6b2>
 800985e:	42af      	cmp	r7, r5
 8009860:	d003      	beq.n	800986a <_dtoa_r+0x6b2>
 8009862:	4639      	mov	r1, r7
 8009864:	4658      	mov	r0, fp
 8009866:	f000 fbab 	bl	8009fc0 <_Bfree>
 800986a:	4629      	mov	r1, r5
 800986c:	4658      	mov	r0, fp
 800986e:	f000 fba7 	bl	8009fc0 <_Bfree>
 8009872:	e7d0      	b.n	8009816 <_dtoa_r+0x65e>
 8009874:	9704      	str	r7, [sp, #16]
 8009876:	4633      	mov	r3, r6
 8009878:	461e      	mov	r6, r3
 800987a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800987e:	2a39      	cmp	r2, #57	@ 0x39
 8009880:	d107      	bne.n	8009892 <_dtoa_r+0x6da>
 8009882:	459a      	cmp	sl, r3
 8009884:	d1f8      	bne.n	8009878 <_dtoa_r+0x6c0>
 8009886:	9a04      	ldr	r2, [sp, #16]
 8009888:	3201      	adds	r2, #1
 800988a:	9204      	str	r2, [sp, #16]
 800988c:	2230      	movs	r2, #48	@ 0x30
 800988e:	f88a 2000 	strb.w	r2, [sl]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	3201      	adds	r2, #1
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	e7bd      	b.n	8009816 <_dtoa_r+0x65e>
 800989a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a88 <_dtoa_r+0x8d0>)
 800989c:	2200      	movs	r2, #0
 800989e:	f7f6 fed3 	bl	8000648 <__aeabi_dmul>
 80098a2:	2200      	movs	r2, #0
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	460d      	mov	r5, r1
 80098aa:	f7f7 f935 	bl	8000b18 <__aeabi_dcmpeq>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f aebb 	beq.w	800962a <_dtoa_r+0x472>
 80098b4:	e6f0      	b.n	8009698 <_dtoa_r+0x4e0>
 80098b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	f000 80db 	beq.w	8009a74 <_dtoa_r+0x8bc>
 80098be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098c0:	2a01      	cmp	r2, #1
 80098c2:	f300 80bf 	bgt.w	8009a44 <_dtoa_r+0x88c>
 80098c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	f000 80b7 	beq.w	8009a3c <_dtoa_r+0x884>
 80098ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80098d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098d4:	4646      	mov	r6, r8
 80098d6:	9a08      	ldr	r2, [sp, #32]
 80098d8:	2101      	movs	r1, #1
 80098da:	441a      	add	r2, r3
 80098dc:	4658      	mov	r0, fp
 80098de:	4498      	add	r8, r3
 80098e0:	9208      	str	r2, [sp, #32]
 80098e2:	f000 fc21 	bl	800a128 <__i2b>
 80098e6:	4605      	mov	r5, r0
 80098e8:	b15e      	cbz	r6, 8009902 <_dtoa_r+0x74a>
 80098ea:	9b08      	ldr	r3, [sp, #32]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dd08      	ble.n	8009902 <_dtoa_r+0x74a>
 80098f0:	42b3      	cmp	r3, r6
 80098f2:	9a08      	ldr	r2, [sp, #32]
 80098f4:	bfa8      	it	ge
 80098f6:	4633      	movge	r3, r6
 80098f8:	eba8 0803 	sub.w	r8, r8, r3
 80098fc:	1af6      	subs	r6, r6, r3
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	9308      	str	r3, [sp, #32]
 8009902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009904:	b1f3      	cbz	r3, 8009944 <_dtoa_r+0x78c>
 8009906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 80b7 	beq.w	8009a7c <_dtoa_r+0x8c4>
 800990e:	b18c      	cbz	r4, 8009934 <_dtoa_r+0x77c>
 8009910:	4629      	mov	r1, r5
 8009912:	4622      	mov	r2, r4
 8009914:	4658      	mov	r0, fp
 8009916:	f000 fcc7 	bl	800a2a8 <__pow5mult>
 800991a:	464a      	mov	r2, r9
 800991c:	4601      	mov	r1, r0
 800991e:	4605      	mov	r5, r0
 8009920:	4658      	mov	r0, fp
 8009922:	f000 fc17 	bl	800a154 <__multiply>
 8009926:	4649      	mov	r1, r9
 8009928:	9004      	str	r0, [sp, #16]
 800992a:	4658      	mov	r0, fp
 800992c:	f000 fb48 	bl	8009fc0 <_Bfree>
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	4699      	mov	r9, r3
 8009934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009936:	1b1a      	subs	r2, r3, r4
 8009938:	d004      	beq.n	8009944 <_dtoa_r+0x78c>
 800993a:	4649      	mov	r1, r9
 800993c:	4658      	mov	r0, fp
 800993e:	f000 fcb3 	bl	800a2a8 <__pow5mult>
 8009942:	4681      	mov	r9, r0
 8009944:	2101      	movs	r1, #1
 8009946:	4658      	mov	r0, fp
 8009948:	f000 fbee 	bl	800a128 <__i2b>
 800994c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994e:	4604      	mov	r4, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 81cf 	beq.w	8009cf4 <_dtoa_r+0xb3c>
 8009956:	461a      	mov	r2, r3
 8009958:	4601      	mov	r1, r0
 800995a:	4658      	mov	r0, fp
 800995c:	f000 fca4 	bl	800a2a8 <__pow5mult>
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	2b01      	cmp	r3, #1
 8009964:	4604      	mov	r4, r0
 8009966:	f300 8095 	bgt.w	8009a94 <_dtoa_r+0x8dc>
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	f040 8087 	bne.w	8009a80 <_dtoa_r+0x8c8>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009978:	2b00      	cmp	r3, #0
 800997a:	f040 8089 	bne.w	8009a90 <_dtoa_r+0x8d8>
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009984:	0d1b      	lsrs	r3, r3, #20
 8009986:	051b      	lsls	r3, r3, #20
 8009988:	b12b      	cbz	r3, 8009996 <_dtoa_r+0x7de>
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	3301      	adds	r3, #1
 800998e:	9308      	str	r3, [sp, #32]
 8009990:	f108 0801 	add.w	r8, r8, #1
 8009994:	2301      	movs	r3, #1
 8009996:	930a      	str	r3, [sp, #40]	@ 0x28
 8009998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 81b0 	beq.w	8009d00 <_dtoa_r+0xb48>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099a6:	6918      	ldr	r0, [r3, #16]
 80099a8:	f000 fb72 	bl	800a090 <__hi0bits>
 80099ac:	f1c0 0020 	rsb	r0, r0, #32
 80099b0:	9b08      	ldr	r3, [sp, #32]
 80099b2:	4418      	add	r0, r3
 80099b4:	f010 001f 	ands.w	r0, r0, #31
 80099b8:	d077      	beq.n	8009aaa <_dtoa_r+0x8f2>
 80099ba:	f1c0 0320 	rsb	r3, r0, #32
 80099be:	2b04      	cmp	r3, #4
 80099c0:	dd6b      	ble.n	8009a9a <_dtoa_r+0x8e2>
 80099c2:	9b08      	ldr	r3, [sp, #32]
 80099c4:	f1c0 001c 	rsb	r0, r0, #28
 80099c8:	4403      	add	r3, r0
 80099ca:	4480      	add	r8, r0
 80099cc:	4406      	add	r6, r0
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	f1b8 0f00 	cmp.w	r8, #0
 80099d4:	dd05      	ble.n	80099e2 <_dtoa_r+0x82a>
 80099d6:	4649      	mov	r1, r9
 80099d8:	4642      	mov	r2, r8
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fcbe 	bl	800a35c <__lshift>
 80099e0:	4681      	mov	r9, r0
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dd05      	ble.n	80099f4 <_dtoa_r+0x83c>
 80099e8:	4621      	mov	r1, r4
 80099ea:	461a      	mov	r2, r3
 80099ec:	4658      	mov	r0, fp
 80099ee:	f000 fcb5 	bl	800a35c <__lshift>
 80099f2:	4604      	mov	r4, r0
 80099f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d059      	beq.n	8009aae <_dtoa_r+0x8f6>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4648      	mov	r0, r9
 80099fe:	f000 fd19 	bl	800a434 <__mcmp>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	da53      	bge.n	8009aae <_dtoa_r+0x8f6>
 8009a06:	1e7b      	subs	r3, r7, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	220a      	movs	r2, #10
 8009a10:	4658      	mov	r0, fp
 8009a12:	f000 faf7 	bl	800a004 <__multadd>
 8009a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a18:	4681      	mov	r9, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8172 	beq.w	8009d04 <_dtoa_r+0xb4c>
 8009a20:	2300      	movs	r3, #0
 8009a22:	4629      	mov	r1, r5
 8009a24:	220a      	movs	r2, #10
 8009a26:	4658      	mov	r0, fp
 8009a28:	f000 faec 	bl	800a004 <__multadd>
 8009a2c:	9b00      	ldr	r3, [sp, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	4605      	mov	r5, r0
 8009a32:	dc67      	bgt.n	8009b04 <_dtoa_r+0x94c>
 8009a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	dc41      	bgt.n	8009abe <_dtoa_r+0x906>
 8009a3a:	e063      	b.n	8009b04 <_dtoa_r+0x94c>
 8009a3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a42:	e746      	b.n	80098d2 <_dtoa_r+0x71a>
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	1e5c      	subs	r4, r3, #1
 8009a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	bfbf      	itttt	lt
 8009a4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009a50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009a52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009a54:	1ae3      	sublt	r3, r4, r3
 8009a56:	bfb4      	ite	lt
 8009a58:	18d2      	addlt	r2, r2, r3
 8009a5a:	1b1c      	subge	r4, r3, r4
 8009a5c:	9b07      	ldr	r3, [sp, #28]
 8009a5e:	bfbc      	itt	lt
 8009a60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a62:	2400      	movlt	r4, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bfb5      	itete	lt
 8009a68:	eba8 0603 	sublt.w	r6, r8, r3
 8009a6c:	9b07      	ldrge	r3, [sp, #28]
 8009a6e:	2300      	movlt	r3, #0
 8009a70:	4646      	movge	r6, r8
 8009a72:	e730      	b.n	80098d6 <_dtoa_r+0x71e>
 8009a74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a78:	4646      	mov	r6, r8
 8009a7a:	e735      	b.n	80098e8 <_dtoa_r+0x730>
 8009a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a7e:	e75c      	b.n	800993a <_dtoa_r+0x782>
 8009a80:	2300      	movs	r3, #0
 8009a82:	e788      	b.n	8009996 <_dtoa_r+0x7de>
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	40140000 	.word	0x40140000
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	e780      	b.n	8009996 <_dtoa_r+0x7de>
 8009a94:	2300      	movs	r3, #0
 8009a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a98:	e782      	b.n	80099a0 <_dtoa_r+0x7e8>
 8009a9a:	d099      	beq.n	80099d0 <_dtoa_r+0x818>
 8009a9c:	9a08      	ldr	r2, [sp, #32]
 8009a9e:	331c      	adds	r3, #28
 8009aa0:	441a      	add	r2, r3
 8009aa2:	4498      	add	r8, r3
 8009aa4:	441e      	add	r6, r3
 8009aa6:	9208      	str	r2, [sp, #32]
 8009aa8:	e792      	b.n	80099d0 <_dtoa_r+0x818>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	e7f6      	b.n	8009a9c <_dtoa_r+0x8e4>
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	9704      	str	r7, [sp, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dc20      	bgt.n	8009af8 <_dtoa_r+0x940>
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	dd1e      	ble.n	8009afc <_dtoa_r+0x944>
 8009abe:	9b00      	ldr	r3, [sp, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f47f aec0 	bne.w	8009846 <_dtoa_r+0x68e>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	2205      	movs	r2, #5
 8009aca:	4658      	mov	r0, fp
 8009acc:	f000 fa9a 	bl	800a004 <__multadd>
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f000 fcad 	bl	800a434 <__mcmp>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f77f aeb3 	ble.w	8009846 <_dtoa_r+0x68e>
 8009ae0:	4656      	mov	r6, sl
 8009ae2:	2331      	movs	r3, #49	@ 0x31
 8009ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ae8:	9b04      	ldr	r3, [sp, #16]
 8009aea:	3301      	adds	r3, #1
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	e6ae      	b.n	800984e <_dtoa_r+0x696>
 8009af0:	9c07      	ldr	r4, [sp, #28]
 8009af2:	9704      	str	r7, [sp, #16]
 8009af4:	4625      	mov	r5, r4
 8009af6:	e7f3      	b.n	8009ae0 <_dtoa_r+0x928>
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 8104 	beq.w	8009d0c <_dtoa_r+0xb54>
 8009b04:	2e00      	cmp	r6, #0
 8009b06:	dd05      	ble.n	8009b14 <_dtoa_r+0x95c>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f000 fc25 	bl	800a35c <__lshift>
 8009b12:	4605      	mov	r5, r0
 8009b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d05a      	beq.n	8009bd0 <_dtoa_r+0xa18>
 8009b1a:	6869      	ldr	r1, [r5, #4]
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	f000 fa0f 	bl	8009f40 <_Balloc>
 8009b22:	4606      	mov	r6, r0
 8009b24:	b928      	cbnz	r0, 8009b32 <_dtoa_r+0x97a>
 8009b26:	4b84      	ldr	r3, [pc, #528]	@ (8009d38 <_dtoa_r+0xb80>)
 8009b28:	4602      	mov	r2, r0
 8009b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b2e:	f7ff bb5a 	b.w	80091e6 <_dtoa_r+0x2e>
 8009b32:	692a      	ldr	r2, [r5, #16]
 8009b34:	3202      	adds	r2, #2
 8009b36:	0092      	lsls	r2, r2, #2
 8009b38:	f105 010c 	add.w	r1, r5, #12
 8009b3c:	300c      	adds	r0, #12
 8009b3e:	f7ff faa2 	bl	8009086 <memcpy>
 8009b42:	2201      	movs	r2, #1
 8009b44:	4631      	mov	r1, r6
 8009b46:	4658      	mov	r0, fp
 8009b48:	f000 fc08 	bl	800a35c <__lshift>
 8009b4c:	f10a 0301 	add.w	r3, sl, #1
 8009b50:	9307      	str	r3, [sp, #28]
 8009b52:	9b00      	ldr	r3, [sp, #0]
 8009b54:	4453      	add	r3, sl
 8009b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	462f      	mov	r7, r5
 8009b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b62:	4605      	mov	r5, r0
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	4621      	mov	r1, r4
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	f7ff fa98 	bl	80090a2 <quorem>
 8009b72:	4639      	mov	r1, r7
 8009b74:	9002      	str	r0, [sp, #8]
 8009b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	f000 fc5a 	bl	800a434 <__mcmp>
 8009b80:	462a      	mov	r2, r5
 8009b82:	9008      	str	r0, [sp, #32]
 8009b84:	4621      	mov	r1, r4
 8009b86:	4658      	mov	r0, fp
 8009b88:	f000 fc70 	bl	800a46c <__mdiff>
 8009b8c:	68c2      	ldr	r2, [r0, #12]
 8009b8e:	4606      	mov	r6, r0
 8009b90:	bb02      	cbnz	r2, 8009bd4 <_dtoa_r+0xa1c>
 8009b92:	4601      	mov	r1, r0
 8009b94:	4648      	mov	r0, r9
 8009b96:	f000 fc4d 	bl	800a434 <__mcmp>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ba2:	f000 fa0d 	bl	8009fc0 <_Bfree>
 8009ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009baa:	9e07      	ldr	r6, [sp, #28]
 8009bac:	ea43 0102 	orr.w	r1, r3, r2
 8009bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bb2:	4319      	orrs	r1, r3
 8009bb4:	d110      	bne.n	8009bd8 <_dtoa_r+0xa20>
 8009bb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bba:	d029      	beq.n	8009c10 <_dtoa_r+0xa58>
 8009bbc:	9b08      	ldr	r3, [sp, #32]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dd02      	ble.n	8009bc8 <_dtoa_r+0xa10>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	f883 8000 	strb.w	r8, [r3]
 8009bce:	e63f      	b.n	8009850 <_dtoa_r+0x698>
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	e7bb      	b.n	8009b4c <_dtoa_r+0x994>
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	e7e1      	b.n	8009b9c <_dtoa_r+0x9e4>
 8009bd8:	9b08      	ldr	r3, [sp, #32]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	db04      	blt.n	8009be8 <_dtoa_r+0xa30>
 8009bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009be0:	430b      	orrs	r3, r1
 8009be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009be4:	430b      	orrs	r3, r1
 8009be6:	d120      	bne.n	8009c2a <_dtoa_r+0xa72>
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	dded      	ble.n	8009bc8 <_dtoa_r+0xa10>
 8009bec:	4649      	mov	r1, r9
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4658      	mov	r0, fp
 8009bf2:	f000 fbb3 	bl	800a35c <__lshift>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4681      	mov	r9, r0
 8009bfa:	f000 fc1b 	bl	800a434 <__mcmp>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	dc03      	bgt.n	8009c0a <_dtoa_r+0xa52>
 8009c02:	d1e1      	bne.n	8009bc8 <_dtoa_r+0xa10>
 8009c04:	f018 0f01 	tst.w	r8, #1
 8009c08:	d0de      	beq.n	8009bc8 <_dtoa_r+0xa10>
 8009c0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c0e:	d1d8      	bne.n	8009bc2 <_dtoa_r+0xa0a>
 8009c10:	9a00      	ldr	r2, [sp, #0]
 8009c12:	2339      	movs	r3, #57	@ 0x39
 8009c14:	7013      	strb	r3, [r2, #0]
 8009c16:	4633      	mov	r3, r6
 8009c18:	461e      	mov	r6, r3
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c20:	2a39      	cmp	r2, #57	@ 0x39
 8009c22:	d052      	beq.n	8009cca <_dtoa_r+0xb12>
 8009c24:	3201      	adds	r2, #1
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	e612      	b.n	8009850 <_dtoa_r+0x698>
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	dd07      	ble.n	8009c3e <_dtoa_r+0xa86>
 8009c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c32:	d0ed      	beq.n	8009c10 <_dtoa_r+0xa58>
 8009c34:	9a00      	ldr	r2, [sp, #0]
 8009c36:	f108 0301 	add.w	r3, r8, #1
 8009c3a:	7013      	strb	r3, [r2, #0]
 8009c3c:	e608      	b.n	8009850 <_dtoa_r+0x698>
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	9a07      	ldr	r2, [sp, #28]
 8009c42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d028      	beq.n	8009c9e <_dtoa_r+0xae6>
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	2300      	movs	r3, #0
 8009c50:	220a      	movs	r2, #10
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 f9d6 	bl	800a004 <__multadd>
 8009c58:	42af      	cmp	r7, r5
 8009c5a:	4681      	mov	r9, r0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	f04f 020a 	mov.w	r2, #10
 8009c64:	4639      	mov	r1, r7
 8009c66:	4658      	mov	r0, fp
 8009c68:	d107      	bne.n	8009c7a <_dtoa_r+0xac2>
 8009c6a:	f000 f9cb 	bl	800a004 <__multadd>
 8009c6e:	4607      	mov	r7, r0
 8009c70:	4605      	mov	r5, r0
 8009c72:	9b07      	ldr	r3, [sp, #28]
 8009c74:	3301      	adds	r3, #1
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	e774      	b.n	8009b64 <_dtoa_r+0x9ac>
 8009c7a:	f000 f9c3 	bl	800a004 <__multadd>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4607      	mov	r7, r0
 8009c82:	2300      	movs	r3, #0
 8009c84:	220a      	movs	r2, #10
 8009c86:	4658      	mov	r0, fp
 8009c88:	f000 f9bc 	bl	800a004 <__multadd>
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	e7f0      	b.n	8009c72 <_dtoa_r+0xaba>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfcc      	ite	gt
 8009c96:	461e      	movgt	r6, r3
 8009c98:	2601      	movle	r6, #1
 8009c9a:	4456      	add	r6, sl
 8009c9c:	2700      	movs	r7, #0
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	4658      	mov	r0, fp
 8009ca4:	f000 fb5a 	bl	800a35c <__lshift>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4681      	mov	r9, r0
 8009cac:	f000 fbc2 	bl	800a434 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	dcb0      	bgt.n	8009c16 <_dtoa_r+0xa5e>
 8009cb4:	d102      	bne.n	8009cbc <_dtoa_r+0xb04>
 8009cb6:	f018 0f01 	tst.w	r8, #1
 8009cba:	d1ac      	bne.n	8009c16 <_dtoa_r+0xa5e>
 8009cbc:	4633      	mov	r3, r6
 8009cbe:	461e      	mov	r6, r3
 8009cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cc4:	2a30      	cmp	r2, #48	@ 0x30
 8009cc6:	d0fa      	beq.n	8009cbe <_dtoa_r+0xb06>
 8009cc8:	e5c2      	b.n	8009850 <_dtoa_r+0x698>
 8009cca:	459a      	cmp	sl, r3
 8009ccc:	d1a4      	bne.n	8009c18 <_dtoa_r+0xa60>
 8009cce:	9b04      	ldr	r3, [sp, #16]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	2331      	movs	r3, #49	@ 0x31
 8009cd6:	f88a 3000 	strb.w	r3, [sl]
 8009cda:	e5b9      	b.n	8009850 <_dtoa_r+0x698>
 8009cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009d3c <_dtoa_r+0xb84>
 8009ce2:	b11b      	cbz	r3, 8009cec <_dtoa_r+0xb34>
 8009ce4:	f10a 0308 	add.w	r3, sl, #8
 8009ce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	4650      	mov	r0, sl
 8009cee:	b019      	add	sp, #100	@ 0x64
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	f77f ae37 	ble.w	800996a <_dtoa_r+0x7b2>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d00:	2001      	movs	r0, #1
 8009d02:	e655      	b.n	80099b0 <_dtoa_r+0x7f8>
 8009d04:	9b00      	ldr	r3, [sp, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f77f aed6 	ble.w	8009ab8 <_dtoa_r+0x900>
 8009d0c:	4656      	mov	r6, sl
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4648      	mov	r0, r9
 8009d12:	f7ff f9c6 	bl	80090a2 <quorem>
 8009d16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d1a:	f806 8b01 	strb.w	r8, [r6], #1
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	eba6 020a 	sub.w	r2, r6, sl
 8009d24:	4293      	cmp	r3, r2
 8009d26:	ddb3      	ble.n	8009c90 <_dtoa_r+0xad8>
 8009d28:	4649      	mov	r1, r9
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	4658      	mov	r0, fp
 8009d30:	f000 f968 	bl	800a004 <__multadd>
 8009d34:	4681      	mov	r9, r0
 8009d36:	e7ea      	b.n	8009d0e <_dtoa_r+0xb56>
 8009d38:	0800afcc 	.word	0x0800afcc
 8009d3c:	0800af50 	.word	0x0800af50

08009d40 <_free_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4605      	mov	r5, r0
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d041      	beq.n	8009dcc <_free_r+0x8c>
 8009d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4c:	1f0c      	subs	r4, r1, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bfb8      	it	lt
 8009d52:	18e4      	addlt	r4, r4, r3
 8009d54:	f000 f8e8 	bl	8009f28 <__malloc_lock>
 8009d58:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd0 <_free_r+0x90>)
 8009d5a:	6813      	ldr	r3, [r2, #0]
 8009d5c:	b933      	cbnz	r3, 8009d6c <_free_r+0x2c>
 8009d5e:	6063      	str	r3, [r4, #4]
 8009d60:	6014      	str	r4, [r2, #0]
 8009d62:	4628      	mov	r0, r5
 8009d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d68:	f000 b8e4 	b.w	8009f34 <__malloc_unlock>
 8009d6c:	42a3      	cmp	r3, r4
 8009d6e:	d908      	bls.n	8009d82 <_free_r+0x42>
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	1821      	adds	r1, r4, r0
 8009d74:	428b      	cmp	r3, r1
 8009d76:	bf01      	itttt	eq
 8009d78:	6819      	ldreq	r1, [r3, #0]
 8009d7a:	685b      	ldreq	r3, [r3, #4]
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	e7ed      	b.n	8009d5e <_free_r+0x1e>
 8009d82:	461a      	mov	r2, r3
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	b10b      	cbz	r3, 8009d8c <_free_r+0x4c>
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	d9fa      	bls.n	8009d82 <_free_r+0x42>
 8009d8c:	6811      	ldr	r1, [r2, #0]
 8009d8e:	1850      	adds	r0, r2, r1
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d10b      	bne.n	8009dac <_free_r+0x6c>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	4401      	add	r1, r0
 8009d98:	1850      	adds	r0, r2, r1
 8009d9a:	4283      	cmp	r3, r0
 8009d9c:	6011      	str	r1, [r2, #0]
 8009d9e:	d1e0      	bne.n	8009d62 <_free_r+0x22>
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	6053      	str	r3, [r2, #4]
 8009da6:	4408      	add	r0, r1
 8009da8:	6010      	str	r0, [r2, #0]
 8009daa:	e7da      	b.n	8009d62 <_free_r+0x22>
 8009dac:	d902      	bls.n	8009db4 <_free_r+0x74>
 8009dae:	230c      	movs	r3, #12
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	e7d6      	b.n	8009d62 <_free_r+0x22>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	1821      	adds	r1, r4, r0
 8009db8:	428b      	cmp	r3, r1
 8009dba:	bf04      	itt	eq
 8009dbc:	6819      	ldreq	r1, [r3, #0]
 8009dbe:	685b      	ldreq	r3, [r3, #4]
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	bf04      	itt	eq
 8009dc4:	1809      	addeq	r1, r1, r0
 8009dc6:	6021      	streq	r1, [r4, #0]
 8009dc8:	6054      	str	r4, [r2, #4]
 8009dca:	e7ca      	b.n	8009d62 <_free_r+0x22>
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001e88 	.word	0x20001e88

08009dd4 <malloc>:
 8009dd4:	4b02      	ldr	r3, [pc, #8]	@ (8009de0 <malloc+0xc>)
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f000 b825 	b.w	8009e28 <_malloc_r>
 8009dde:	bf00      	nop
 8009de0:	2000001c 	.word	0x2000001c

08009de4 <sbrk_aligned>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e24 <sbrk_aligned+0x40>)
 8009de8:	460c      	mov	r4, r1
 8009dea:	6831      	ldr	r1, [r6, #0]
 8009dec:	4605      	mov	r5, r0
 8009dee:	b911      	cbnz	r1, 8009df6 <sbrk_aligned+0x12>
 8009df0:	f000 feaa 	bl	800ab48 <_sbrk_r>
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 fea5 	bl	800ab48 <_sbrk_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d103      	bne.n	8009e0a <sbrk_aligned+0x26>
 8009e02:	f04f 34ff 	mov.w	r4, #4294967295
 8009e06:	4620      	mov	r0, r4
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
 8009e0a:	1cc4      	adds	r4, r0, #3
 8009e0c:	f024 0403 	bic.w	r4, r4, #3
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d0f8      	beq.n	8009e06 <sbrk_aligned+0x22>
 8009e14:	1a21      	subs	r1, r4, r0
 8009e16:	4628      	mov	r0, r5
 8009e18:	f000 fe96 	bl	800ab48 <_sbrk_r>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d1f2      	bne.n	8009e06 <sbrk_aligned+0x22>
 8009e20:	e7ef      	b.n	8009e02 <sbrk_aligned+0x1e>
 8009e22:	bf00      	nop
 8009e24:	20001e84 	.word	0x20001e84

08009e28 <_malloc_r>:
 8009e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	1ccd      	adds	r5, r1, #3
 8009e2e:	f025 0503 	bic.w	r5, r5, #3
 8009e32:	3508      	adds	r5, #8
 8009e34:	2d0c      	cmp	r5, #12
 8009e36:	bf38      	it	cc
 8009e38:	250c      	movcc	r5, #12
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	db01      	blt.n	8009e44 <_malloc_r+0x1c>
 8009e40:	42a9      	cmp	r1, r5
 8009e42:	d904      	bls.n	8009e4e <_malloc_r+0x26>
 8009e44:	230c      	movs	r3, #12
 8009e46:	6033      	str	r3, [r6, #0]
 8009e48:	2000      	movs	r0, #0
 8009e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f24 <_malloc_r+0xfc>
 8009e52:	f000 f869 	bl	8009f28 <__malloc_lock>
 8009e56:	f8d8 3000 	ldr.w	r3, [r8]
 8009e5a:	461c      	mov	r4, r3
 8009e5c:	bb44      	cbnz	r4, 8009eb0 <_malloc_r+0x88>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff ffbf 	bl	8009de4 <sbrk_aligned>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	4604      	mov	r4, r0
 8009e6a:	d158      	bne.n	8009f1e <_malloc_r+0xf6>
 8009e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e70:	4627      	mov	r7, r4
 8009e72:	2f00      	cmp	r7, #0
 8009e74:	d143      	bne.n	8009efe <_malloc_r+0xd6>
 8009e76:	2c00      	cmp	r4, #0
 8009e78:	d04b      	beq.n	8009f12 <_malloc_r+0xea>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4630      	mov	r0, r6
 8009e80:	eb04 0903 	add.w	r9, r4, r3
 8009e84:	f000 fe60 	bl	800ab48 <_sbrk_r>
 8009e88:	4581      	cmp	r9, r0
 8009e8a:	d142      	bne.n	8009f12 <_malloc_r+0xea>
 8009e8c:	6821      	ldr	r1, [r4, #0]
 8009e8e:	1a6d      	subs	r5, r5, r1
 8009e90:	4629      	mov	r1, r5
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7ff ffa6 	bl	8009de4 <sbrk_aligned>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d03a      	beq.n	8009f12 <_malloc_r+0xea>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	442b      	add	r3, r5
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	bb62      	cbnz	r2, 8009f04 <_malloc_r+0xdc>
 8009eaa:	f8c8 7000 	str.w	r7, [r8]
 8009eae:	e00f      	b.n	8009ed0 <_malloc_r+0xa8>
 8009eb0:	6822      	ldr	r2, [r4, #0]
 8009eb2:	1b52      	subs	r2, r2, r5
 8009eb4:	d420      	bmi.n	8009ef8 <_malloc_r+0xd0>
 8009eb6:	2a0b      	cmp	r2, #11
 8009eb8:	d917      	bls.n	8009eea <_malloc_r+0xc2>
 8009eba:	1961      	adds	r1, r4, r5
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	6025      	str	r5, [r4, #0]
 8009ec0:	bf18      	it	ne
 8009ec2:	6059      	strne	r1, [r3, #4]
 8009ec4:	6863      	ldr	r3, [r4, #4]
 8009ec6:	bf08      	it	eq
 8009ec8:	f8c8 1000 	streq.w	r1, [r8]
 8009ecc:	5162      	str	r2, [r4, r5]
 8009ece:	604b      	str	r3, [r1, #4]
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f000 f82f 	bl	8009f34 <__malloc_unlock>
 8009ed6:	f104 000b 	add.w	r0, r4, #11
 8009eda:	1d23      	adds	r3, r4, #4
 8009edc:	f020 0007 	bic.w	r0, r0, #7
 8009ee0:	1ac2      	subs	r2, r0, r3
 8009ee2:	bf1c      	itt	ne
 8009ee4:	1a1b      	subne	r3, r3, r0
 8009ee6:	50a3      	strne	r3, [r4, r2]
 8009ee8:	e7af      	b.n	8009e4a <_malloc_r+0x22>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	bf0c      	ite	eq
 8009ef0:	f8c8 2000 	streq.w	r2, [r8]
 8009ef4:	605a      	strne	r2, [r3, #4]
 8009ef6:	e7eb      	b.n	8009ed0 <_malloc_r+0xa8>
 8009ef8:	4623      	mov	r3, r4
 8009efa:	6864      	ldr	r4, [r4, #4]
 8009efc:	e7ae      	b.n	8009e5c <_malloc_r+0x34>
 8009efe:	463c      	mov	r4, r7
 8009f00:	687f      	ldr	r7, [r7, #4]
 8009f02:	e7b6      	b.n	8009e72 <_malloc_r+0x4a>
 8009f04:	461a      	mov	r2, r3
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d1fb      	bne.n	8009f04 <_malloc_r+0xdc>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	6053      	str	r3, [r2, #4]
 8009f10:	e7de      	b.n	8009ed0 <_malloc_r+0xa8>
 8009f12:	230c      	movs	r3, #12
 8009f14:	6033      	str	r3, [r6, #0]
 8009f16:	4630      	mov	r0, r6
 8009f18:	f000 f80c 	bl	8009f34 <__malloc_unlock>
 8009f1c:	e794      	b.n	8009e48 <_malloc_r+0x20>
 8009f1e:	6005      	str	r5, [r0, #0]
 8009f20:	e7d6      	b.n	8009ed0 <_malloc_r+0xa8>
 8009f22:	bf00      	nop
 8009f24:	20001e88 	.word	0x20001e88

08009f28 <__malloc_lock>:
 8009f28:	4801      	ldr	r0, [pc, #4]	@ (8009f30 <__malloc_lock+0x8>)
 8009f2a:	f7ff b8aa 	b.w	8009082 <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20001e80 	.word	0x20001e80

08009f34 <__malloc_unlock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	@ (8009f3c <__malloc_unlock+0x8>)
 8009f36:	f7ff b8a5 	b.w	8009084 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	20001e80 	.word	0x20001e80

08009f40 <_Balloc>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	69c6      	ldr	r6, [r0, #28]
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	b976      	cbnz	r6, 8009f68 <_Balloc+0x28>
 8009f4a:	2010      	movs	r0, #16
 8009f4c:	f7ff ff42 	bl	8009dd4 <malloc>
 8009f50:	4602      	mov	r2, r0
 8009f52:	61e0      	str	r0, [r4, #28]
 8009f54:	b920      	cbnz	r0, 8009f60 <_Balloc+0x20>
 8009f56:	4b18      	ldr	r3, [pc, #96]	@ (8009fb8 <_Balloc+0x78>)
 8009f58:	4818      	ldr	r0, [pc, #96]	@ (8009fbc <_Balloc+0x7c>)
 8009f5a:	216b      	movs	r1, #107	@ 0x6b
 8009f5c:	f000 fe04 	bl	800ab68 <__assert_func>
 8009f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f64:	6006      	str	r6, [r0, #0]
 8009f66:	60c6      	str	r6, [r0, #12]
 8009f68:	69e6      	ldr	r6, [r4, #28]
 8009f6a:	68f3      	ldr	r3, [r6, #12]
 8009f6c:	b183      	cbz	r3, 8009f90 <_Balloc+0x50>
 8009f6e:	69e3      	ldr	r3, [r4, #28]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f76:	b9b8      	cbnz	r0, 8009fa8 <_Balloc+0x68>
 8009f78:	2101      	movs	r1, #1
 8009f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f7e:	1d72      	adds	r2, r6, #5
 8009f80:	0092      	lsls	r2, r2, #2
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fe0e 	bl	800aba4 <_calloc_r>
 8009f88:	b160      	cbz	r0, 8009fa4 <_Balloc+0x64>
 8009f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f8e:	e00e      	b.n	8009fae <_Balloc+0x6e>
 8009f90:	2221      	movs	r2, #33	@ 0x21
 8009f92:	2104      	movs	r1, #4
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fe05 	bl	800aba4 <_calloc_r>
 8009f9a:	69e3      	ldr	r3, [r4, #28]
 8009f9c:	60f0      	str	r0, [r6, #12]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e4      	bne.n	8009f6e <_Balloc+0x2e>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	6802      	ldr	r2, [r0, #0]
 8009faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fb4:	e7f7      	b.n	8009fa6 <_Balloc+0x66>
 8009fb6:	bf00      	nop
 8009fb8:	0800af5d 	.word	0x0800af5d
 8009fbc:	0800afdd 	.word	0x0800afdd

08009fc0 <_Bfree>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	69c6      	ldr	r6, [r0, #28]
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b976      	cbnz	r6, 8009fe8 <_Bfree+0x28>
 8009fca:	2010      	movs	r0, #16
 8009fcc:	f7ff ff02 	bl	8009dd4 <malloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	61e8      	str	r0, [r5, #28]
 8009fd4:	b920      	cbnz	r0, 8009fe0 <_Bfree+0x20>
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <_Bfree+0x3c>)
 8009fd8:	4809      	ldr	r0, [pc, #36]	@ (800a000 <_Bfree+0x40>)
 8009fda:	218f      	movs	r1, #143	@ 0x8f
 8009fdc:	f000 fdc4 	bl	800ab68 <__assert_func>
 8009fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe4:	6006      	str	r6, [r0, #0]
 8009fe6:	60c6      	str	r6, [r0, #12]
 8009fe8:	b13c      	cbz	r4, 8009ffa <_Bfree+0x3a>
 8009fea:	69eb      	ldr	r3, [r5, #28]
 8009fec:	6862      	ldr	r2, [r4, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ff4:	6021      	str	r1, [r4, #0]
 8009ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	0800af5d 	.word	0x0800af5d
 800a000:	0800afdd 	.word	0x0800afdd

0800a004 <__multadd>:
 800a004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a008:	690d      	ldr	r5, [r1, #16]
 800a00a:	4607      	mov	r7, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	461e      	mov	r6, r3
 800a010:	f101 0c14 	add.w	ip, r1, #20
 800a014:	2000      	movs	r0, #0
 800a016:	f8dc 3000 	ldr.w	r3, [ip]
 800a01a:	b299      	uxth	r1, r3
 800a01c:	fb02 6101 	mla	r1, r2, r1, r6
 800a020:	0c1e      	lsrs	r6, r3, #16
 800a022:	0c0b      	lsrs	r3, r1, #16
 800a024:	fb02 3306 	mla	r3, r2, r6, r3
 800a028:	b289      	uxth	r1, r1
 800a02a:	3001      	adds	r0, #1
 800a02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a030:	4285      	cmp	r5, r0
 800a032:	f84c 1b04 	str.w	r1, [ip], #4
 800a036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a03a:	dcec      	bgt.n	800a016 <__multadd+0x12>
 800a03c:	b30e      	cbz	r6, 800a082 <__multadd+0x7e>
 800a03e:	68a3      	ldr	r3, [r4, #8]
 800a040:	42ab      	cmp	r3, r5
 800a042:	dc19      	bgt.n	800a078 <__multadd+0x74>
 800a044:	6861      	ldr	r1, [r4, #4]
 800a046:	4638      	mov	r0, r7
 800a048:	3101      	adds	r1, #1
 800a04a:	f7ff ff79 	bl	8009f40 <_Balloc>
 800a04e:	4680      	mov	r8, r0
 800a050:	b928      	cbnz	r0, 800a05e <__multadd+0x5a>
 800a052:	4602      	mov	r2, r0
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <__multadd+0x84>)
 800a056:	480d      	ldr	r0, [pc, #52]	@ (800a08c <__multadd+0x88>)
 800a058:	21ba      	movs	r1, #186	@ 0xba
 800a05a:	f000 fd85 	bl	800ab68 <__assert_func>
 800a05e:	6922      	ldr	r2, [r4, #16]
 800a060:	3202      	adds	r2, #2
 800a062:	f104 010c 	add.w	r1, r4, #12
 800a066:	0092      	lsls	r2, r2, #2
 800a068:	300c      	adds	r0, #12
 800a06a:	f7ff f80c 	bl	8009086 <memcpy>
 800a06e:	4621      	mov	r1, r4
 800a070:	4638      	mov	r0, r7
 800a072:	f7ff ffa5 	bl	8009fc0 <_Bfree>
 800a076:	4644      	mov	r4, r8
 800a078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a07c:	3501      	adds	r5, #1
 800a07e:	615e      	str	r6, [r3, #20]
 800a080:	6125      	str	r5, [r4, #16]
 800a082:	4620      	mov	r0, r4
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	0800afcc 	.word	0x0800afcc
 800a08c:	0800afdd 	.word	0x0800afdd

0800a090 <__hi0bits>:
 800a090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a094:	4603      	mov	r3, r0
 800a096:	bf36      	itet	cc
 800a098:	0403      	lslcc	r3, r0, #16
 800a09a:	2000      	movcs	r0, #0
 800a09c:	2010      	movcc	r0, #16
 800a09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0a2:	bf3c      	itt	cc
 800a0a4:	021b      	lslcc	r3, r3, #8
 800a0a6:	3008      	addcc	r0, #8
 800a0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0ac:	bf3c      	itt	cc
 800a0ae:	011b      	lslcc	r3, r3, #4
 800a0b0:	3004      	addcc	r0, #4
 800a0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b6:	bf3c      	itt	cc
 800a0b8:	009b      	lslcc	r3, r3, #2
 800a0ba:	3002      	addcc	r0, #2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	db05      	blt.n	800a0cc <__hi0bits+0x3c>
 800a0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0c4:	f100 0001 	add.w	r0, r0, #1
 800a0c8:	bf08      	it	eq
 800a0ca:	2020      	moveq	r0, #32
 800a0cc:	4770      	bx	lr

0800a0ce <__lo0bits>:
 800a0ce:	6803      	ldr	r3, [r0, #0]
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	f013 0007 	ands.w	r0, r3, #7
 800a0d6:	d00b      	beq.n	800a0f0 <__lo0bits+0x22>
 800a0d8:	07d9      	lsls	r1, r3, #31
 800a0da:	d421      	bmi.n	800a120 <__lo0bits+0x52>
 800a0dc:	0798      	lsls	r0, r3, #30
 800a0de:	bf49      	itett	mi
 800a0e0:	085b      	lsrmi	r3, r3, #1
 800a0e2:	089b      	lsrpl	r3, r3, #2
 800a0e4:	2001      	movmi	r0, #1
 800a0e6:	6013      	strmi	r3, [r2, #0]
 800a0e8:	bf5c      	itt	pl
 800a0ea:	6013      	strpl	r3, [r2, #0]
 800a0ec:	2002      	movpl	r0, #2
 800a0ee:	4770      	bx	lr
 800a0f0:	b299      	uxth	r1, r3
 800a0f2:	b909      	cbnz	r1, 800a0f8 <__lo0bits+0x2a>
 800a0f4:	0c1b      	lsrs	r3, r3, #16
 800a0f6:	2010      	movs	r0, #16
 800a0f8:	b2d9      	uxtb	r1, r3
 800a0fa:	b909      	cbnz	r1, 800a100 <__lo0bits+0x32>
 800a0fc:	3008      	adds	r0, #8
 800a0fe:	0a1b      	lsrs	r3, r3, #8
 800a100:	0719      	lsls	r1, r3, #28
 800a102:	bf04      	itt	eq
 800a104:	091b      	lsreq	r3, r3, #4
 800a106:	3004      	addeq	r0, #4
 800a108:	0799      	lsls	r1, r3, #30
 800a10a:	bf04      	itt	eq
 800a10c:	089b      	lsreq	r3, r3, #2
 800a10e:	3002      	addeq	r0, #2
 800a110:	07d9      	lsls	r1, r3, #31
 800a112:	d403      	bmi.n	800a11c <__lo0bits+0x4e>
 800a114:	085b      	lsrs	r3, r3, #1
 800a116:	f100 0001 	add.w	r0, r0, #1
 800a11a:	d003      	beq.n	800a124 <__lo0bits+0x56>
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4770      	bx	lr
 800a120:	2000      	movs	r0, #0
 800a122:	4770      	bx	lr
 800a124:	2020      	movs	r0, #32
 800a126:	4770      	bx	lr

0800a128 <__i2b>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	2101      	movs	r1, #1
 800a12e:	f7ff ff07 	bl	8009f40 <_Balloc>
 800a132:	4602      	mov	r2, r0
 800a134:	b928      	cbnz	r0, 800a142 <__i2b+0x1a>
 800a136:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <__i2b+0x24>)
 800a138:	4805      	ldr	r0, [pc, #20]	@ (800a150 <__i2b+0x28>)
 800a13a:	f240 1145 	movw	r1, #325	@ 0x145
 800a13e:	f000 fd13 	bl	800ab68 <__assert_func>
 800a142:	2301      	movs	r3, #1
 800a144:	6144      	str	r4, [r0, #20]
 800a146:	6103      	str	r3, [r0, #16]
 800a148:	bd10      	pop	{r4, pc}
 800a14a:	bf00      	nop
 800a14c:	0800afcc 	.word	0x0800afcc
 800a150:	0800afdd 	.word	0x0800afdd

0800a154 <__multiply>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	4614      	mov	r4, r2
 800a15a:	690a      	ldr	r2, [r1, #16]
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	429a      	cmp	r2, r3
 800a160:	bfa8      	it	ge
 800a162:	4623      	movge	r3, r4
 800a164:	460f      	mov	r7, r1
 800a166:	bfa4      	itt	ge
 800a168:	460c      	movge	r4, r1
 800a16a:	461f      	movge	r7, r3
 800a16c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	6861      	ldr	r1, [r4, #4]
 800a178:	eb0a 0609 	add.w	r6, sl, r9
 800a17c:	42b3      	cmp	r3, r6
 800a17e:	b085      	sub	sp, #20
 800a180:	bfb8      	it	lt
 800a182:	3101      	addlt	r1, #1
 800a184:	f7ff fedc 	bl	8009f40 <_Balloc>
 800a188:	b930      	cbnz	r0, 800a198 <__multiply+0x44>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b44      	ldr	r3, [pc, #272]	@ (800a2a0 <__multiply+0x14c>)
 800a18e:	4845      	ldr	r0, [pc, #276]	@ (800a2a4 <__multiply+0x150>)
 800a190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a194:	f000 fce8 	bl	800ab68 <__assert_func>
 800a198:	f100 0514 	add.w	r5, r0, #20
 800a19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4543      	cmp	r3, r8
 800a1a6:	d321      	bcc.n	800a1ec <__multiply+0x98>
 800a1a8:	f107 0114 	add.w	r1, r7, #20
 800a1ac:	f104 0214 	add.w	r2, r4, #20
 800a1b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a1b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a1b8:	9302      	str	r3, [sp, #8]
 800a1ba:	1b13      	subs	r3, r2, r4
 800a1bc:	3b15      	subs	r3, #21
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	f104 0715 	add.w	r7, r4, #21
 800a1c8:	42ba      	cmp	r2, r7
 800a1ca:	bf38      	it	cc
 800a1cc:	2304      	movcc	r3, #4
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	9b02      	ldr	r3, [sp, #8]
 800a1d2:	9103      	str	r1, [sp, #12]
 800a1d4:	428b      	cmp	r3, r1
 800a1d6:	d80c      	bhi.n	800a1f2 <__multiply+0x9e>
 800a1d8:	2e00      	cmp	r6, #0
 800a1da:	dd03      	ble.n	800a1e4 <__multiply+0x90>
 800a1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d05b      	beq.n	800a29c <__multiply+0x148>
 800a1e4:	6106      	str	r6, [r0, #16]
 800a1e6:	b005      	add	sp, #20
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	f843 2b04 	str.w	r2, [r3], #4
 800a1f0:	e7d8      	b.n	800a1a4 <__multiply+0x50>
 800a1f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1f6:	f1ba 0f00 	cmp.w	sl, #0
 800a1fa:	d024      	beq.n	800a246 <__multiply+0xf2>
 800a1fc:	f104 0e14 	add.w	lr, r4, #20
 800a200:	46a9      	mov	r9, r5
 800a202:	f04f 0c00 	mov.w	ip, #0
 800a206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a20a:	f8d9 3000 	ldr.w	r3, [r9]
 800a20e:	fa1f fb87 	uxth.w	fp, r7
 800a212:	b29b      	uxth	r3, r3
 800a214:	fb0a 330b 	mla	r3, sl, fp, r3
 800a218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a21c:	f8d9 7000 	ldr.w	r7, [r9]
 800a220:	4463      	add	r3, ip
 800a222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a226:	fb0a c70b 	mla	r7, sl, fp, ip
 800a22a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a234:	4572      	cmp	r2, lr
 800a236:	f849 3b04 	str.w	r3, [r9], #4
 800a23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a23e:	d8e2      	bhi.n	800a206 <__multiply+0xb2>
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	f845 c003 	str.w	ip, [r5, r3]
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a24c:	3104      	adds	r1, #4
 800a24e:	f1b9 0f00 	cmp.w	r9, #0
 800a252:	d021      	beq.n	800a298 <__multiply+0x144>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	f104 0c14 	add.w	ip, r4, #20
 800a25a:	46ae      	mov	lr, r5
 800a25c:	f04f 0a00 	mov.w	sl, #0
 800a260:	f8bc b000 	ldrh.w	fp, [ip]
 800a264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a268:	fb09 770b 	mla	r7, r9, fp, r7
 800a26c:	4457      	add	r7, sl
 800a26e:	b29b      	uxth	r3, r3
 800a270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a274:	f84e 3b04 	str.w	r3, [lr], #4
 800a278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a280:	f8be 3000 	ldrh.w	r3, [lr]
 800a284:	fb09 330a 	mla	r3, r9, sl, r3
 800a288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a28c:	4562      	cmp	r2, ip
 800a28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a292:	d8e5      	bhi.n	800a260 <__multiply+0x10c>
 800a294:	9f01      	ldr	r7, [sp, #4]
 800a296:	51eb      	str	r3, [r5, r7]
 800a298:	3504      	adds	r5, #4
 800a29a:	e799      	b.n	800a1d0 <__multiply+0x7c>
 800a29c:	3e01      	subs	r6, #1
 800a29e:	e79b      	b.n	800a1d8 <__multiply+0x84>
 800a2a0:	0800afcc 	.word	0x0800afcc
 800a2a4:	0800afdd 	.word	0x0800afdd

0800a2a8 <__pow5mult>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	4615      	mov	r5, r2
 800a2ae:	f012 0203 	ands.w	r2, r2, #3
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	d007      	beq.n	800a2c8 <__pow5mult+0x20>
 800a2b8:	4c25      	ldr	r4, [pc, #148]	@ (800a350 <__pow5mult+0xa8>)
 800a2ba:	3a01      	subs	r2, #1
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2c2:	f7ff fe9f 	bl	800a004 <__multadd>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	10ad      	asrs	r5, r5, #2
 800a2ca:	d03d      	beq.n	800a348 <__pow5mult+0xa0>
 800a2cc:	69fc      	ldr	r4, [r7, #28]
 800a2ce:	b97c      	cbnz	r4, 800a2f0 <__pow5mult+0x48>
 800a2d0:	2010      	movs	r0, #16
 800a2d2:	f7ff fd7f 	bl	8009dd4 <malloc>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	61f8      	str	r0, [r7, #28]
 800a2da:	b928      	cbnz	r0, 800a2e8 <__pow5mult+0x40>
 800a2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a354 <__pow5mult+0xac>)
 800a2de:	481e      	ldr	r0, [pc, #120]	@ (800a358 <__pow5mult+0xb0>)
 800a2e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2e4:	f000 fc40 	bl	800ab68 <__assert_func>
 800a2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ec:	6004      	str	r4, [r0, #0]
 800a2ee:	60c4      	str	r4, [r0, #12]
 800a2f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2f8:	b94c      	cbnz	r4, 800a30e <__pow5mult+0x66>
 800a2fa:	f240 2171 	movw	r1, #625	@ 0x271
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7ff ff12 	bl	800a128 <__i2b>
 800a304:	2300      	movs	r3, #0
 800a306:	f8c8 0008 	str.w	r0, [r8, #8]
 800a30a:	4604      	mov	r4, r0
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	f04f 0900 	mov.w	r9, #0
 800a312:	07eb      	lsls	r3, r5, #31
 800a314:	d50a      	bpl.n	800a32c <__pow5mult+0x84>
 800a316:	4631      	mov	r1, r6
 800a318:	4622      	mov	r2, r4
 800a31a:	4638      	mov	r0, r7
 800a31c:	f7ff ff1a 	bl	800a154 <__multiply>
 800a320:	4631      	mov	r1, r6
 800a322:	4680      	mov	r8, r0
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff fe4b 	bl	8009fc0 <_Bfree>
 800a32a:	4646      	mov	r6, r8
 800a32c:	106d      	asrs	r5, r5, #1
 800a32e:	d00b      	beq.n	800a348 <__pow5mult+0xa0>
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	b938      	cbnz	r0, 800a344 <__pow5mult+0x9c>
 800a334:	4622      	mov	r2, r4
 800a336:	4621      	mov	r1, r4
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ff0b 	bl	800a154 <__multiply>
 800a33e:	6020      	str	r0, [r4, #0]
 800a340:	f8c0 9000 	str.w	r9, [r0]
 800a344:	4604      	mov	r4, r0
 800a346:	e7e4      	b.n	800a312 <__pow5mult+0x6a>
 800a348:	4630      	mov	r0, r6
 800a34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34e:	bf00      	nop
 800a350:	0800b038 	.word	0x0800b038
 800a354:	0800af5d 	.word	0x0800af5d
 800a358:	0800afdd 	.word	0x0800afdd

0800a35c <__lshift>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	6849      	ldr	r1, [r1, #4]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	4607      	mov	r7, r0
 800a36e:	4691      	mov	r9, r2
 800a370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a374:	f108 0601 	add.w	r6, r8, #1
 800a378:	42b3      	cmp	r3, r6
 800a37a:	db0b      	blt.n	800a394 <__lshift+0x38>
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fddf 	bl	8009f40 <_Balloc>
 800a382:	4605      	mov	r5, r0
 800a384:	b948      	cbnz	r0, 800a39a <__lshift+0x3e>
 800a386:	4602      	mov	r2, r0
 800a388:	4b28      	ldr	r3, [pc, #160]	@ (800a42c <__lshift+0xd0>)
 800a38a:	4829      	ldr	r0, [pc, #164]	@ (800a430 <__lshift+0xd4>)
 800a38c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a390:	f000 fbea 	bl	800ab68 <__assert_func>
 800a394:	3101      	adds	r1, #1
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	e7ee      	b.n	800a378 <__lshift+0x1c>
 800a39a:	2300      	movs	r3, #0
 800a39c:	f100 0114 	add.w	r1, r0, #20
 800a3a0:	f100 0210 	add.w	r2, r0, #16
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	4553      	cmp	r3, sl
 800a3a8:	db33      	blt.n	800a412 <__lshift+0xb6>
 800a3aa:	6920      	ldr	r0, [r4, #16]
 800a3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3b0:	f104 0314 	add.w	r3, r4, #20
 800a3b4:	f019 091f 	ands.w	r9, r9, #31
 800a3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3c0:	d02b      	beq.n	800a41a <__lshift+0xbe>
 800a3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a3c6:	468a      	mov	sl, r1
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800a3d0:	4310      	orrs	r0, r2
 800a3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800a3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3da:	459c      	cmp	ip, r3
 800a3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3e0:	d8f3      	bhi.n	800a3ca <__lshift+0x6e>
 800a3e2:	ebac 0304 	sub.w	r3, ip, r4
 800a3e6:	3b15      	subs	r3, #21
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	f104 0015 	add.w	r0, r4, #21
 800a3f2:	4584      	cmp	ip, r0
 800a3f4:	bf38      	it	cc
 800a3f6:	2304      	movcc	r3, #4
 800a3f8:	50ca      	str	r2, [r1, r3]
 800a3fa:	b10a      	cbz	r2, 800a400 <__lshift+0xa4>
 800a3fc:	f108 0602 	add.w	r6, r8, #2
 800a400:	3e01      	subs	r6, #1
 800a402:	4638      	mov	r0, r7
 800a404:	612e      	str	r6, [r5, #16]
 800a406:	4621      	mov	r1, r4
 800a408:	f7ff fdda 	bl	8009fc0 <_Bfree>
 800a40c:	4628      	mov	r0, r5
 800a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a412:	f842 0f04 	str.w	r0, [r2, #4]!
 800a416:	3301      	adds	r3, #1
 800a418:	e7c5      	b.n	800a3a6 <__lshift+0x4a>
 800a41a:	3904      	subs	r1, #4
 800a41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a420:	f841 2f04 	str.w	r2, [r1, #4]!
 800a424:	459c      	cmp	ip, r3
 800a426:	d8f9      	bhi.n	800a41c <__lshift+0xc0>
 800a428:	e7ea      	b.n	800a400 <__lshift+0xa4>
 800a42a:	bf00      	nop
 800a42c:	0800afcc 	.word	0x0800afcc
 800a430:	0800afdd 	.word	0x0800afdd

0800a434 <__mcmp>:
 800a434:	690a      	ldr	r2, [r1, #16]
 800a436:	4603      	mov	r3, r0
 800a438:	6900      	ldr	r0, [r0, #16]
 800a43a:	1a80      	subs	r0, r0, r2
 800a43c:	b530      	push	{r4, r5, lr}
 800a43e:	d10e      	bne.n	800a45e <__mcmp+0x2a>
 800a440:	3314      	adds	r3, #20
 800a442:	3114      	adds	r1, #20
 800a444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a454:	4295      	cmp	r5, r2
 800a456:	d003      	beq.n	800a460 <__mcmp+0x2c>
 800a458:	d205      	bcs.n	800a466 <__mcmp+0x32>
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	bd30      	pop	{r4, r5, pc}
 800a460:	42a3      	cmp	r3, r4
 800a462:	d3f3      	bcc.n	800a44c <__mcmp+0x18>
 800a464:	e7fb      	b.n	800a45e <__mcmp+0x2a>
 800a466:	2001      	movs	r0, #1
 800a468:	e7f9      	b.n	800a45e <__mcmp+0x2a>
	...

0800a46c <__mdiff>:
 800a46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	4689      	mov	r9, r1
 800a472:	4606      	mov	r6, r0
 800a474:	4611      	mov	r1, r2
 800a476:	4648      	mov	r0, r9
 800a478:	4614      	mov	r4, r2
 800a47a:	f7ff ffdb 	bl	800a434 <__mcmp>
 800a47e:	1e05      	subs	r5, r0, #0
 800a480:	d112      	bne.n	800a4a8 <__mdiff+0x3c>
 800a482:	4629      	mov	r1, r5
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff fd5b 	bl	8009f40 <_Balloc>
 800a48a:	4602      	mov	r2, r0
 800a48c:	b928      	cbnz	r0, 800a49a <__mdiff+0x2e>
 800a48e:	4b3f      	ldr	r3, [pc, #252]	@ (800a58c <__mdiff+0x120>)
 800a490:	f240 2137 	movw	r1, #567	@ 0x237
 800a494:	483e      	ldr	r0, [pc, #248]	@ (800a590 <__mdiff+0x124>)
 800a496:	f000 fb67 	bl	800ab68 <__assert_func>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	b003      	add	sp, #12
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	bfbc      	itt	lt
 800a4aa:	464b      	movlt	r3, r9
 800a4ac:	46a1      	movlt	r9, r4
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4b4:	bfba      	itte	lt
 800a4b6:	461c      	movlt	r4, r3
 800a4b8:	2501      	movlt	r5, #1
 800a4ba:	2500      	movge	r5, #0
 800a4bc:	f7ff fd40 	bl	8009f40 <_Balloc>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	b918      	cbnz	r0, 800a4cc <__mdiff+0x60>
 800a4c4:	4b31      	ldr	r3, [pc, #196]	@ (800a58c <__mdiff+0x120>)
 800a4c6:	f240 2145 	movw	r1, #581	@ 0x245
 800a4ca:	e7e3      	b.n	800a494 <__mdiff+0x28>
 800a4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4d0:	6926      	ldr	r6, [r4, #16]
 800a4d2:	60c5      	str	r5, [r0, #12]
 800a4d4:	f109 0310 	add.w	r3, r9, #16
 800a4d8:	f109 0514 	add.w	r5, r9, #20
 800a4dc:	f104 0e14 	add.w	lr, r4, #20
 800a4e0:	f100 0b14 	add.w	fp, r0, #20
 800a4e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	46d9      	mov	r9, fp
 800a4f0:	f04f 0c00 	mov.w	ip, #0
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	fa1f f38a 	uxth.w	r3, sl
 800a504:	4619      	mov	r1, r3
 800a506:	b283      	uxth	r3, r0
 800a508:	1acb      	subs	r3, r1, r3
 800a50a:	0c00      	lsrs	r0, r0, #16
 800a50c:	4463      	add	r3, ip
 800a50e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a516:	b29b      	uxth	r3, r3
 800a518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a51c:	4576      	cmp	r6, lr
 800a51e:	f849 3b04 	str.w	r3, [r9], #4
 800a522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a526:	d8e5      	bhi.n	800a4f4 <__mdiff+0x88>
 800a528:	1b33      	subs	r3, r6, r4
 800a52a:	3b15      	subs	r3, #21
 800a52c:	f023 0303 	bic.w	r3, r3, #3
 800a530:	3415      	adds	r4, #21
 800a532:	3304      	adds	r3, #4
 800a534:	42a6      	cmp	r6, r4
 800a536:	bf38      	it	cc
 800a538:	2304      	movcc	r3, #4
 800a53a:	441d      	add	r5, r3
 800a53c:	445b      	add	r3, fp
 800a53e:	461e      	mov	r6, r3
 800a540:	462c      	mov	r4, r5
 800a542:	4544      	cmp	r4, r8
 800a544:	d30e      	bcc.n	800a564 <__mdiff+0xf8>
 800a546:	f108 0103 	add.w	r1, r8, #3
 800a54a:	1b49      	subs	r1, r1, r5
 800a54c:	f021 0103 	bic.w	r1, r1, #3
 800a550:	3d03      	subs	r5, #3
 800a552:	45a8      	cmp	r8, r5
 800a554:	bf38      	it	cc
 800a556:	2100      	movcc	r1, #0
 800a558:	440b      	add	r3, r1
 800a55a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a55e:	b191      	cbz	r1, 800a586 <__mdiff+0x11a>
 800a560:	6117      	str	r7, [r2, #16]
 800a562:	e79d      	b.n	800a4a0 <__mdiff+0x34>
 800a564:	f854 1b04 	ldr.w	r1, [r4], #4
 800a568:	46e6      	mov	lr, ip
 800a56a:	0c08      	lsrs	r0, r1, #16
 800a56c:	fa1c fc81 	uxtah	ip, ip, r1
 800a570:	4471      	add	r1, lr
 800a572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a576:	b289      	uxth	r1, r1
 800a578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a57c:	f846 1b04 	str.w	r1, [r6], #4
 800a580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a584:	e7dd      	b.n	800a542 <__mdiff+0xd6>
 800a586:	3f01      	subs	r7, #1
 800a588:	e7e7      	b.n	800a55a <__mdiff+0xee>
 800a58a:	bf00      	nop
 800a58c:	0800afcc 	.word	0x0800afcc
 800a590:	0800afdd 	.word	0x0800afdd

0800a594 <__d2b>:
 800a594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a598:	460f      	mov	r7, r1
 800a59a:	2101      	movs	r1, #1
 800a59c:	ec59 8b10 	vmov	r8, r9, d0
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	f7ff fccd 	bl	8009f40 <_Balloc>
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	b930      	cbnz	r0, 800a5b8 <__d2b+0x24>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4b23      	ldr	r3, [pc, #140]	@ (800a63c <__d2b+0xa8>)
 800a5ae:	4824      	ldr	r0, [pc, #144]	@ (800a640 <__d2b+0xac>)
 800a5b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5b4:	f000 fad8 	bl	800ab68 <__assert_func>
 800a5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5c0:	b10d      	cbz	r5, 800a5c6 <__d2b+0x32>
 800a5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800a5cc:	d023      	beq.n	800a616 <__d2b+0x82>
 800a5ce:	4668      	mov	r0, sp
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	f7ff fd7c 	bl	800a0ce <__lo0bits>
 800a5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5da:	b1d0      	cbz	r0, 800a612 <__d2b+0x7e>
 800a5dc:	f1c0 0320 	rsb	r3, r0, #32
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	40c2      	lsrs	r2, r0
 800a5e8:	6163      	str	r3, [r4, #20]
 800a5ea:	9201      	str	r2, [sp, #4]
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	61a3      	str	r3, [r4, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bf0c      	ite	eq
 800a5f4:	2201      	moveq	r2, #1
 800a5f6:	2202      	movne	r2, #2
 800a5f8:	6122      	str	r2, [r4, #16]
 800a5fa:	b1a5      	cbz	r5, 800a626 <__d2b+0x92>
 800a5fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a600:	4405      	add	r5, r0
 800a602:	603d      	str	r5, [r7, #0]
 800a604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a608:	6030      	str	r0, [r6, #0]
 800a60a:	4620      	mov	r0, r4
 800a60c:	b003      	add	sp, #12
 800a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a612:	6161      	str	r1, [r4, #20]
 800a614:	e7ea      	b.n	800a5ec <__d2b+0x58>
 800a616:	a801      	add	r0, sp, #4
 800a618:	f7ff fd59 	bl	800a0ce <__lo0bits>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	6163      	str	r3, [r4, #20]
 800a620:	3020      	adds	r0, #32
 800a622:	2201      	movs	r2, #1
 800a624:	e7e8      	b.n	800a5f8 <__d2b+0x64>
 800a626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a62e:	6038      	str	r0, [r7, #0]
 800a630:	6918      	ldr	r0, [r3, #16]
 800a632:	f7ff fd2d 	bl	800a090 <__hi0bits>
 800a636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a63a:	e7e5      	b.n	800a608 <__d2b+0x74>
 800a63c:	0800afcc 	.word	0x0800afcc
 800a640:	0800afdd 	.word	0x0800afdd

0800a644 <__sfputc_r>:
 800a644:	6893      	ldr	r3, [r2, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	b410      	push	{r4}
 800a64c:	6093      	str	r3, [r2, #8]
 800a64e:	da08      	bge.n	800a662 <__sfputc_r+0x1e>
 800a650:	6994      	ldr	r4, [r2, #24]
 800a652:	42a3      	cmp	r3, r4
 800a654:	db01      	blt.n	800a65a <__sfputc_r+0x16>
 800a656:	290a      	cmp	r1, #10
 800a658:	d103      	bne.n	800a662 <__sfputc_r+0x1e>
 800a65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65e:	f000 b9df 	b.w	800aa20 <__swbuf_r>
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	1c58      	adds	r0, r3, #1
 800a666:	6010      	str	r0, [r2, #0]
 800a668:	7019      	strb	r1, [r3, #0]
 800a66a:	4608      	mov	r0, r1
 800a66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <__sfputs_r>:
 800a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	18d5      	adds	r5, r2, r3
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d101      	bne.n	800a684 <__sfputs_r+0x12>
 800a680:	2000      	movs	r0, #0
 800a682:	e007      	b.n	800a694 <__sfputs_r+0x22>
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	463a      	mov	r2, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffda 	bl	800a644 <__sfputc_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d1f3      	bne.n	800a67c <__sfputs_r+0xa>
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a698 <_vfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460d      	mov	r5, r1
 800a69e:	b09d      	sub	sp, #116	@ 0x74
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	4698      	mov	r8, r3
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b118      	cbz	r0, 800a6b0 <_vfiprintf_r+0x18>
 800a6a8:	6a03      	ldr	r3, [r0, #32]
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x18>
 800a6ac:	f7fe fbe0 	bl	8008e70 <__sinit>
 800a6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6b2:	07d9      	lsls	r1, r3, #31
 800a6b4:	d405      	bmi.n	800a6c2 <_vfiprintf_r+0x2a>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	059a      	lsls	r2, r3, #22
 800a6ba:	d402      	bmi.n	800a6c2 <_vfiprintf_r+0x2a>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6be:	f7fe fce0 	bl	8009082 <__retarget_lock_acquire_recursive>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	071b      	lsls	r3, r3, #28
 800a6c6:	d501      	bpl.n	800a6cc <_vfiprintf_r+0x34>
 800a6c8:	692b      	ldr	r3, [r5, #16]
 800a6ca:	b99b      	cbnz	r3, 800a6f4 <_vfiprintf_r+0x5c>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f9e4 	bl	800aa9c <__swsetup_r>
 800a6d4:	b170      	cbz	r0, 800a6f4 <_vfiprintf_r+0x5c>
 800a6d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6d8:	07dc      	lsls	r4, r3, #31
 800a6da:	d504      	bpl.n	800a6e6 <_vfiprintf_r+0x4e>
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	b01d      	add	sp, #116	@ 0x74
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	0598      	lsls	r0, r3, #22
 800a6ea:	d4f7      	bmi.n	800a6dc <_vfiprintf_r+0x44>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ee:	f7fe fcc9 	bl	8009084 <__retarget_lock_release_recursive>
 800a6f2:	e7f3      	b.n	800a6dc <_vfiprintf_r+0x44>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a702:	2330      	movs	r3, #48	@ 0x30
 800a704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8b4 <_vfiprintf_r+0x21c>
 800a708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a70c:	f04f 0901 	mov.w	r9, #1
 800a710:	4623      	mov	r3, r4
 800a712:	469a      	mov	sl, r3
 800a714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a718:	b10a      	cbz	r2, 800a71e <_vfiprintf_r+0x86>
 800a71a:	2a25      	cmp	r2, #37	@ 0x25
 800a71c:	d1f9      	bne.n	800a712 <_vfiprintf_r+0x7a>
 800a71e:	ebba 0b04 	subs.w	fp, sl, r4
 800a722:	d00b      	beq.n	800a73c <_vfiprintf_r+0xa4>
 800a724:	465b      	mov	r3, fp
 800a726:	4622      	mov	r2, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ffa1 	bl	800a672 <__sfputs_r>
 800a730:	3001      	adds	r0, #1
 800a732:	f000 80a7 	beq.w	800a884 <_vfiprintf_r+0x1ec>
 800a736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a738:	445a      	add	r2, fp
 800a73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a73c:	f89a 3000 	ldrb.w	r3, [sl]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 809f 	beq.w	800a884 <_vfiprintf_r+0x1ec>
 800a746:	2300      	movs	r3, #0
 800a748:	f04f 32ff 	mov.w	r2, #4294967295
 800a74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a750:	f10a 0a01 	add.w	sl, sl, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	9307      	str	r3, [sp, #28]
 800a758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a75c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a75e:	4654      	mov	r4, sl
 800a760:	2205      	movs	r2, #5
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	4853      	ldr	r0, [pc, #332]	@ (800a8b4 <_vfiprintf_r+0x21c>)
 800a768:	f7f5 fd5a 	bl	8000220 <memchr>
 800a76c:	9a04      	ldr	r2, [sp, #16]
 800a76e:	b9d8      	cbnz	r0, 800a7a8 <_vfiprintf_r+0x110>
 800a770:	06d1      	lsls	r1, r2, #27
 800a772:	bf44      	itt	mi
 800a774:	2320      	movmi	r3, #32
 800a776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a77a:	0713      	lsls	r3, r2, #28
 800a77c:	bf44      	itt	mi
 800a77e:	232b      	movmi	r3, #43	@ 0x2b
 800a780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a784:	f89a 3000 	ldrb.w	r3, [sl]
 800a788:	2b2a      	cmp	r3, #42	@ 0x2a
 800a78a:	d015      	beq.n	800a7b8 <_vfiprintf_r+0x120>
 800a78c:	9a07      	ldr	r2, [sp, #28]
 800a78e:	4654      	mov	r4, sl
 800a790:	2000      	movs	r0, #0
 800a792:	f04f 0c0a 	mov.w	ip, #10
 800a796:	4621      	mov	r1, r4
 800a798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a79c:	3b30      	subs	r3, #48	@ 0x30
 800a79e:	2b09      	cmp	r3, #9
 800a7a0:	d94b      	bls.n	800a83a <_vfiprintf_r+0x1a2>
 800a7a2:	b1b0      	cbz	r0, 800a7d2 <_vfiprintf_r+0x13a>
 800a7a4:	9207      	str	r2, [sp, #28]
 800a7a6:	e014      	b.n	800a7d2 <_vfiprintf_r+0x13a>
 800a7a8:	eba0 0308 	sub.w	r3, r0, r8
 800a7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	46a2      	mov	sl, r4
 800a7b6:	e7d2      	b.n	800a75e <_vfiprintf_r+0xc6>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	1d19      	adds	r1, r3, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	9103      	str	r1, [sp, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbb      	ittet	lt
 800a7c4:	425b      	neglt	r3, r3
 800a7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ca:	9307      	strge	r3, [sp, #28]
 800a7cc:	9307      	strlt	r3, [sp, #28]
 800a7ce:	bfb8      	it	lt
 800a7d0:	9204      	strlt	r2, [sp, #16]
 800a7d2:	7823      	ldrb	r3, [r4, #0]
 800a7d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7d6:	d10a      	bne.n	800a7ee <_vfiprintf_r+0x156>
 800a7d8:	7863      	ldrb	r3, [r4, #1]
 800a7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7dc:	d132      	bne.n	800a844 <_vfiprintf_r+0x1ac>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	1d1a      	adds	r2, r3, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	9203      	str	r2, [sp, #12]
 800a7e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7ea:	3402      	adds	r4, #2
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8c4 <_vfiprintf_r+0x22c>
 800a7f2:	7821      	ldrb	r1, [r4, #0]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f7f5 fd12 	bl	8000220 <memchr>
 800a7fc:	b138      	cbz	r0, 800a80e <_vfiprintf_r+0x176>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	eba0 000a 	sub.w	r0, r0, sl
 800a804:	2240      	movs	r2, #64	@ 0x40
 800a806:	4082      	lsls	r2, r0
 800a808:	4313      	orrs	r3, r2
 800a80a:	3401      	adds	r4, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a812:	4829      	ldr	r0, [pc, #164]	@ (800a8b8 <_vfiprintf_r+0x220>)
 800a814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a818:	2206      	movs	r2, #6
 800a81a:	f7f5 fd01 	bl	8000220 <memchr>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d03f      	beq.n	800a8a2 <_vfiprintf_r+0x20a>
 800a822:	4b26      	ldr	r3, [pc, #152]	@ (800a8bc <_vfiprintf_r+0x224>)
 800a824:	bb1b      	cbnz	r3, 800a86e <_vfiprintf_r+0x1d6>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	3307      	adds	r3, #7
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	3308      	adds	r3, #8
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a834:	443b      	add	r3, r7
 800a836:	9309      	str	r3, [sp, #36]	@ 0x24
 800a838:	e76a      	b.n	800a710 <_vfiprintf_r+0x78>
 800a83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a83e:	460c      	mov	r4, r1
 800a840:	2001      	movs	r0, #1
 800a842:	e7a8      	b.n	800a796 <_vfiprintf_r+0xfe>
 800a844:	2300      	movs	r3, #0
 800a846:	3401      	adds	r4, #1
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	4619      	mov	r1, r3
 800a84c:	f04f 0c0a 	mov.w	ip, #10
 800a850:	4620      	mov	r0, r4
 800a852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a856:	3a30      	subs	r2, #48	@ 0x30
 800a858:	2a09      	cmp	r2, #9
 800a85a:	d903      	bls.n	800a864 <_vfiprintf_r+0x1cc>
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0c6      	beq.n	800a7ee <_vfiprintf_r+0x156>
 800a860:	9105      	str	r1, [sp, #20]
 800a862:	e7c4      	b.n	800a7ee <_vfiprintf_r+0x156>
 800a864:	fb0c 2101 	mla	r1, ip, r1, r2
 800a868:	4604      	mov	r4, r0
 800a86a:	2301      	movs	r3, #1
 800a86c:	e7f0      	b.n	800a850 <_vfiprintf_r+0x1b8>
 800a86e:	ab03      	add	r3, sp, #12
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	462a      	mov	r2, r5
 800a874:	4b12      	ldr	r3, [pc, #72]	@ (800a8c0 <_vfiprintf_r+0x228>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	4630      	mov	r0, r6
 800a87a:	f7fd feb5 	bl	80085e8 <_printf_float>
 800a87e:	4607      	mov	r7, r0
 800a880:	1c78      	adds	r0, r7, #1
 800a882:	d1d6      	bne.n	800a832 <_vfiprintf_r+0x19a>
 800a884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a886:	07d9      	lsls	r1, r3, #31
 800a888:	d405      	bmi.n	800a896 <_vfiprintf_r+0x1fe>
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	059a      	lsls	r2, r3, #22
 800a88e:	d402      	bmi.n	800a896 <_vfiprintf_r+0x1fe>
 800a890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a892:	f7fe fbf7 	bl	8009084 <__retarget_lock_release_recursive>
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	065b      	lsls	r3, r3, #25
 800a89a:	f53f af1f 	bmi.w	800a6dc <_vfiprintf_r+0x44>
 800a89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8a0:	e71e      	b.n	800a6e0 <_vfiprintf_r+0x48>
 800a8a2:	ab03      	add	r3, sp, #12
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	462a      	mov	r2, r5
 800a8a8:	4b05      	ldr	r3, [pc, #20]	@ (800a8c0 <_vfiprintf_r+0x228>)
 800a8aa:	a904      	add	r1, sp, #16
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7fe f933 	bl	8008b18 <_printf_i>
 800a8b2:	e7e4      	b.n	800a87e <_vfiprintf_r+0x1e6>
 800a8b4:	0800b138 	.word	0x0800b138
 800a8b8:	0800b142 	.word	0x0800b142
 800a8bc:	080085e9 	.word	0x080085e9
 800a8c0:	0800a673 	.word	0x0800a673
 800a8c4:	0800b13e 	.word	0x0800b13e

0800a8c8 <__sflush_r>:
 800a8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	0716      	lsls	r6, r2, #28
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	d454      	bmi.n	800a982 <__sflush_r+0xba>
 800a8d8:	684b      	ldr	r3, [r1, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dc02      	bgt.n	800a8e4 <__sflush_r+0x1c>
 800a8de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dd48      	ble.n	800a976 <__sflush_r+0xae>
 800a8e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d045      	beq.n	800a976 <__sflush_r+0xae>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8f0:	682f      	ldr	r7, [r5, #0]
 800a8f2:	6a21      	ldr	r1, [r4, #32]
 800a8f4:	602b      	str	r3, [r5, #0]
 800a8f6:	d030      	beq.n	800a95a <__sflush_r+0x92>
 800a8f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	0759      	lsls	r1, r3, #29
 800a8fe:	d505      	bpl.n	800a90c <__sflush_r+0x44>
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	1ad2      	subs	r2, r2, r3
 800a904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a906:	b10b      	cbz	r3, 800a90c <__sflush_r+0x44>
 800a908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	2300      	movs	r3, #0
 800a90e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a910:	6a21      	ldr	r1, [r4, #32]
 800a912:	4628      	mov	r0, r5
 800a914:	47b0      	blx	r6
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	d106      	bne.n	800a92a <__sflush_r+0x62>
 800a91c:	6829      	ldr	r1, [r5, #0]
 800a91e:	291d      	cmp	r1, #29
 800a920:	d82b      	bhi.n	800a97a <__sflush_r+0xb2>
 800a922:	4a2a      	ldr	r2, [pc, #168]	@ (800a9cc <__sflush_r+0x104>)
 800a924:	410a      	asrs	r2, r1
 800a926:	07d6      	lsls	r6, r2, #31
 800a928:	d427      	bmi.n	800a97a <__sflush_r+0xb2>
 800a92a:	2200      	movs	r2, #0
 800a92c:	6062      	str	r2, [r4, #4]
 800a92e:	04d9      	lsls	r1, r3, #19
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	6022      	str	r2, [r4, #0]
 800a934:	d504      	bpl.n	800a940 <__sflush_r+0x78>
 800a936:	1c42      	adds	r2, r0, #1
 800a938:	d101      	bne.n	800a93e <__sflush_r+0x76>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b903      	cbnz	r3, 800a940 <__sflush_r+0x78>
 800a93e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a942:	602f      	str	r7, [r5, #0]
 800a944:	b1b9      	cbz	r1, 800a976 <__sflush_r+0xae>
 800a946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a94a:	4299      	cmp	r1, r3
 800a94c:	d002      	beq.n	800a954 <__sflush_r+0x8c>
 800a94e:	4628      	mov	r0, r5
 800a950:	f7ff f9f6 	bl	8009d40 <_free_r>
 800a954:	2300      	movs	r3, #0
 800a956:	6363      	str	r3, [r4, #52]	@ 0x34
 800a958:	e00d      	b.n	800a976 <__sflush_r+0xae>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b0      	blx	r6
 800a960:	4602      	mov	r2, r0
 800a962:	1c50      	adds	r0, r2, #1
 800a964:	d1c9      	bne.n	800a8fa <__sflush_r+0x32>
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0c6      	beq.n	800a8fa <__sflush_r+0x32>
 800a96c:	2b1d      	cmp	r3, #29
 800a96e:	d001      	beq.n	800a974 <__sflush_r+0xac>
 800a970:	2b16      	cmp	r3, #22
 800a972:	d11e      	bne.n	800a9b2 <__sflush_r+0xea>
 800a974:	602f      	str	r7, [r5, #0]
 800a976:	2000      	movs	r0, #0
 800a978:	e022      	b.n	800a9c0 <__sflush_r+0xf8>
 800a97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97e:	b21b      	sxth	r3, r3
 800a980:	e01b      	b.n	800a9ba <__sflush_r+0xf2>
 800a982:	690f      	ldr	r7, [r1, #16]
 800a984:	2f00      	cmp	r7, #0
 800a986:	d0f6      	beq.n	800a976 <__sflush_r+0xae>
 800a988:	0793      	lsls	r3, r2, #30
 800a98a:	680e      	ldr	r6, [r1, #0]
 800a98c:	bf08      	it	eq
 800a98e:	694b      	ldreq	r3, [r1, #20]
 800a990:	600f      	str	r7, [r1, #0]
 800a992:	bf18      	it	ne
 800a994:	2300      	movne	r3, #0
 800a996:	eba6 0807 	sub.w	r8, r6, r7
 800a99a:	608b      	str	r3, [r1, #8]
 800a99c:	f1b8 0f00 	cmp.w	r8, #0
 800a9a0:	dde9      	ble.n	800a976 <__sflush_r+0xae>
 800a9a2:	6a21      	ldr	r1, [r4, #32]
 800a9a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9a6:	4643      	mov	r3, r8
 800a9a8:	463a      	mov	r2, r7
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b0      	blx	r6
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	dc08      	bgt.n	800a9c4 <__sflush_r+0xfc>
 800a9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c4:	4407      	add	r7, r0
 800a9c6:	eba8 0800 	sub.w	r8, r8, r0
 800a9ca:	e7e7      	b.n	800a99c <__sflush_r+0xd4>
 800a9cc:	dfbffffe 	.word	0xdfbffffe

0800a9d0 <_fflush_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	690b      	ldr	r3, [r1, #16]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b913      	cbnz	r3, 800a9e0 <_fflush_r+0x10>
 800a9da:	2500      	movs	r5, #0
 800a9dc:	4628      	mov	r0, r5
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	b118      	cbz	r0, 800a9ea <_fflush_r+0x1a>
 800a9e2:	6a03      	ldr	r3, [r0, #32]
 800a9e4:	b90b      	cbnz	r3, 800a9ea <_fflush_r+0x1a>
 800a9e6:	f7fe fa43 	bl	8008e70 <__sinit>
 800a9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0f3      	beq.n	800a9da <_fflush_r+0xa>
 800a9f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9f4:	07d0      	lsls	r0, r2, #31
 800a9f6:	d404      	bmi.n	800aa02 <_fflush_r+0x32>
 800a9f8:	0599      	lsls	r1, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_fflush_r+0x32>
 800a9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fe:	f7fe fb40 	bl	8009082 <__retarget_lock_acquire_recursive>
 800aa02:	4628      	mov	r0, r5
 800aa04:	4621      	mov	r1, r4
 800aa06:	f7ff ff5f 	bl	800a8c8 <__sflush_r>
 800aa0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa0c:	07da      	lsls	r2, r3, #31
 800aa0e:	4605      	mov	r5, r0
 800aa10:	d4e4      	bmi.n	800a9dc <_fflush_r+0xc>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	059b      	lsls	r3, r3, #22
 800aa16:	d4e1      	bmi.n	800a9dc <_fflush_r+0xc>
 800aa18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa1a:	f7fe fb33 	bl	8009084 <__retarget_lock_release_recursive>
 800aa1e:	e7dd      	b.n	800a9dc <_fflush_r+0xc>

0800aa20 <__swbuf_r>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	460e      	mov	r6, r1
 800aa24:	4614      	mov	r4, r2
 800aa26:	4605      	mov	r5, r0
 800aa28:	b118      	cbz	r0, 800aa32 <__swbuf_r+0x12>
 800aa2a:	6a03      	ldr	r3, [r0, #32]
 800aa2c:	b90b      	cbnz	r3, 800aa32 <__swbuf_r+0x12>
 800aa2e:	f7fe fa1f 	bl	8008e70 <__sinit>
 800aa32:	69a3      	ldr	r3, [r4, #24]
 800aa34:	60a3      	str	r3, [r4, #8]
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	071a      	lsls	r2, r3, #28
 800aa3a:	d501      	bpl.n	800aa40 <__swbuf_r+0x20>
 800aa3c:	6923      	ldr	r3, [r4, #16]
 800aa3e:	b943      	cbnz	r3, 800aa52 <__swbuf_r+0x32>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f82a 	bl	800aa9c <__swsetup_r>
 800aa48:	b118      	cbz	r0, 800aa52 <__swbuf_r+0x32>
 800aa4a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa4e:	4638      	mov	r0, r7
 800aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	6922      	ldr	r2, [r4, #16]
 800aa56:	1a98      	subs	r0, r3, r2
 800aa58:	6963      	ldr	r3, [r4, #20]
 800aa5a:	b2f6      	uxtb	r6, r6
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	4637      	mov	r7, r6
 800aa60:	dc05      	bgt.n	800aa6e <__swbuf_r+0x4e>
 800aa62:	4621      	mov	r1, r4
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff ffb3 	bl	800a9d0 <_fflush_r>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d1ed      	bne.n	800aa4a <__swbuf_r+0x2a>
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	60a3      	str	r3, [r4, #8]
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	6022      	str	r2, [r4, #0]
 800aa7a:	701e      	strb	r6, [r3, #0]
 800aa7c:	6962      	ldr	r2, [r4, #20]
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d004      	beq.n	800aa8e <__swbuf_r+0x6e>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	07db      	lsls	r3, r3, #31
 800aa88:	d5e1      	bpl.n	800aa4e <__swbuf_r+0x2e>
 800aa8a:	2e0a      	cmp	r6, #10
 800aa8c:	d1df      	bne.n	800aa4e <__swbuf_r+0x2e>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f7ff ff9d 	bl	800a9d0 <_fflush_r>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d0d9      	beq.n	800aa4e <__swbuf_r+0x2e>
 800aa9a:	e7d6      	b.n	800aa4a <__swbuf_r+0x2a>

0800aa9c <__swsetup_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4b29      	ldr	r3, [pc, #164]	@ (800ab44 <__swsetup_r+0xa8>)
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	b118      	cbz	r0, 800aab0 <__swsetup_r+0x14>
 800aaa8:	6a03      	ldr	r3, [r0, #32]
 800aaaa:	b90b      	cbnz	r3, 800aab0 <__swsetup_r+0x14>
 800aaac:	f7fe f9e0 	bl	8008e70 <__sinit>
 800aab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab4:	0719      	lsls	r1, r3, #28
 800aab6:	d422      	bmi.n	800aafe <__swsetup_r+0x62>
 800aab8:	06da      	lsls	r2, r3, #27
 800aaba:	d407      	bmi.n	800aacc <__swsetup_r+0x30>
 800aabc:	2209      	movs	r2, #9
 800aabe:	602a      	str	r2, [r5, #0]
 800aac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaca:	e033      	b.n	800ab34 <__swsetup_r+0x98>
 800aacc:	0758      	lsls	r0, r3, #29
 800aace:	d512      	bpl.n	800aaf6 <__swsetup_r+0x5a>
 800aad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aad2:	b141      	cbz	r1, 800aae6 <__swsetup_r+0x4a>
 800aad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aad8:	4299      	cmp	r1, r3
 800aada:	d002      	beq.n	800aae2 <__swsetup_r+0x46>
 800aadc:	4628      	mov	r0, r5
 800aade:	f7ff f92f 	bl	8009d40 <_free_r>
 800aae2:	2300      	movs	r3, #0
 800aae4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f043 0308 	orr.w	r3, r3, #8
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	b94b      	cbnz	r3, 800ab16 <__swsetup_r+0x7a>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab0c:	d003      	beq.n	800ab16 <__swsetup_r+0x7a>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4628      	mov	r0, r5
 800ab12:	f000 f8b3 	bl	800ac7c <__smakebuf_r>
 800ab16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1a:	f013 0201 	ands.w	r2, r3, #1
 800ab1e:	d00a      	beq.n	800ab36 <__swsetup_r+0x9a>
 800ab20:	2200      	movs	r2, #0
 800ab22:	60a2      	str	r2, [r4, #8]
 800ab24:	6962      	ldr	r2, [r4, #20]
 800ab26:	4252      	negs	r2, r2
 800ab28:	61a2      	str	r2, [r4, #24]
 800ab2a:	6922      	ldr	r2, [r4, #16]
 800ab2c:	b942      	cbnz	r2, 800ab40 <__swsetup_r+0xa4>
 800ab2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab32:	d1c5      	bne.n	800aac0 <__swsetup_r+0x24>
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	0799      	lsls	r1, r3, #30
 800ab38:	bf58      	it	pl
 800ab3a:	6962      	ldrpl	r2, [r4, #20]
 800ab3c:	60a2      	str	r2, [r4, #8]
 800ab3e:	e7f4      	b.n	800ab2a <__swsetup_r+0x8e>
 800ab40:	2000      	movs	r0, #0
 800ab42:	e7f7      	b.n	800ab34 <__swsetup_r+0x98>
 800ab44:	2000001c 	.word	0x2000001c

0800ab48 <_sbrk_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d06      	ldr	r5, [pc, #24]	@ (800ab64 <_sbrk_r+0x1c>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f7 f9a6 	bl	8001ea4 <_sbrk>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_sbrk_r+0x1a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_sbrk_r+0x1a>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	20001e7c 	.word	0x20001e7c

0800ab68 <__assert_func>:
 800ab68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4b09      	ldr	r3, [pc, #36]	@ (800ab94 <__assert_func+0x2c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4605      	mov	r5, r0
 800ab74:	68d8      	ldr	r0, [r3, #12]
 800ab76:	b954      	cbnz	r4, 800ab8e <__assert_func+0x26>
 800ab78:	4b07      	ldr	r3, [pc, #28]	@ (800ab98 <__assert_func+0x30>)
 800ab7a:	461c      	mov	r4, r3
 800ab7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab80:	9100      	str	r1, [sp, #0]
 800ab82:	462b      	mov	r3, r5
 800ab84:	4905      	ldr	r1, [pc, #20]	@ (800ab9c <__assert_func+0x34>)
 800ab86:	f000 f841 	bl	800ac0c <fiprintf>
 800ab8a:	f000 f8d5 	bl	800ad38 <abort>
 800ab8e:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <__assert_func+0x38>)
 800ab90:	e7f4      	b.n	800ab7c <__assert_func+0x14>
 800ab92:	bf00      	nop
 800ab94:	2000001c 	.word	0x2000001c
 800ab98:	0800b18e 	.word	0x0800b18e
 800ab9c:	0800b160 	.word	0x0800b160
 800aba0:	0800b153 	.word	0x0800b153

0800aba4 <_calloc_r>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	fba1 5402 	umull	r5, r4, r1, r2
 800abaa:	b93c      	cbnz	r4, 800abbc <_calloc_r+0x18>
 800abac:	4629      	mov	r1, r5
 800abae:	f7ff f93b 	bl	8009e28 <_malloc_r>
 800abb2:	4606      	mov	r6, r0
 800abb4:	b928      	cbnz	r0, 800abc2 <_calloc_r+0x1e>
 800abb6:	2600      	movs	r6, #0
 800abb8:	4630      	mov	r0, r6
 800abba:	bd70      	pop	{r4, r5, r6, pc}
 800abbc:	220c      	movs	r2, #12
 800abbe:	6002      	str	r2, [r0, #0]
 800abc0:	e7f9      	b.n	800abb6 <_calloc_r+0x12>
 800abc2:	462a      	mov	r2, r5
 800abc4:	4621      	mov	r1, r4
 800abc6:	f7fe f9de 	bl	8008f86 <memset>
 800abca:	e7f5      	b.n	800abb8 <_calloc_r+0x14>

0800abcc <__ascii_mbtowc>:
 800abcc:	b082      	sub	sp, #8
 800abce:	b901      	cbnz	r1, 800abd2 <__ascii_mbtowc+0x6>
 800abd0:	a901      	add	r1, sp, #4
 800abd2:	b142      	cbz	r2, 800abe6 <__ascii_mbtowc+0x1a>
 800abd4:	b14b      	cbz	r3, 800abea <__ascii_mbtowc+0x1e>
 800abd6:	7813      	ldrb	r3, [r2, #0]
 800abd8:	600b      	str	r3, [r1, #0]
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	1e10      	subs	r0, r2, #0
 800abde:	bf18      	it	ne
 800abe0:	2001      	movne	r0, #1
 800abe2:	b002      	add	sp, #8
 800abe4:	4770      	bx	lr
 800abe6:	4610      	mov	r0, r2
 800abe8:	e7fb      	b.n	800abe2 <__ascii_mbtowc+0x16>
 800abea:	f06f 0001 	mvn.w	r0, #1
 800abee:	e7f8      	b.n	800abe2 <__ascii_mbtowc+0x16>

0800abf0 <__ascii_wctomb>:
 800abf0:	4603      	mov	r3, r0
 800abf2:	4608      	mov	r0, r1
 800abf4:	b141      	cbz	r1, 800ac08 <__ascii_wctomb+0x18>
 800abf6:	2aff      	cmp	r2, #255	@ 0xff
 800abf8:	d904      	bls.n	800ac04 <__ascii_wctomb+0x14>
 800abfa:	228a      	movs	r2, #138	@ 0x8a
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ac02:	4770      	bx	lr
 800ac04:	700a      	strb	r2, [r1, #0]
 800ac06:	2001      	movs	r0, #1
 800ac08:	4770      	bx	lr
	...

0800ac0c <fiprintf>:
 800ac0c:	b40e      	push	{r1, r2, r3}
 800ac0e:	b503      	push	{r0, r1, lr}
 800ac10:	4601      	mov	r1, r0
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	4805      	ldr	r0, [pc, #20]	@ (800ac2c <fiprintf+0x20>)
 800ac16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1a:	6800      	ldr	r0, [r0, #0]
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	f7ff fd3b 	bl	800a698 <_vfiprintf_r>
 800ac22:	b002      	add	sp, #8
 800ac24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac28:	b003      	add	sp, #12
 800ac2a:	4770      	bx	lr
 800ac2c:	2000001c 	.word	0x2000001c

0800ac30 <__swhatbuf_r>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	460c      	mov	r4, r1
 800ac34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	b096      	sub	sp, #88	@ 0x58
 800ac3c:	4615      	mov	r5, r2
 800ac3e:	461e      	mov	r6, r3
 800ac40:	da0d      	bge.n	800ac5e <__swhatbuf_r+0x2e>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac48:	f04f 0100 	mov.w	r1, #0
 800ac4c:	bf14      	ite	ne
 800ac4e:	2340      	movne	r3, #64	@ 0x40
 800ac50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac54:	2000      	movs	r0, #0
 800ac56:	6031      	str	r1, [r6, #0]
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	b016      	add	sp, #88	@ 0x58
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}
 800ac5e:	466a      	mov	r2, sp
 800ac60:	f000 f848 	bl	800acf4 <_fstat_r>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	dbec      	blt.n	800ac42 <__swhatbuf_r+0x12>
 800ac68:	9901      	ldr	r1, [sp, #4]
 800ac6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac72:	4259      	negs	r1, r3
 800ac74:	4159      	adcs	r1, r3
 800ac76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac7a:	e7eb      	b.n	800ac54 <__swhatbuf_r+0x24>

0800ac7c <__smakebuf_r>:
 800ac7c:	898b      	ldrh	r3, [r1, #12]
 800ac7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac80:	079d      	lsls	r5, r3, #30
 800ac82:	4606      	mov	r6, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	d507      	bpl.n	800ac98 <__smakebuf_r+0x1c>
 800ac88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	6123      	str	r3, [r4, #16]
 800ac90:	2301      	movs	r3, #1
 800ac92:	6163      	str	r3, [r4, #20]
 800ac94:	b003      	add	sp, #12
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	ab01      	add	r3, sp, #4
 800ac9a:	466a      	mov	r2, sp
 800ac9c:	f7ff ffc8 	bl	800ac30 <__swhatbuf_r>
 800aca0:	9f00      	ldr	r7, [sp, #0]
 800aca2:	4605      	mov	r5, r0
 800aca4:	4639      	mov	r1, r7
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7ff f8be 	bl	8009e28 <_malloc_r>
 800acac:	b948      	cbnz	r0, 800acc2 <__smakebuf_r+0x46>
 800acae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb2:	059a      	lsls	r2, r3, #22
 800acb4:	d4ee      	bmi.n	800ac94 <__smakebuf_r+0x18>
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	f043 0302 	orr.w	r3, r3, #2
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	e7e2      	b.n	800ac88 <__smakebuf_r+0xc>
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	6020      	str	r0, [r4, #0]
 800acc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acd2:	b15b      	cbz	r3, 800acec <__smakebuf_r+0x70>
 800acd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acd8:	4630      	mov	r0, r6
 800acda:	f000 f81d 	bl	800ad18 <_isatty_r>
 800acde:	b128      	cbz	r0, 800acec <__smakebuf_r+0x70>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f023 0303 	bic.w	r3, r3, #3
 800ace6:	f043 0301 	orr.w	r3, r3, #1
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	431d      	orrs	r5, r3
 800acf0:	81a5      	strh	r5, [r4, #12]
 800acf2:	e7cf      	b.n	800ac94 <__smakebuf_r+0x18>

0800acf4 <_fstat_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	@ (800ad14 <_fstat_r+0x20>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	4611      	mov	r1, r2
 800ad00:	602b      	str	r3, [r5, #0]
 800ad02:	f7f7 f8a7 	bl	8001e54 <_fstat>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d102      	bne.n	800ad10 <_fstat_r+0x1c>
 800ad0a:	682b      	ldr	r3, [r5, #0]
 800ad0c:	b103      	cbz	r3, 800ad10 <_fstat_r+0x1c>
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	bd38      	pop	{r3, r4, r5, pc}
 800ad12:	bf00      	nop
 800ad14:	20001e7c 	.word	0x20001e7c

0800ad18 <_isatty_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d06      	ldr	r5, [pc, #24]	@ (800ad34 <_isatty_r+0x1c>)
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4608      	mov	r0, r1
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	f7f7 f8a6 	bl	8001e74 <_isatty>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_isatty_r+0x1a>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_isatty_r+0x1a>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20001e7c 	.word	0x20001e7c

0800ad38 <abort>:
 800ad38:	b508      	push	{r3, lr}
 800ad3a:	2006      	movs	r0, #6
 800ad3c:	f000 f82c 	bl	800ad98 <raise>
 800ad40:	2001      	movs	r0, #1
 800ad42:	f7f7 f837 	bl	8001db4 <_exit>

0800ad46 <_raise_r>:
 800ad46:	291f      	cmp	r1, #31
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	d904      	bls.n	800ad5a <_raise_r+0x14>
 800ad50:	2316      	movs	r3, #22
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad5c:	b112      	cbz	r2, 800ad64 <_raise_r+0x1e>
 800ad5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad62:	b94b      	cbnz	r3, 800ad78 <_raise_r+0x32>
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f831 	bl	800adcc <_getpid_r>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	4628      	mov	r0, r5
 800ad70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad74:	f000 b818 	b.w	800ada8 <_kill_r>
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d00a      	beq.n	800ad92 <_raise_r+0x4c>
 800ad7c:	1c59      	adds	r1, r3, #1
 800ad7e:	d103      	bne.n	800ad88 <_raise_r+0x42>
 800ad80:	2316      	movs	r3, #22
 800ad82:	6003      	str	r3, [r0, #0]
 800ad84:	2001      	movs	r0, #1
 800ad86:	e7e7      	b.n	800ad58 <_raise_r+0x12>
 800ad88:	2100      	movs	r1, #0
 800ad8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4798      	blx	r3
 800ad92:	2000      	movs	r0, #0
 800ad94:	e7e0      	b.n	800ad58 <_raise_r+0x12>
	...

0800ad98 <raise>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <raise+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f7ff bfd2 	b.w	800ad46 <_raise_r>
 800ada2:	bf00      	nop
 800ada4:	2000001c 	.word	0x2000001c

0800ada8 <_kill_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	@ (800adc8 <_kill_r+0x20>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f7f6 ffed 	bl	8001d94 <_kill>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d102      	bne.n	800adc4 <_kill_r+0x1c>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b103      	cbz	r3, 800adc4 <_kill_r+0x1c>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20001e7c 	.word	0x20001e7c

0800adcc <_getpid_r>:
 800adcc:	f7f6 bfda 	b.w	8001d84 <_getpid>

0800add0 <_init>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	bf00      	nop
 800add4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add6:	bc08      	pop	{r3}
 800add8:	469e      	mov	lr, r3
 800adda:	4770      	bx	lr

0800addc <_fini>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr
