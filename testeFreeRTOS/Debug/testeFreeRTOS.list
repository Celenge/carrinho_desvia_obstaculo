
testeFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af48  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800b128  0800b128  0000c128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d0  0800b5d0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d0  0800b5d0  0000c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d8  0800b5d8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d8  0800b5d8  0000c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5dc  0800b5dc  0000c5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b5e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb4  200001d8  0800b7b8  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e8c  0800b7b8  0000de8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d755  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce8  00000000  00000000  0002a95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141b  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000510a  00000000  00000000  0003144b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be39  00000000  00000000  00036555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d316f  00000000  00000000  0005238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001254fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d9c  00000000  00000000  00125540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0012d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b110 	.word	0x0800b110

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800b110 	.word	0x0800b110

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ef0:	1d39      	adds	r1, r7, #4
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <__io_putchar+0x20>)
 8000efa:	f004 f837 	bl	8004f6c <HAL_UART_Transmit>

  return ch;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200001f4 	.word	0x200001f4

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f001 f95b 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f880 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fa94 	bl	8001444 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f1c:	f000 f8c8 	bl	80010b0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000f20:	f000 f910 	bl	8001144 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000f24:	f000 fa0a 	bl	800133c <MX_TIM16_Init>
  MX_TIM2_Init();
 8000f28:	f000 f9ba 	bl	80012a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f2c:	4828      	ldr	r0, [pc, #160]	@ (8000fd0 <main+0xc4>)
 8000f2e:	f002 fcdd 	bl	80038ec <HAL_TIM_Base_Start_IT>
  printf("** Teste inicial 3 %d** \n\r",count );
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <main+0xc8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4827      	ldr	r0, [pc, #156]	@ (8000fd8 <main+0xcc>)
 8000f3a:	f008 f96f 	bl	800921c <iprintf>

  /*## Start PWM signals generation #######################################*/
    /* Start channel 1 */
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <main+0xd0>)
 8000f42:	f002 fd95 	bl	8003a70 <HAL_TIM_PWM_Start>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <main+0x44>
    {
      /* PWM Generation Error */
      Error_Handler();
 8000f4c:	f000 fe3a 	bl	8001bc4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	2108      	movs	r1, #8
 8000f52:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <main+0xd0>)
 8000f54:	f002 fd8c 	bl	8003a70 <HAL_TIM_PWM_Start>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <main+0x56>
        {
          /* PWM Generation Error */
          Error_Handler();
 8000f5e:	f000 fe31 	bl	8001bc4 <Error_Handler>
        }
    if (HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <main+0xd4>)
 8000f66:	f002 fd83 	bl	8003a70 <HAL_TIM_PWM_Start>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <main+0x68>
            {
              /* PWM Generation Error */
              Error_Handler();
 8000f70:	f000 fe28 	bl	8001bc4 <Error_Handler>
            }
    TIM1-> CCR1 = 3500;   //DIREITO // 4000
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <main+0xd8>)
 8000f76:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1-> CCR3 = 3900;				// 4795
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <main+0xd8>)
 8000f7e:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f84:	f004 feb2 	bl	8005cec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <main+0xdc>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <main+0xe0>)
 8000f8e:	f004 fef7 	bl	8005d80 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <main+0xe4>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000f98:	4a16      	ldr	r2, [pc, #88]	@ (8000ff4 <main+0xe8>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4816      	ldr	r0, [pc, #88]	@ (8000ff8 <main+0xec>)
 8000f9e:	f004 feef 	bl	8005d80 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <main+0xf0>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000fa8:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <main+0xf4>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <main+0xf8>)
 8000fae:	f004 fee7 	bl	8005d80 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <main+0xfc>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000fb8:	4a14      	ldr	r2, [pc, #80]	@ (800100c <main+0x100>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4814      	ldr	r0, [pc, #80]	@ (8001010 <main+0x104>)
 8000fbe:	f004 fedf 	bl	8005d80 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <main+0x108>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f004 feb4 	bl	8005d34 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <main+0xc0>
 8000fd0:	200002d4 	.word	0x200002d4
 8000fd4:	20000384 	.word	0x20000384
 8000fd8:	0800b158 	.word	0x0800b158
 8000fdc:	20000288 	.word	0x20000288
 8000fe0:	20000320 	.word	0x20000320
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	0800b18c 	.word	0x0800b18c
 8000fec:	08001a39 	.word	0x08001a39
 8000ff0:	2000036c 	.word	0x2000036c
 8000ff4:	0800b1b0 	.word	0x0800b1b0
 8000ff8:	08001af1 	.word	0x08001af1
 8000ffc:	20000370 	.word	0x20000370
 8001000:	0800b1d4 	.word	0x0800b1d4
 8001004:	08001b1f 	.word	0x08001b1f
 8001008:	20000374 	.word	0x20000374
 800100c:	0800b1f8 	.word	0x0800b1f8
 8001010:	08001b2b 	.word	0x08001b2b
 8001014:	20000378 	.word	0x20000378

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	2238      	movs	r2, #56	@ 0x38
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 f94d 	bl	80092c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800103a:	2000      	movs	r0, #0
 800103c:	f001 fbfa 	bl	8002834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800105a:	2355      	movs	r3, #85	@ 0x55
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fc94 	bl	800299c <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107a:	f000 fda3 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2303      	movs	r3, #3
 8001084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f001 ff92 	bl	8002fc0 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a2:	f000 fd8f 	bl	8001bc4 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	@ 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <MX_LPUART1_UART_Init+0x90>)
 80010b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010f2:	4812      	ldr	r0, [pc, #72]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 80010f4:	f003 feea 	bl	8004ecc <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 fd61 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001106:	f004 fce3 	bl	8005ad0 <HAL_UARTEx_SetTxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001110:	f000 fd58 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001118:	f004 fd18 	bl	8005b4c <HAL_UARTEx_SetRxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001122:	f000 fd4f 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_LPUART1_UART_Init+0x8c>)
 8001128:	f004 fc99 	bl	8005a5e <HAL_UARTEx_DisableFifoMode>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001132:	f000 fd47 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f4 	.word	0x200001f4
 8001140:	40008000 	.word	0x40008000

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b098      	sub	sp, #96	@ 0x60
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2234      	movs	r2, #52	@ 0x34
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 f8a8 	bl	80092c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001178:	4a46      	ldr	r2, [pc, #280]	@ (8001294 <MX_TIM1_Init+0x150>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_VALUE;
 800117c:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <MX_TIM1_Init+0x154>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a46      	ldr	r2, [pc, #280]	@ (800129c <MX_TIM1_Init+0x158>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0ddb      	lsrs	r3, r3, #23
 8001188:	3b01      	subs	r3, #1
 800118a:	4a41      	ldr	r2, [pc, #260]	@ (8001290 <MX_TIM1_Init+0x14c>)
 800118c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PERIOD_VALUE;
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001196:	f241 3287 	movw	r2, #4999	@ 0x1387
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <MX_TIM1_Init+0x14c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ae:	4838      	ldr	r0, [pc, #224]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011b0:	f002 fc06 	bl	80039c0 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f000 fd03 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ce:	4619      	mov	r1, r3
 80011d0:	482f      	ldr	r0, [pc, #188]	@ (8001290 <MX_TIM1_Init+0x14c>)
 80011d2:	f003 fd27 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011dc:	f000 fcf2 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	@ 0x60
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = PULSE1_VALUE;
 80011e4:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ea:	2300      	movs	r3, #0
 80011ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4822      	ldr	r0, [pc, #136]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001208:	f002 fe82 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001212:	f000 fcd7 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.Pulse = PULSE2_VALUE;
 8001216:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	481a      	ldr	r0, [pc, #104]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001226:	f002 fe73 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001230:	f000 fcc8 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800125a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001272:	f003 fd59 	bl	8004d28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800127c:	f000 fca2 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <MX_TIM1_Init+0x14c>)
 8001282:	f000 fd7f 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 8001286:	bf00      	nop
 8001288:	3760      	adds	r7, #96	@ 0x60
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000288 	.word	0x20000288
 8001294:	40012c00 	.word	0x40012c00
 8001298:	20000000 	.word	0x20000000
 800129c:	6b5fca6b 	.word	0x6b5fca6b

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c8:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d6:	221e      	movs	r2, #30
 80012d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e6:	4814      	ldr	r0, [pc, #80]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012e8:	f002 faa8 	bl	800383c <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012f2:	f000 fc67 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001304:	f002 ff18 	bl	8004138 <HAL_TIM_ConfigClockSource>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800130e:	f000 fc59 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001320:	f003 fc80 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800132a:	f000 fc4b 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002d4 	.word	0x200002d4

0800133c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2234      	movs	r2, #52	@ 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 ffb2 	bl	80092c6 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001364:	4a34      	ldr	r2, [pc, #208]	@ (8001438 <MX_TIM16_Init+0xfc>)
 8001366:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = PRESCALER_VALUE2;
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <MX_TIM16_Init+0x100>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <MX_TIM16_Init+0x104>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0d5b      	lsrs	r3, r3, #21
 8001374:	3b01      	subs	r3, #1
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001378:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = PERIOD_VALUE2;
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001382:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001386:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800139a:	4826      	ldr	r0, [pc, #152]	@ (8001434 <MX_TIM16_Init+0xf8>)
 800139c:	f002 fa4e 	bl	800383c <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f000 fc0d 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80013aa:	4822      	ldr	r0, [pc, #136]	@ (8001434 <MX_TIM16_Init+0xf8>)
 80013ac:	f002 fb08 	bl	80039c0 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM16_Init+0x7e>
  {
    Error_Handler();
 80013b6:	f000 fc05 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ba:	2360      	movs	r3, #96	@ 0x60
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = PULSE1_VALUE2;
 80013be:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_TIM16_Init+0xf8>)
 80013e2:	f002 fd95 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM16_Init+0xb4>
  {
    Error_Handler();
 80013ec:	f000 fbea 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001408:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001418:	f003 fc86 	bl	8004d28 <HAL_TIMEx_ConfigBreakDeadTime>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM16_Init+0xea>
  {
    Error_Handler();
 8001422:	f000 fbcf 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001426:	4803      	ldr	r0, [pc, #12]	@ (8001434 <MX_TIM16_Init+0xf8>)
 8001428:	f000 fcac 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3750      	adds	r7, #80	@ 0x50
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000320 	.word	0x20000320
 8001438:	40014400 	.word	0x40014400
 800143c:	20000000 	.word	0x20000000
 8001440:	6b5fca6b 	.word	0x6b5fca6b

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b72      	ldr	r3, [pc, #456]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a71      	ldr	r2, [pc, #452]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a6b      	ldr	r2, [pc, #428]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b69      	ldr	r3, [pc, #420]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b60      	ldr	r3, [pc, #384]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001624 <MX_GPIO_Init+0x1e0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|LED_PA9_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 2132 	movw	r1, #562	@ 0x232
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c4:	f001 f986 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEBPC7_GPIO_Port, LEBPC7_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	4856      	ldr	r0, [pc, #344]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80014ce:	f001 f981 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	484f      	ldr	r0, [pc, #316]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80014ea:	f000 ffd9 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Frente_Direito_IR_Pin Frente_Esquerda_IR_Pin Direito_IR_Pin */
  GPIO_InitStruct.Pin = Frente_Direito_IR_Pin|Frente_Esquerda_IR_Pin|Direito_IR_Pin;
 80014ee:	f241 030c 	movw	r3, #4108	@ 0x100c
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014f4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4848      	ldr	r0, [pc, #288]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 8001506:	f000 ffcb 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Esquerdo_IR_Pin */
  GPIO_InitStruct.Pin = Esquerdo_IR_Pin;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800150e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Esquerdo_IR_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 ffbd 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin LED_PA9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|LED_PA9_Pin;
 8001526:	f240 2332 	movw	r3, #562	@ 0x232
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001542:	f000 ffad 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001546:	2340      	movs	r3, #64	@ 0x40
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4833      	ldr	r0, [pc, #204]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 800155a:	f000 ffa1 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEBPC7_Pin */
  GPIO_InitStruct.Pin = LEBPC7_Pin;
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEBPC7_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	482c      	ldr	r0, [pc, #176]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 8001576:	f000 ff93 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CallBack_PC10_Pin CallBack_PB7_Pin */
  GPIO_InitStruct.Pin = CallBack_PC10_Pin|CallBack_PB7_Pin;
 800157a:	23c0      	movs	r3, #192	@ 0xc0
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4827      	ldr	r0, [pc, #156]	@ (800162c <MX_GPIO_Init+0x1e8>)
 8001590:	f000 ff86 	bl	80024a0 <HAL_GPIO_Init>

  /////////////////////////////////////////
  /*Configure GPIO pins : BUZZER_PIN */
  GPIO_InitStruct.Pin = BUZZER_PIN;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f000 ff76 	bl	80024a0 <HAL_GPIO_Init>

  // Configuração do pino meta como entrada
  GPIO_InitStruct.Pin = Meta_Pin;
 80015b4:	2302      	movs	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Meta_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	@ (8001628 <MX_GPIO_Init+0x1e4>)
 80015c8:	f000 ff6a 	bl	80024a0 <HAL_GPIO_Init>
/////////////////////////////////////////////

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2105      	movs	r1, #5
 80015d0:	2006      	movs	r0, #6
 80015d2:	f000 ff2f 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015d6:	2006      	movs	r0, #6
 80015d8:	f000 ff46 	bl	8002468 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	2008      	movs	r0, #8
 80015e2:	f000 ff27 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015e6:	2008      	movs	r0, #8
 80015e8:	f000 ff3e 	bl	8002468 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2009      	movs	r0, #9
 80015f2:	f000 ff1f 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015f6:	2009      	movs	r0, #9
 80015f8:	f000 ff36 	bl	8002468 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	2017      	movs	r0, #23
 8001602:	f000 ff17 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001606:	2017      	movs	r0, #23
 8001608:	f000 ff2e 	bl	8002468 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	2028      	movs	r0, #40	@ 0x28
 8001612:	f000 ff0f 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001616:	2028      	movs	r0, #40	@ 0x28
 8001618:	f000 ff26 	bl	8002468 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000800 	.word	0x48000800
 800162c:	48000400 	.word	0x48000400

08001630 <play_tone>:


void play_tone(uint16_t frequency, uint32_t duration) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
    if (frequency == 0) {
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <play_tone+0x1a>
        HAL_Delay(duration);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 fdf8 	bl	8002238 <HAL_Delay>
        return;
 8001648:	e02c      	b.n	80016a4 <play_tone+0x74>
    }

    uint32_t period = 1000000 / frequency;
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <play_tone+0x7c>)
 800164e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001652:	613b      	str	r3, [r7, #16]
    uint32_t half_period = period / 2;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	60fb      	str	r3, [r7, #12]

    for (uint32_t i = 0; i < (duration * 1000) / period; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e016      	b.n	800168e <play_tone+0x5e>
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f001 f8b3 	bl	80027d4 <HAL_GPIO_WritePin>
        HAL_Delay(half_period);
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fde2 	bl	8002238 <HAL_Delay>
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800167a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167e:	f001 f8a9 	bl	80027d4 <HAL_GPIO_WritePin>
        HAL_Delay(half_period);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fdd8 	bl	8002238 <HAL_Delay>
    for (uint32_t i = 0; i < (duration * 1000) / period; i++) {
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001694:	fb03 f202 	mul.w	r2, r3, r2
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3dd      	bcc.n	8001660 <play_tone+0x30>
    }
}
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	000f4240 	.word	0x000f4240

080016b0 <ajustePWM>:

/* USER CODE BEGIN 4 */
void ajustePWM (void){
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <IR_esquerdo_func>:

void IR_esquerdo_func(void){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	 if((GPIOA -> IDR & GPIO_PIN_0)){ //IF STATUS PIN is HIGH
 80016c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <IR_esquerdo_func+0x18>
		// printf("\rSensor esquerdo: Livre! \r\n");
		 flagE =0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <IR_esquerdo_func+0x38>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOA -> IDR & GPIO_PIN_0)){ //IF STATUS PIN is LOW
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <IR_esquerdo_func+0x2c>
	    //	printf("\rSensor esquerdo: Parede!\r\n");
	    	flagE=1;
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <IR_esquerdo_func+0x38>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

	    }
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000038c 	.word	0x2000038c

080016fc <IR_direito_func>:

void  IR_direito_func(void){
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_12)){ //IF STATUS PIN is HIGH
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <IR_direito_func+0x34>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <IR_direito_func+0x16>
		// printf("\rSensor Direito: Livre! \r\n");
		 flagD=0;
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <IR_direito_func+0x38>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_12)){ //IF STATUS PIN is LOW
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <IR_direito_func+0x34>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <IR_direito_func+0x28>
	    //	printf("\rSensor Direito: Parede!\r\n");
	    	flagD=1;
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <IR_direito_func+0x38>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
	    }
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	48000800 	.word	0x48000800
 8001734:	20000390 	.word	0x20000390

08001738 <IR_frente_esquerda_func>:

void IR_frente_esquerda_func(void){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_3)){ //IF STATUS PIN is HIGH
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <IR_frente_esquerda_func+0x34>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <IR_frente_esquerda_func+0x16>
		 //printf("\rSensor Frente  esquerdo: Livre! \r\n");
		 flagFE = 0;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <IR_frente_esquerda_func+0x38>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_3)){ //IF STATUS PIN is LOW
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <IR_frente_esquerda_func+0x34>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <IR_frente_esquerda_func+0x28>
	    	//printf("\rSensor frente esquerdo: Parede!\r\n");
	    	flagFE = 1;
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <IR_frente_esquerda_func+0x38>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
	    }
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	48000800 	.word	0x48000800
 8001770:	20000398 	.word	0x20000398

08001774 <IR_frente_direita_func>:

void IR_frente_direita_func(void){
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	 if((GPIOC -> IDR & GPIO_PIN_2)){ //IF STATUS PIN is HIGH
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <IR_frente_direita_func+0x34>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <IR_frente_direita_func+0x16>
		 //printf("\rSensor frente direito: Livre! \r\n");
		 flagFD = 0;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <IR_frente_direita_func+0x38>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	    }
	    if(!(GPIOC -> IDR & GPIO_PIN_2)){ //IF STATUS PIN is LOW
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <IR_frente_direita_func+0x34>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <IR_frente_direita_func+0x28>
	    	//printf("\rSensor frente direito: Parede!\r\n");
	    	flagFD = 1;
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <IR_frente_direita_func+0x38>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
	    }
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	48000800 	.word	0x48000800
 80017ac:	20000394 	.word	0x20000394

080017b0 <CallBack_PC10>:

void CallBack_PC10(void) {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	count_esq = count_esq + 1;
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <CallBack_PC10+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a03      	ldr	r2, [pc, #12]	@ (80017c8 <CallBack_PC10+0x18>)
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000380 	.word	0x20000380

080017cc <CallBack_PB7>:

void CallBack_PB7(void) {
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	count_dir = count_dir + 1;
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <CallBack_PB7+0x18>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <CallBack_PB7+0x18>)
 80017d8:	6013      	str	r3, [r2, #0]

}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	2000037c 	.word	0x2000037c

080017e8 <CallBack_ExtePC13>:

void CallBack_ExtePC13(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

	fowardRobot();
 80017ec:	f000 f844 	bl	8001878 <fowardRobot>
	pedestrian = 1;
 80017f0:	4b02      	ldr	r3, [pc, #8]	@ (80017fc <CallBack_ExtePC13+0x14>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000388 	.word	0x20000388

08001800 <stopRobot>:

/**
 * @brief Para o carro, setando todos os pinos
 * @param void
 */
void stopRobot(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    // Talvez se setar todos pra ...GPIO_PIN_RESET seja melhor do que o GPIO_PIN_SET
    // Testar se der tempo

    // Roda Direita
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);    // AMARELO do carro
 8001804:	2201      	movs	r2, #1
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <stopRobot+0x38>)
 800180a:	f000 ffe3 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    // GREEN do carro
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001818:	f000 ffdc 	bl	80027d4 <HAL_GPIO_WritePin>

    // Roda Esquerda
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2102      	movs	r1, #2
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f000 ffd6 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2110      	movs	r1, #16
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f000 ffd0 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	48000800 	.word	0x48000800

0800183c <backwardsRobot>:

/**
 * @brief Faz o carro andar para trás, setando ambas as rotações como anti-horárias
 * @param void
 */
void backwardsRobot(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

    // Roda Direita
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);     // AMARELO do carro
 8001840:	2201      	movs	r2, #1
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <backwardsRobot+0x38>)
 8001846:	f000 ffc5 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);   // GREEN do carro
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f000 ffbe 	bl	80027d4 <HAL_GPIO_WritePin>

    // Roda Esquerda
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2102      	movs	r1, #2
 800185c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001860:	f000 ffb8 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186c:	f000 ffb2 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	48000800 	.word	0x48000800

08001878 <fowardRobot>:

/**
 * @brief Faz o carro andar para frente, setando ambas as rotações como horárias
 * @param void
 */
void fowardRobot(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

    // Roda Direita
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);    // AMARELO do carro
 800187c:	2200      	movs	r2, #0
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <fowardRobot+0x38>)
 8001882:	f000 ffa7 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);      // GREEN do carro
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800188c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001890:	f000 ffa0 	bl	80027d4 <HAL_GPIO_WritePin>

    // Roda Esquerda
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f000 ff9a 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2110      	movs	r1, #16
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f000 ff94 	bl	80027d4 <HAL_GPIO_WritePin>

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	48000800 	.word	0x48000800

080018b4 <disableIRs>:

/**
 * @brief Desabilita todos os IRQs
 * @param void
 */
void disableIRs(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80018b8:	2028      	movs	r0, #40	@ 0x28
 80018ba:	f000 fde3 	bl	8002484 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80018be:	2008      	movs	r0, #8
 80018c0:	f000 fde0 	bl	8002484 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80018c4:	2009      	movs	r0, #9
 80018c6:	f000 fddd 	bl	8002484 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80018ca:	2006      	movs	r0, #6
 80018cc:	f000 fdda 	bl	8002484 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80018d0:	2007      	movs	r0, #7
 80018d2:	f000 fdd7 	bl	8002484 <HAL_NVIC_DisableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}

080018da <enableIRs>:

/**
 * @brief Habilita todos os IRQs
 * @param void
 */
void enableIRs(void) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018de:	2028      	movs	r0, #40	@ 0x28
 80018e0:	f000 fdc2 	bl	8002468 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018e4:	2008      	movs	r0, #8
 80018e6:	f000 fdbf 	bl	8002468 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018ea:	2009      	movs	r0, #9
 80018ec:	f000 fdbc 	bl	8002468 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018f0:	2006      	movs	r0, #6
 80018f2:	f000 fdb9 	bl	8002468 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 fdb6 	bl	8002468 <HAL_NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <vira_direita>:
 * @brief Faz o carro virar para a direita enquanto "parado" no mesmo lugar.
 * Ativa a roda direita como horária e a roda esquerda como anti-horária, realizando o
 * movimento por x segundos.
 * @param segundos float - tempo em segundos que o veículo vai rotacionar
 */
void vira_direita(float segundos) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]
    // Desabilita os IRQs
	disableIRs();
 800190a:	f7ff ffd3 	bl	80018b4 <disableIRs>

    // Seta a roda direita
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	4816      	ldr	r0, [pc, #88]	@ (800196c <vira_direita+0x6c>)
 8001914:	f000 ff5e 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001922:	f000 ff57 	bl	80027d4 <HAL_GPIO_WritePin>
    // Seta a roda esquerda
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2102      	movs	r1, #2
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f000 ff51 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2110      	movs	r1, #16
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f000 ff4b 	bl	80027d4 <HAL_GPIO_WritePin>

	float tempoTotal = 100 * segundos;
 800193e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001942:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001970 <vira_direita+0x70>
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Se movimenta no estado atual por x segundos
	osDelay(tempoTotal);
 800194e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 0a90 	vmov	r0, s15
 800195a:	f004 faa3 	bl	8005ea4 <osDelay>

    // Habilita os IRQs
	enableIRs();
 800195e:	f7ff ffbc 	bl	80018da <enableIRs>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	48000800 	.word	0x48000800
 8001970:	42c80000 	.word	0x42c80000

08001974 <vira_esquerda>:
 * @brief Faz o carro virar para a esquerda enquanto "parado" no mesmo lugar.
 * Ativa a roda direita como anti-horária e a roda esquerda como horária, realizando o
 * movimento por x segundos.
 * @param segundos float - tempo em segundos que o veículo vai rotacionar
 */
void vira_esquerda(float segundos) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Desabilita os IRQs
	disableIRs();
 800197e:	f7ff ff99 	bl	80018b4 <disableIRs>

    // Seta a roda direita
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	4816      	ldr	r0, [pc, #88]	@ (80019e0 <vira_esquerda+0x6c>)
 8001988:	f000 ff24 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f000 ff1d 	bl	80027d4 <HAL_GPIO_WritePin>
    // Seta a roda esquerda
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	2102      	movs	r1, #2
 800199e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a2:	f000 ff17 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2110      	movs	r1, #16
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ae:	f000 ff11 	bl	80027d4 <HAL_GPIO_WritePin>

	float tempoTotal = 100 * segundos;
 80019b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80019e4 <vira_esquerda+0x70>
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	edc7 7a03 	vstr	s15, [r7, #12]

    // Se movimenta no estado atual por x segundos
	osDelay(tempoTotal);
 80019c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ca:	ee17 0a90 	vmov	r0, s15
 80019ce:	f004 fa69 	bl	8005ea4 <osDelay>

    // Habilita os IRQs
	enableIRs();
 80019d2:	f7ff ff82 	bl	80018da <enableIRs>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	48000800 	.word	0x48000800
 80019e4:	42c80000 	.word	0x42c80000

080019e8 <verifica_vira_esquerda>:

/**
 * @brief Verifica se há algum obstáculo na esquerda e se sim, faz o veículo virar para a direita.
 * @param segundos float - tempo em segundos que o veículo vai rotacionar
 */
void verifica_vira_esquerda(float segundos) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
	if (flagE == 1) {
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <verifica_vira_esquerda+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d103      	bne.n	8001a02 <verifica_vira_esquerda+0x1a>
        // Vira para a direita, por x segundos
		vira_direita(segundos);
 80019fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80019fe:	f7ff ff7f 	bl	8001900 <vira_direita>
	}
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000038c 	.word	0x2000038c

08001a10 <verifica_vira_direita>:

/**
 * @brief Verifica se há algum obstáculo na direita e se sim, faz o veículo virar para a esquerda.
 * @param segundos float - tempo em segundos que o veículo vai rotacionar
 */
void verifica_vira_direita(float segundos) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	ed87 0a01 	vstr	s0, [r7, #4]
	if (flagD == 1) {
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <verifica_vira_direita+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <verifica_vira_direita+0x1a>
        // Vira para a esquerda, por x segundos
		vira_esquerda(segundos);
 8001a22:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a26:	f7ff ffa5 	bl	8001974 <vira_esquerda>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000390 	.word	0x20000390

08001a38 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	// Espera os 5 segundos iniciais
	osDelay(500);
 8001a40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a44:	f004 fa2e 	bl	8005ea4 <osDelay>

	for(;;)
  {
		if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_SET){
 8001a48:	2102      	movs	r1, #2
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 feaa 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d13a      	bne.n	8001acc <StartDefaultTask+0x94>
		// Para o carro e espera 3 segundos
		stopRobot();
 8001a56:	f7ff fed3 	bl	8001800 <stopRobot>
		osDelay(300);
 8001a5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a5e:	f004 fa21 	bl	8005ea4 <osDelay>

        // Verifica se há algum obstáculo na frente do carro
		if (flagFE) {
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <StartDefaultTask+0xb0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d020      	beq.n	8001aac <StartDefaultTask+0x74>
            //vira_direita(0.05);

            // Se há obstáculo, faz as verificações de rotacionar para a direita e esquerda
			verifica_vira_direita(0.05);
 8001a6a:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001aec <StartDefaultTask+0xb4>
 8001a6e:	f7ff ffcf 	bl	8001a10 <verifica_vira_direita>
			verifica_vira_esquerda(0.05);
 8001a72:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001aec <StartDefaultTask+0xb4>
 8001a76:	f7ff ffb7 	bl	80019e8 <verifica_vira_esquerda>

            // Aguarda 1 segundo
			osDelay(100);
 8001a7a:	2064      	movs	r0, #100	@ 0x64
 8001a7c:	f004 fa12 	bl	8005ea4 <osDelay>

            // Verifica novamente se existe algum obstáculo na frente do carro
			if (flagFE) {
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <StartDefaultTask+0xb0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <StartDefaultTask+0x68>
                // Se sim, faz o carro andar para trás e aguardar 1 segundo
				backwardsRobot();
 8001a88:	f7ff fed8 	bl	800183c <backwardsRobot>
				osDelay(100);
 8001a8c:	2064      	movs	r0, #100	@ 0x64
 8001a8e:	f004 fa09 	bl	8005ea4 <osDelay>

                // Verifica então se o carro pode virar para a direita, e aguarda novamente 1 segundo
				verifica_vira_direita(0.05);
 8001a92:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001aec <StartDefaultTask+0xb4>
 8001a96:	f7ff ffbb 	bl	8001a10 <verifica_vira_direita>
				osDelay(100);
 8001a9a:	2064      	movs	r0, #100	@ 0x64
 8001a9c:	f004 fa02 	bl	8005ea4 <osDelay>
			}

            // Faz o carro andar para frente, e aguarda 3 segundos
			fowardRobot();
 8001aa0:	f7ff feea 	bl	8001878 <fowardRobot>
			osDelay(100);
 8001aa4:	2064      	movs	r0, #100	@ 0x64
 8001aa6:	f004 f9fd 	bl	8005ea4 <osDelay>
 8001aaa:	e00f      	b.n	8001acc <StartDefaultTask+0x94>
		} else {
            // Faz as verificações de rotacionar para a direita e esquerda, e aguarda 1 segundo
			verifica_vira_direita(0.05);
 8001aac:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001aec <StartDefaultTask+0xb4>
 8001ab0:	f7ff ffae 	bl	8001a10 <verifica_vira_direita>
			verifica_vira_esquerda(0.05);
 8001ab4:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001aec <StartDefaultTask+0xb4>
 8001ab8:	f7ff ff96 	bl	80019e8 <verifica_vira_esquerda>
			osDelay(100);
 8001abc:	2064      	movs	r0, #100	@ 0x64
 8001abe:	f004 f9f1 	bl	8005ea4 <osDelay>

            // Faz o robô andar para frente, e aguarda 1 segundo
			fowardRobot();
 8001ac2:	f7ff fed9 	bl	8001878 <fowardRobot>
			osDelay(100);
 8001ac6:	2064      	movs	r0, #100	@ 0x64
 8001ac8:	f004 f9ec 	bl	8005ea4 <osDelay>
		}
		}

	 if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_RESET){
 8001acc:	2102      	movs	r1, #2
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f000 fe68 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1b6      	bne.n	8001a48 <StartDefaultTask+0x10>

		 osDelay(100);
 8001ada:	2064      	movs	r0, #100	@ 0x64
 8001adc:	f004 f9e2 	bl	8005ea4 <osDelay>
		 stopRobot();
 8001ae0:	f7ff fe8e 	bl	8001800 <stopRobot>
		if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_SET){
 8001ae4:	e7b0      	b.n	8001a48 <StartDefaultTask+0x10>
 8001ae6:	bf00      	nop
 8001ae8:	20000398 	.word	0x20000398
 8001aec:	3d4ccccd 	.word	0x3d4ccccd

08001af0 <StartTask02>:
*/
/* USER CODE END Header_StartTask02 */


void StartTask02(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]


	 if (HAL_GPIO_ReadPin(Meta_Pin, Meta_Pin) == GPIO_PIN_RESET) {
 8001af8:	2102      	movs	r1, #2
 8001afa:	2002      	movs	r0, #2
 8001afc:	f000 fe52 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <StartTask02+0x20>
	            // Move o carrinho por 0.5 segundos
		 	 play_tone(NOTE_A4, 5);
 8001b06:	2105      	movs	r1, #5
 8001b08:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8001b0c:	f7ff fd90 	bl	8001630 <play_tone>
	        }
	        HAL_Delay(100);  // Pequeno atraso para evitar leituras contínuas
 8001b10:	2064      	movs	r0, #100	@ 0x64
 8001b12:	f000 fb91 	bl	8002238 <HAL_Delay>
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5);
 8001b16:	2005      	movs	r0, #5
 8001b18:	f004 f9c4 	bl	8005ea4 <osDelay>
 8001b1c:	e7fb      	b.n	8001b16 <StartTask02+0x26>

08001b1e <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;){
 8001b26:	bf00      	nop
 8001b28:	e7fd      	b.n	8001b26 <StartTask03+0x8>

08001b2a <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  /* Infinite loop */
  for(;;){
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <StartTask04+0x8>
	...

08001b38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x16>
		ajustePWM();
 8001b4a:	f7ff fdb1 	bl	80016b0 <ajustePWM>
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001b58:	f000 fb50 	bl	80021fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40000400 	.word	0x40000400

08001b68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if ( GPIO_Pin == CallBack_PC10_Pin){
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b40      	cmp	r3, #64	@ 0x40
 8001b76:	d101      	bne.n	8001b7c <HAL_GPIO_EXTI_Callback+0x14>
	  CallBack_PC10();
 8001b78:	f7ff fe1a 	bl	80017b0 <CallBack_PC10>
  }
  if ( GPIO_Pin == CallBack_PB7_Pin ){
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	2b80      	cmp	r3, #128	@ 0x80
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_EXTI_Callback+0x1e>
  	  CallBack_PB7();
 8001b82:	f7ff fe23 	bl	80017cc <CallBack_PB7>
    }
  if ( GPIO_Pin == B1_Pin){
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_EXTI_Callback+0x2a>
  	  CallBack_ExtePC13();
 8001b8e:	f7ff fe2b 	bl	80017e8 <CallBack_ExtePC13>
    }
  if (GPIO_Pin== Esquerdo_IR_Pin){
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_EXTI_Callback+0x34>
	  IR_esquerdo_func();
 8001b98:	f7ff fd92 	bl	80016c0 <IR_esquerdo_func>
  }
  if (GPIO_Pin== Direito_IR_Pin){
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x40>
  	  IR_direito_func();
 8001ba4:	f7ff fdaa 	bl	80016fc <IR_direito_func>
    }
  if (GPIO_Pin== Frente_Esquerda_IR_Pin){
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_EXTI_Callback+0x4a>
  	  IR_frente_esquerda_func();
 8001bae:	f7ff fdc3 	bl	8001738 <IR_frente_esquerda_func>
    }
  if (GPIO_Pin== Frente_Direito_IR_Pin){
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d101      	bne.n	8001bbc <HAL_GPIO_EXTI_Callback+0x54>
	  IR_frente_direita_func();
 8001bb8:	f7ff fddc 	bl	8001774 <IR_frente_direita_func>
    }

}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <Error_Handler+0x8>

08001bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_MspInit+0x50>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bda:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <HAL_MspInit+0x50>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_MspInit+0x50>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_MspInit+0x50>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <HAL_MspInit+0x50>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_MspInit+0x50>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f000 fc11 	bl	8002434 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c12:	f000 feb3 	bl	800297c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09a      	sub	sp, #104	@ 0x68
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2244      	movs	r2, #68	@ 0x44
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f007 fb3e 	bl	80092c6 <memset>
  if(huart->Instance==LPUART1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ccc <HAL_UART_MspInit+0xa8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d136      	bne.n	8001cc2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c54:	2320      	movs	r3, #32
 8001c56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fbfb 	bl	800345c <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c6c:	f7ff ffaa 	bl	8001bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8c:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_UART_MspInit+0xac>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbe:	f000 fbef 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3768      	adds	r7, #104	@ 0x68
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40008000 	.word	0x40008000
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x38>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d10b      	bne.n	8001cfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40012c00 	.word	0x40012c00
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d24:	d114      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	4a14      	ldr	r2, [pc, #80]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	201c      	movs	r0, #28
 8001d44:	f000 fb76 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d48:	201c      	movs	r0, #28
 8001d4a:	f000 fb8d 	bl	8002468 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d4e:	e010      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d66:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40014400 	.word	0x40014400

08001d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <HAL_TIM_MspPostInit+0xac>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11e      	bne.n	8001de4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001dbe:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dde:	f000 fb5f 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001de2:	e021      	b.n	8001e28 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a13      	ldr	r2, [pc, #76]	@ (8001e38 <HAL_TIM_MspPostInit+0xb4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d11c      	bne.n	8001e28 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_TIM_MspPostInit+0xb0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e06:	2340      	movs	r3, #64	@ 0x40
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001e16:	2301      	movs	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e24:	f000 fb3c 	bl	80024a0 <HAL_GPIO_Init>
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40014400 	.word	0x40014400

08001e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <HAL_InitTick+0xc4>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a2b      	ldr	r2, [pc, #172]	@ (8001f00 <HAL_InitTick+0xc4>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e58:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <HAL_InitTick+0xc4>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e64:	f107 020c 	add.w	r2, r7, #12
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fa7c 	bl	800336c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e74:	f001 fa4e 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8001e78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_InitTick+0xc8>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	3b01      	subs	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001e8a:	4a20      	ldr	r2, [pc, #128]	@ (8001f0c <HAL_InitTick+0xd0>)
 8001e8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001e90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e94:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim3);
 8001ea8:	4817      	ldr	r0, [pc, #92]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001eaa:	f001 fcc7 	bl	800383c <HAL_TIM_Base_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11b      	bne.n	8001ef4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001ebc:	4812      	ldr	r0, [pc, #72]	@ (8001f08 <HAL_InitTick+0xcc>)
 8001ebe:	f001 fd15 	bl	80038ec <HAL_TIM_Base_Start_IT>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f000 fac9 	bl	8002468 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d808      	bhi.n	8001eee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	201d      	movs	r0, #29
 8001ee2:	f000 faa7 	bl	8002434 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_InitTick+0xd4>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e002      	b.n	8001ef4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3730      	adds	r7, #48	@ 0x30
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	431bde83 	.word	0x431bde83
 8001f08:	2000039c 	.word	0x2000039c
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	20000004 	.word	0x20000004

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <NMI_Handler+0x4>

08001f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Esquerdo_IR_Pin);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f000 fc58 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Frente_Direito_IR_Pin);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f000 fc51 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Frente_Esquerda_IR_Pin);
 8001f6a:	2008      	movs	r0, #8
 8001f6c:	f000 fc4a 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CallBack_PC10_Pin);
 8001f78:	2040      	movs	r0, #64	@ 0x40
 8001f7a:	f000 fc43 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CallBack_PB7_Pin);
 8001f7e:	2080      	movs	r0, #128	@ 0x80
 8001f80:	f000 fc40 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <TIM2_IRQHandler+0x10>)
 8001f8e:	f001 fe6f 	bl	8003c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002d4 	.word	0x200002d4

08001f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM3_IRQHandler+0x10>)
 8001fa2:	f001 fe65 	bl	8003c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000039c 	.word	0x2000039c

08001fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Direito_IR_Pin);
 8001fb4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001fb8:	f000 fc24 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fc0:	f000 fc20 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_kill>:

int _kill(int pid, int sig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fe2:	f007 f9c3 	bl	800936c <__errno>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2216      	movs	r2, #22
 8001fea:	601a      	str	r2, [r3, #0]
  return -1;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_exit>:

void _exit (int status)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffe7 	bl	8001fd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800200a:	bf00      	nop
 800200c:	e7fd      	b.n	800200a <_exit+0x12>

0800200e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e00a      	b.n	8002036 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002020:	f3af 8000 	nop.w
 8002024:	4601      	mov	r1, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	dbf0      	blt.n	8002020 <_read+0x12>
  }

  return len;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e009      	b.n	800206e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	60ba      	str	r2, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe ff40 	bl	8000ee8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf1      	blt.n	800205a <_write+0x12>
  }
  return len;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_close>:

int _close(int file)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a8:	605a      	str	r2, [r3, #4]
  return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_isatty>:

int _isatty(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f007 f928 	bl	800936c <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20008000 	.word	0x20008000
 8002148:	00000400 	.word	0x00000400
 800214c:	200003e8 	.word	0x200003e8
 8002150:	20001e90 	.word	0x20001e90

08002154 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800217c:	f7ff ffea 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopForever+0xe>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopForever+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f007 f8e7 	bl	8009378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021aa:	f7fe feaf 	bl	8000f0c <main>

080021ae <LoopForever>:

LoopForever:
    b LoopForever
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
  ldr   r0, =_estack
 80021b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021bc:	0800b5e0 	.word	0x0800b5e0
  ldr r2, =_sbss
 80021c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021c4:	20001e8c 	.word	0x20001e8c

080021c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>

080021ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f922 	bl	800241e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021da:	200f      	movs	r0, #15
 80021dc:	f7ff fe2e 	bl	8001e3c <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	e001      	b.n	80021f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ec:	f7ff fcf0 	bl	8001bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f0:	79fb      	ldrb	r3, [r7, #7]

}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_IncTick+0x1c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_IncTick+0x20>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4413      	add	r3, r2
 800220a:	4a03      	ldr	r2, [pc, #12]	@ (8002218 <HAL_IncTick+0x1c>)
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	200003ec 	.word	0x200003ec
 800221c:	20000008 	.word	0x20000008

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200003ec 	.word	0x200003ec

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d004      	beq.n	800225c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_Delay+0x40>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225c:	bf00      	nop
 800225e:	f7ff ffdf 	bl	8002220 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	429a      	cmp	r2, r3
 800226c:	d8f7      	bhi.n	800225e <HAL_Delay+0x26>
  {
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000008 	.word	0x20000008

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db12      	blt.n	8002354 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	490a      	ldr	r1, [pc, #40]	@ (8002360 <__NVIC_DisableIRQ+0x44>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	3320      	adds	r3, #32
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002348:	f3bf 8f4f 	dsb	sy
}
 800234c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800234e:	f3bf 8f6f 	isb	sy
}
 8002352:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff28 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002442:	f7ff ff3f 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002446:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	6978      	ldr	r0, [r7, #20]
 800244e:	f7ff ffb3 	bl	80023b8 <NVIC_EncodePriority>
 8002452:	4602      	mov	r2, r0
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff82 	bl	8002364 <__NVIC_SetPriority>
}
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff32 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff42 	bl	800231c <__NVIC_DisableIRQ>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024ae:	e15a      	b.n	8002766 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 814c 	beq.w	8002760 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d005      	beq.n	80024e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d130      	bne.n	8002542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002516:	2201      	movs	r2, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 0201 	and.w	r2, r3, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b03      	cmp	r3, #3
 800254c:	d017      	beq.n	800257e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d123      	bne.n	80025d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	6939      	ldr	r1, [r7, #16]
 80025ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0203 	and.w	r2, r3, #3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80a6 	beq.w	8002760 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002614:	4b5b      	ldr	r3, [pc, #364]	@ (8002784 <HAL_GPIO_Init+0x2e4>)
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	4a5a      	ldr	r2, [pc, #360]	@ (8002784 <HAL_GPIO_Init+0x2e4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002620:	4b58      	ldr	r3, [pc, #352]	@ (8002784 <HAL_GPIO_Init+0x2e4>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262c:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <HAL_GPIO_Init+0x2e8>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002656:	d01f      	beq.n	8002698 <HAL_GPIO_Init+0x1f8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a4c      	ldr	r2, [pc, #304]	@ (800278c <HAL_GPIO_Init+0x2ec>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d019      	beq.n	8002694 <HAL_GPIO_Init+0x1f4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a4b      	ldr	r2, [pc, #300]	@ (8002790 <HAL_GPIO_Init+0x2f0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_Init+0x1f0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_GPIO_Init+0x2f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_Init+0x1ec>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a49      	ldr	r2, [pc, #292]	@ (8002798 <HAL_GPIO_Init+0x2f8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x1e8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a48      	ldr	r2, [pc, #288]	@ (800279c <HAL_GPIO_Init+0x2fc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002680:	2305      	movs	r3, #5
 8002682:	e00a      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 8002684:	2306      	movs	r3, #6
 8002686:	e008      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 8002688:	2304      	movs	r3, #4
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 800268c:	2303      	movs	r3, #3
 800268e:	e004      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_Init+0x1fa>
 8002698:	2300      	movs	r3, #0
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026aa:	4937      	ldr	r1, [pc, #220]	@ (8002788 <HAL_GPIO_Init+0x2e8>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b8:	4b39      	ldr	r3, [pc, #228]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026dc:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026e2:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002706:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800270c:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002730:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002736:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f ae9d 	bne.w	80024b0 <HAL_GPIO_Init+0x10>
  }
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	48000400 	.word	0x48000400
 8002790:	48000800 	.word	0x48000800
 8002794:	48000c00 	.word	0x48000c00
 8002798:	48001000 	.word	0x48001000
 800279c:	48001400 	.word	0x48001400
 80027a0:	40010400 	.word	0x40010400

080027a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281a:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f9a0 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d141      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002842:	4b4b      	ldr	r3, [pc, #300]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284e:	d131      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002850:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002856:	4a46      	ldr	r2, [pc, #280]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800285c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002860:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002868:	4a41      	ldr	r2, [pc, #260]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800286e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002870:	4b40      	ldr	r3, [pc, #256]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2232      	movs	r2, #50	@ 0x32
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a3f      	ldr	r2, [pc, #252]	@ (8002978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	3301      	adds	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002886:	e002      	b.n	800288e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288e:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289a:	d102      	bne.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f2      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a2:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ae:	d158      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e057      	b.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028c4:	e04d      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028cc:	d141      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ce:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d131      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e2:	4a23      	ldr	r2, [pc, #140]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2232      	movs	r2, #50	@ 0x32
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002912:	e002      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3b01      	subs	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002926:	d102      	bne.n	800292e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f2      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293a:	d112      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e011      	b.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002950:	e007      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40007000 	.word	0x40007000
 8002974:	20000000 	.word	0x20000000
 8002978:	431bde83 	.word	0x431bde83

0800297c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40007000 	.word	0x40007000

0800299c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e2fe      	b.n	8002fac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d075      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b97      	ldr	r3, [pc, #604]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c4:	4b94      	ldr	r3, [pc, #592]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0x3e>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_OscConfig+0x44>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d10b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d05b      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x108>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d157      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e2d9      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x74>
 8002a02:	4b85      	ldr	r3, [pc, #532]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a84      	ldr	r2, [pc, #528]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e01d      	b.n	8002a4c <HAL_RCC_OscConfig+0xb0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x98>
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b7c      	ldr	r3, [pc, #496]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0xb0>
 8002a34:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a77      	ldr	r2, [pc, #476]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b75      	ldr	r3, [pc, #468]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff fbe4 	bl	8002220 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff fbe0 	bl	8002220 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e29e      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0xc0>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbd0 	bl	8002220 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff fbcc 	bl	8002220 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e28a      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	4b60      	ldr	r3, [pc, #384]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0xe8>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b59      	ldr	r3, [pc, #356]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002abc:	4b56      	ldr	r3, [pc, #344]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x136>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x13c>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11f      	bne.n	8002b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_OscConfig+0x154>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e25d      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b49      	ldr	r3, [pc, #292]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4946      	ldr	r1, [pc, #280]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b04:	4b45      	ldr	r3, [pc, #276]	@ (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f997 	bl	8001e3c <HAL_InitTick>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d043      	beq.n	8002b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e249      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d023      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b20:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3c      	ldr	r2, [pc, #240]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fb78 	bl	8002220 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fb74 	bl	8002220 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e232      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b31      	ldr	r3, [pc, #196]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	492d      	ldr	r1, [pc, #180]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	e01a      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b68:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fb54 	bl	8002220 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fb50 	bl	8002220 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e20e      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8e:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e0>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d041      	beq.n	8002c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01c      	beq.n	8002bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb8:	4a17      	ldr	r2, [pc, #92]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7ff fb2d 	bl	8002220 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7ff fb29 	bl	8002220 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1e7      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ef      	beq.n	8002bca <HAL_RCC_OscConfig+0x22e>
 8002bea:	e020      	b.n	8002c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf2:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7ff fb10 	bl	8002220 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c02:	e00d      	b.n	8002c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7ff fb0c 	bl	8002220 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d906      	bls.n	8002c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1ca      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c20:	4b8c      	ldr	r3, [pc, #560]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1ea      	bne.n	8002c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a6 	beq.w	8002d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c40:	4b84      	ldr	r3, [pc, #528]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2b4>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x2b6>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b7f      	ldr	r3, [pc, #508]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c62:	4b7c      	ldr	r3, [pc, #496]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c72:	4b79      	ldr	r3, [pc, #484]	@ (8002e58 <HAL_RCC_OscConfig+0x4bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7e:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_OscConfig+0x4bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	@ (8002e58 <HAL_RCC_OscConfig+0x4bc>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7ff fac9 	bl	8002220 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7ff fac5 	bl	8002220 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e183      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e58 <HAL_RCC_OscConfig+0x4bc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_RCC_OscConfig+0x32e>
 8002cb8:	4b66      	ldr	r3, [pc, #408]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	4a65      	ldr	r2, [pc, #404]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc8:	e024      	b.n	8002d14 <HAL_RCC_OscConfig+0x378>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d110      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x358>
 8002cd2:	4b60      	ldr	r3, [pc, #384]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf2:	e00f      	b.n	8002d14 <HAL_RCC_OscConfig+0x378>
 8002cf4:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0a:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d016      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7ff fa80 	bl	8002220 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff fa7c 	bl	8002220 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e138      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3a:	4b46      	ldr	r3, [pc, #280]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ed      	beq.n	8002d24 <HAL_RCC_OscConfig+0x388>
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fa69 	bl	8002220 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7ff fa65 	bl	8002220 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e121      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d68:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ed      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	4a34      	ldr	r2, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d03c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7ff fa38 	bl	8002220 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db4:	f7ff fa34 	bl	8002220 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0f2      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dc6:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <HAL_RCC_OscConfig+0x418>
 8002dd4:	e01b      	b.n	8002e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7ff fa1b 	bl	8002220 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dee:	f7ff fa17 	bl	8002220 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0d5      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ef      	bne.n	8002dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80c9 	beq.w	8002faa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	f000 8083 	beq.w	8002f2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d15e      	bne.n	8002eec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a08      	ldr	r2, [pc, #32]	@ (8002e54 <HAL_RCC_OscConfig+0x4b8>)
 8002e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f9f1 	bl	8002220 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	e00c      	b.n	8002e5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff f9ed 	bl	8002220 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d905      	bls.n	8002e5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0ab      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	4b55      	ldr	r3, [pc, #340]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ec      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b52      	ldr	r3, [pc, #328]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <HAL_RCC_OscConfig+0x61c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6a11      	ldr	r1, [r2, #32]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	4311      	orrs	r1, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e82:	0212      	lsls	r2, r2, #8
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0552      	lsls	r2, r2, #21
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ea2:	06d2      	lsls	r2, r2, #27
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	4943      	ldr	r1, [pc, #268]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b41      	ldr	r3, [pc, #260]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a40      	ldr	r2, [pc, #256]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f9ac 	bl	8002220 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7ff f9a8 	bl	8002220 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e066      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x530>
 8002eea:	e05e      	b.n	8002faa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7ff f992 	bl	8002220 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7ff f98e 	bl	8002220 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04c      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f12:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f1e:	4b25      	ldr	r3, [pc, #148]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	4924      	ldr	r1, [pc, #144]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_OscConfig+0x620>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60cb      	str	r3, [r1, #12]
 8002f2a:	e03e      	b.n	8002faa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e039      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <HAL_RCC_OscConfig+0x618>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d12c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	3b01      	subs	r3, #1
 8002f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d123      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d113      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	019f800c 	.word	0x019f800c
 8002fbc:	feeefffc 	.word	0xfeeefffc

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e11e      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b91      	ldr	r3, [pc, #580]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	498c      	ldr	r1, [pc, #560]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e106      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d073      	beq.n	80030fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d129      	bne.n	8003070 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301c:	4b81      	ldr	r3, [pc, #516]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0f4      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800302c:	f000 f9d0 	bl	80033d0 <RCC_GetSysClockFreqFromPLLSource>
 8003030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a7c      	ldr	r2, [pc, #496]	@ (8003228 <HAL_RCC_ClockConfig+0x268>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d93f      	bls.n	80030ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800303a:	4b7a      	ldr	r3, [pc, #488]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d033      	beq.n	80030ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003056:	2b00      	cmp	r3, #0
 8003058:	d12f      	bne.n	80030ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800305a:	4b72      	ldr	r3, [pc, #456]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003062:	4a70      	ldr	r2, [pc, #448]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 8003064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003068:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e024      	b.n	80030ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003078:	4b6a      	ldr	r3, [pc, #424]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0c6      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	4b66      	ldr	r3, [pc, #408]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0be      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003098:	f000 f8ce 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 800309c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4a61      	ldr	r2, [pc, #388]	@ (8003228 <HAL_RCC_ClockConfig+0x268>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d909      	bls.n	80030ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4957      	ldr	r1, [pc, #348]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7ff f8a8 	bl	8002220 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7ff f8a4 	bl	8002220 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e095      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d023      	beq.n	8003150 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b43      	ldr	r3, [pc, #268]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a42      	ldr	r2, [pc, #264]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800311e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800312c:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003134:	4a3b      	ldr	r2, [pc, #236]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 8003136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800313a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b39      	ldr	r3, [pc, #228]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4936      	ldr	r1, [pc, #216]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
 800314e:	e008      	b.n	8003162 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d105      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003156:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4a32      	ldr	r2, [pc, #200]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 800315c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003160:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d21d      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 020f 	bic.w	r2, r3, #15
 8003178:	4929      	ldr	r1, [pc, #164]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003180:	f7ff f84e 	bl	8002220 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7ff f84a 	bl	8002220 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e03b      	b.n	8003216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ed      	bne.n	8003188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4917      	ldr	r1, [pc, #92]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d6:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490f      	ldr	r1, [pc, #60]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ea:	f000 f825 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <HAL_RCC_ClockConfig+0x264>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490c      	ldr	r1, [pc, #48]	@ (800322c <HAL_RCC_ClockConfig+0x26c>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x270>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_RCC_ClockConfig+0x274>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fe14 	bl	8001e3c <HAL_InitTick>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	04c4b400 	.word	0x04c4b400
 800322c:	0800b21c 	.word	0x0800b21c
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800323e:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d102      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800324a:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e047      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003250:	4b27      	ldr	r3, [pc, #156]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d102      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e03e      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003262:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d136      	bne.n	80032dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3301      	adds	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d10c      	bne.n	80032a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800328c:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003296:	68d2      	ldr	r2, [r2, #12]
 8003298:	0a12      	lsrs	r2, r2, #8
 800329a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
      break;
 80032a4:	e00c      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032a6:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4a10      	ldr	r2, [pc, #64]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b0:	68d2      	ldr	r2, [r2, #12]
 80032b2:	0a12      	lsrs	r2, r2, #8
 80032b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
      break;
 80032be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0e5b      	lsrs	r3, r3, #25
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e001      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032e0:	693b      	ldr	r3, [r7, #16]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	016e3600 	.word	0x016e3600

080032fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4904      	ldr	r1, [pc, #16]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x28>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	0800b22c 	.word	0x0800b22c

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003344:	f7ff ffda 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0adb      	lsrs	r3, r3, #11
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4904      	ldr	r1, [pc, #16]	@ (8003368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	0800b22c 	.word	0x0800b22c

0800336c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	220f      	movs	r2, #15
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800337c:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003388:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033a0:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033ae:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_RCC_GetClockConfig+0x60>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40022000 	.word	0x40022000

080033d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d10c      	bne.n	800340e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033fe:	68d2      	ldr	r2, [r2, #12]
 8003400:	0a12      	lsrs	r2, r2, #8
 8003402:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
    break;
 800340c:	e00c      	b.n	8003428 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4a0e      	ldr	r2, [pc, #56]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	0a12      	lsrs	r2, r2, #8
 800341c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    break;
 8003426:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0e5b      	lsrs	r3, r3, #25
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	3301      	adds	r3, #1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003442:	687b      	ldr	r3, [r7, #4]
}
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40021000 	.word	0x40021000
 8003454:	016e3600 	.word	0x016e3600
 8003458:	00f42400 	.word	0x00f42400

0800345c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003464:	2300      	movs	r3, #0
 8003466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003468:	2300      	movs	r3, #0
 800346a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8098 	beq.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b43      	ldr	r3, [pc, #268]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b40      	ldr	r3, [pc, #256]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a3f      	ldr	r2, [pc, #252]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a39      	ldr	r2, [pc, #228]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b2:	f7fe feb5 	bl	8002220 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034b8:	e009      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe feb1 	bl	8002220 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d902      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	74fb      	strb	r3, [r7, #19]
        break;
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ce:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ef      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d159      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034e0:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d019      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034fc:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003508:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	4a1f      	ldr	r2, [pc, #124]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003518:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003528:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe fe71 	bl	8002220 <HAL_GetTick>
 800353e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003540:	e00b      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fe6d 	bl	8002220 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d902      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	74fb      	strb	r3, [r7, #19]
            break;
 8003558:	e006      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355a:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ec      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4903      	ldr	r1, [pc, #12]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	74bb      	strb	r3, [r7, #18]
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800358c:	40021000 	.word	0x40021000
 8003590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003598:	7c7b      	ldrb	r3, [r7, #17]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4ba6      	ldr	r3, [pc, #664]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	4aa5      	ldr	r2, [pc, #660]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f023 0203 	bic.w	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	499c      	ldr	r1, [pc, #624]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d8:	4b97      	ldr	r3, [pc, #604]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f023 020c 	bic.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4994      	ldr	r1, [pc, #592]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	498b      	ldr	r1, [pc, #556]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800361c:	4b86      	ldr	r3, [pc, #536]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	4983      	ldr	r1, [pc, #524]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800363e:	4b7e      	ldr	r3, [pc, #504]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	497a      	ldr	r1, [pc, #488]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003660:	4b75      	ldr	r3, [pc, #468]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4972      	ldr	r1, [pc, #456]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003682:	4b6d      	ldr	r3, [pc, #436]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4969      	ldr	r1, [pc, #420]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036a4:	4b64      	ldr	r3, [pc, #400]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4961      	ldr	r1, [pc, #388]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	4958      	ldr	r1, [pc, #352]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	4950      	ldr	r1, [pc, #320]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003706:	d105      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a4a      	ldr	r2, [pc, #296]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003712:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	4942      	ldr	r1, [pc, #264]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a3c      	ldr	r2, [pc, #240]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003758:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4934      	ldr	r1, [pc, #208]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003776:	d105      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003778:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a2e      	ldr	r2, [pc, #184]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003782:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d015      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003790:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379e:	4926      	ldr	r1, [pc, #152]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b0:	4b21      	ldr	r3, [pc, #132]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a20      	ldr	r2, [pc, #128]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	4918      	ldr	r1, [pc, #96]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003800:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	490a      	ldr	r1, [pc, #40]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800381e:	d105      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800382c:	7cbb      	ldrb	r3, [r7, #18]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e049      	b.n	80038e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe fa56 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fd7e 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d001      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e04a      	b.n	800399a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a21      	ldr	r2, [pc, #132]	@ (80039a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x6c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d013      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x6c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x6c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x6c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1a      	ldr	r2, [pc, #104]	@ (80039b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a19      	ldr	r2, [pc, #100]	@ (80039b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d115      	bne.n	8003984 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <HAL_TIM_Base_Start_IT+0xd0>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b06      	cmp	r3, #6
 8003968:	d015      	beq.n	8003996 <HAL_TIM_Base_Start_IT+0xaa>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d011      	beq.n	8003996 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	e008      	b.n	8003996 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e000      	b.n	8003998 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	00010007 	.word	0x00010007

080039c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e049      	b.n	8003a66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe f974 	bl	8001cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fcbc 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_PWM_Start+0x24>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e03c      	b.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d109      	bne.n	8003aae <HAL_TIM_PWM_Start+0x3e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e02f      	b.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0x58>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e022      	b.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d109      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x72>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e015      	b.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x8c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e008      	b.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e097      	b.n	8003c46 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_PWM_Start+0xb6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b24:	e023      	b.n	8003b6e <HAL_TIM_PWM_Start+0xfe>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_PWM_Start+0xc6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b34:	e01b      	b.n	8003b6e <HAL_TIM_PWM_Start+0xfe>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d104      	bne.n	8003b46 <HAL_TIM_PWM_Start+0xd6>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b44:	e013      	b.n	8003b6e <HAL_TIM_PWM_Start+0xfe>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b0c      	cmp	r3, #12
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_PWM_Start+0xe6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b54:	e00b      	b.n	8003b6e <HAL_TIM_PWM_Start+0xfe>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xf6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b64:	e003      	b.n	8003b6e <HAL_TIM_PWM_Start+0xfe>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f82e 	bl	8004bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a33      	ldr	r2, [pc, #204]	@ (8003c50 <HAL_TIM_PWM_Start+0x1e0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_TIM_PWM_Start+0x13e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a32      	ldr	r2, [pc, #200]	@ (8003c54 <HAL_TIM_PWM_Start+0x1e4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_TIM_PWM_Start+0x13e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a30      	ldr	r2, [pc, #192]	@ (8003c58 <HAL_TIM_PWM_Start+0x1e8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIM_PWM_Start+0x13e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c5c <HAL_TIM_PWM_Start+0x1ec>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_PWM_Start+0x13e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <HAL_TIM_PWM_Start+0x1f0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x142>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_PWM_Start+0x144>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a20      	ldr	r2, [pc, #128]	@ (8003c50 <HAL_TIM_PWM_Start+0x1e0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x194>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bda:	d013      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x194>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a20      	ldr	r2, [pc, #128]	@ (8003c64 <HAL_TIM_PWM_Start+0x1f4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x194>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1f      	ldr	r2, [pc, #124]	@ (8003c68 <HAL_TIM_PWM_Start+0x1f8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x194>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_TIM_PWM_Start+0x1e4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x194>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <HAL_TIM_PWM_Start+0x1e8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d115      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <HAL_TIM_PWM_Start+0x1fc>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d015      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x1d2>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1c:	d011      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	e008      	b.n	8003c42 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40013400 	.word	0x40013400
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	00010007 	.word	0x00010007

08003c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d020      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01b      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0202 	mvn.w	r2, #2
 8003ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb40 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fb32 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fb43 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d020      	beq.n	8003d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0204 	mvn.w	r2, #4
 8003cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fb1a 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fb0c 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb1d 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d020      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01b      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0208 	mvn.w	r2, #8
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2204      	movs	r2, #4
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 faf4 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fae6 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 faf7 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 face 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fac0 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fad1 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0201 	mvn.w	r2, #1
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd feae 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f001 f825 	bl	8004e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f001 f81d 	bl	8004e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fa8b 	bl	8004368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0220 	mvn.w	r2, #32
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 ffe5 	bl	8004e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fff1 	bl	8004e7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 ffe9 	bl	8004e90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 ffe1 	bl	8004ea4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00c      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 ffd9 	bl	8004eb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0ff      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b14      	cmp	r3, #20
 8003f3a:	f200 80f0 	bhi.w	800411e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	0800411f 	.word	0x0800411f
 8003f4c:	0800411f 	.word	0x0800411f
 8003f50:	0800411f 	.word	0x0800411f
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	0800411f 	.word	0x0800411f
 8003f5c:	0800411f 	.word	0x0800411f
 8003f60:	0800411f 	.word	0x0800411f
 8003f64:	0800401b 	.word	0x0800401b
 8003f68:	0800411f 	.word	0x0800411f
 8003f6c:	0800411f 	.word	0x0800411f
 8003f70:	0800411f 	.word	0x0800411f
 8003f74:	0800405b 	.word	0x0800405b
 8003f78:	0800411f 	.word	0x0800411f
 8003f7c:	0800411f 	.word	0x0800411f
 8003f80:	0800411f 	.word	0x0800411f
 8003f84:	0800409d 	.word	0x0800409d
 8003f88:	0800411f 	.word	0x0800411f
 8003f8c:	0800411f 	.word	0x0800411f
 8003f90:	0800411f 	.word	0x0800411f
 8003f94:	080040dd 	.word	0x080040dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa88 	bl	80044b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
      break;
 8003fd6:	e0a5      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 faf8 	bl	80045d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	619a      	str	r2, [r3, #24]
      break;
 8004018:	e084      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fb61 	bl	80046e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	61da      	str	r2, [r3, #28]
      break;
 8004058:	e064      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fbc9 	bl	80047f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	61da      	str	r2, [r3, #28]
      break;
 800409a:	e043      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fc32 	bl	800490c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80040da:	e023      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fc76 	bl	80049d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004106:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800411c:	e002      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      break;
 8004122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIM_ConfigClockSource+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e0de      	b.n	8004312 <HAL_TIM_ConfigClockSource+0x1da>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004172:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a63      	ldr	r2, [pc, #396]	@ (800431c <HAL_TIM_ConfigClockSource+0x1e4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	f000 80a9 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004194:	4a61      	ldr	r2, [pc, #388]	@ (800431c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	f200 80ae 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 800419c:	4a60      	ldr	r2, [pc, #384]	@ (8004320 <HAL_TIM_ConfigClockSource+0x1e8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	f000 80a1 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80041a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004320 <HAL_TIM_ConfigClockSource+0x1e8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	f200 80a6 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f000 8099 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80041b4:	4a5b      	ldr	r2, [pc, #364]	@ (8004324 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f200 809e 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004328 <HAL_TIM_ConfigClockSource+0x1f0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f000 8091 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80041c4:	4a58      	ldr	r2, [pc, #352]	@ (8004328 <HAL_TIM_ConfigClockSource+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	f200 8096 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80041d0:	f000 8089 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80041d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80041d8:	f200 808e 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e0:	d03e      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x128>
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e6:	f200 8087 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ee:	f000 8086 	beq.w	80042fe <HAL_TIM_ConfigClockSource+0x1c6>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f6:	d87f      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80041f8:	2b70      	cmp	r3, #112	@ 0x70
 80041fa:	d01a      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0xfa>
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d87b      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004200:	2b60      	cmp	r3, #96	@ 0x60
 8004202:	d050      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x16e>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d877      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004208:	2b50      	cmp	r3, #80	@ 0x50
 800420a:	d03c      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x14e>
 800420c:	2b50      	cmp	r3, #80	@ 0x50
 800420e:	d873      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d058      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x18e>
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d86f      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d064      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800421c:	2b30      	cmp	r3, #48	@ 0x30
 800421e:	d86b      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d060      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d867      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800422c:	2b10      	cmp	r3, #16
 800422e:	d05a      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004230:	e062      	b.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004242:	f000 fca9 	bl	8004b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	609a      	str	r2, [r3, #8]
      break;
 800425e:	e04f      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004270:	f000 fc92 	bl	8004b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004282:	609a      	str	r2, [r3, #8]
      break;
 8004284:	e03c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fc04 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2150      	movs	r1, #80	@ 0x50
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fc5d 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80042a4:	e02c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 fc23 	bl	8004afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2160      	movs	r1, #96	@ 0x60
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc4d 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80042c4:	e01c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 fbe4 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2140      	movs	r1, #64	@ 0x40
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fc3d 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80042e4:	e00c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f000 fc34 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80042f6:	e003      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e000      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80042fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	00100070 	.word	0x00100070
 8004320:	00100040 	.word	0x00100040
 8004324:	00100030 	.word	0x00100030
 8004328:	00100020 	.word	0x00100020

0800432c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a42      	ldr	r2, [pc, #264]	@ (8004498 <TIM_Base_SetConfig+0x11c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x38>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x38>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <TIM_Base_SetConfig+0x120>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <TIM_Base_SetConfig+0x124>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x38>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	@ (80044a4 <TIM_Base_SetConfig+0x128>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <TIM_Base_SetConfig+0x11c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01b      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d4:	d017      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a30      	ldr	r2, [pc, #192]	@ (800449c <TIM_Base_SetConfig+0x120>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <TIM_Base_SetConfig+0x124>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <TIM_Base_SetConfig+0x128>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_Base_SetConfig+0x8a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2b      	ldr	r2, [pc, #172]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	@ (8004498 <TIM_Base_SetConfig+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0xe8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <TIM_Base_SetConfig+0x128>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0xe8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0xe8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0xe8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	611a      	str	r2, [r3, #16]
  }
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40013400 	.word	0x40013400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0201 	bic.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 0302 	bic.w	r3, r3, #2
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <TIM_OC1_SetConfig+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00f      	beq.n	8004534 <TIM_OC1_SetConfig+0x80>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <TIM_OC1_SetConfig+0x110>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_OC1_SetConfig+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a2a      	ldr	r2, [pc, #168]	@ (80045c8 <TIM_OC1_SetConfig+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_OC1_SetConfig+0x80>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a29      	ldr	r2, [pc, #164]	@ (80045cc <TIM_OC1_SetConfig+0x118>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC1_SetConfig+0x80>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a28      	ldr	r2, [pc, #160]	@ (80045d0 <TIM_OC1_SetConfig+0x11c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10c      	bne.n	800454e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0308 	bic.w	r3, r3, #8
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <TIM_OC1_SetConfig+0x10c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_OC1_SetConfig+0xc2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1a      	ldr	r2, [pc, #104]	@ (80045c4 <TIM_OC1_SetConfig+0x110>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_OC1_SetConfig+0xc2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <TIM_OC1_SetConfig+0x114>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_OC1_SetConfig+0xc2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a18      	ldr	r2, [pc, #96]	@ (80045cc <TIM_OC1_SetConfig+0x118>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_OC1_SetConfig+0xc2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a17      	ldr	r2, [pc, #92]	@ (80045d0 <TIM_OC1_SetConfig+0x11c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800457c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0210 	bic.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0320 	bic.w	r3, r3, #32
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a28      	ldr	r2, [pc, #160]	@ (80046d4 <TIM_OC2_SetConfig+0x100>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC2_SetConfig+0x6c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <TIM_OC2_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <TIM_OC2_SetConfig+0x100>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_OC2_SetConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <TIM_OC2_SetConfig+0x104>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC2_SetConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <TIM_OC2_SetConfig+0x108>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC2_SetConfig+0xb0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1a      	ldr	r2, [pc, #104]	@ (80046e0 <TIM_OC2_SetConfig+0x10c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC2_SetConfig+0xb0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <TIM_OC2_SetConfig+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800468a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <TIM_OC3_SetConfig+0xfc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x6a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a26      	ldr	r2, [pc, #152]	@ (80047e8 <TIM_OC3_SetConfig+0x100>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <TIM_OC3_SetConfig+0xfc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_OC3_SetConfig+0xae>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <TIM_OC3_SetConfig+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_OC3_SetConfig+0xae>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <TIM_OC3_SetConfig+0x104>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_OC3_SetConfig+0xae>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a19      	ldr	r2, [pc, #100]	@ (80047f0 <TIM_OC3_SetConfig+0x108>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_OC3_SetConfig+0xae>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <TIM_OC3_SetConfig+0x10c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d113      	bne.n	80047be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800479c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800

080047f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a28      	ldr	r2, [pc, #160]	@ (80048f8 <TIM_OC4_SetConfig+0x100>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC4_SetConfig+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a27      	ldr	r2, [pc, #156]	@ (80048fc <TIM_OC4_SetConfig+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10d      	bne.n	8004880 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800486a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800487e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <TIM_OC4_SetConfig+0x100>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00f      	beq.n	80048a8 <TIM_OC4_SetConfig+0xb0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <TIM_OC4_SetConfig+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <TIM_OC4_SetConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1b      	ldr	r2, [pc, #108]	@ (8004900 <TIM_OC4_SetConfig+0x108>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <TIM_OC4_SetConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <TIM_OC4_SetConfig+0x10c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC4_SetConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <TIM_OC4_SetConfig+0x110>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d113      	bne.n	80048d0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	019b      	lsls	r3, r3, #6
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40013400 	.word	0x40013400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800493a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <TIM_OC5_SetConfig+0xb4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_OC5_SetConfig+0x7a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <TIM_OC5_SetConfig+0xb8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_OC5_SetConfig+0x7a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <TIM_OC5_SetConfig+0xbc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_OC5_SetConfig+0x7a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a14      	ldr	r2, [pc, #80]	@ (80049cc <TIM_OC5_SetConfig+0xc0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC5_SetConfig+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a13      	ldr	r2, [pc, #76]	@ (80049d0 <TIM_OC5_SetConfig+0xc4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d109      	bne.n	800499a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	621a      	str	r2, [r3, #32]
}
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40013400 	.word	0x40013400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	051b      	lsls	r3, r3, #20
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a18      	ldr	r2, [pc, #96]	@ (8004a8c <TIM_OC6_SetConfig+0xb8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_OC6_SetConfig+0x7c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <TIM_OC6_SetConfig+0xbc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC6_SetConfig+0x7c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a16      	ldr	r2, [pc, #88]	@ (8004a94 <TIM_OC6_SetConfig+0xc0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC6_SetConfig+0x7c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a15      	ldr	r2, [pc, #84]	@ (8004a98 <TIM_OC6_SetConfig+0xc4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC6_SetConfig+0x7c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <TIM_OC6_SetConfig+0xc8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40013400 	.word	0x40013400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	40014800 	.word	0x40014800

08004aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 030a 	bic.w	r3, r3, #10
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f023 0210 	bic.w	r2, r3, #16
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2201      	movs	r2, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e065      	b.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb2:	d013      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a17      	ldr	r2, [pc, #92]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10c      	bne.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40013400 	.word	0x40013400
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40014000 	.word	0x40014000

08004d28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e073      	b.n	8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d11c      	bne.n	8004e1a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	051b      	lsls	r3, r3, #20
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400

08004e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e042      	b.n	8004f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fc fe97 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	@ 0x24
 8004efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb82 	bl	8005620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8b3 	bl	8005088 <UART_SetConfig>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e01b      	b.n	8004f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fc01 	bl	8005764 <UART_CheckIdleState>
 8004f62:	4603      	mov	r3, r0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	@ 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d17b      	bne.n	800507e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_UART_Transmit+0x26>
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e074      	b.n	8005080 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2221      	movs	r2, #33	@ 0x21
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa6:	f7fd f93b 	bl	8002220 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc4:	d108      	bne.n	8004fd8 <HAL_UART_Transmit+0x6c>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e003      	b.n	8004fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe0:	e030      	b.n	8005044 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2180      	movs	r1, #128	@ 0x80
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fc63 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e03d      	b.n	8005080 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005018:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3302      	adds	r3, #2
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e007      	b.n	8005032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1c8      	bne.n	8004fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fc2c 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800508c:	b08c      	sub	sp, #48	@ 0x30
 800508e:	af00      	add	r7, sp, #0
 8005090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4bab      	ldr	r3, [pc, #684]	@ (8005364 <UART_SetConfig+0x2dc>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4aa0      	ldr	r2, [pc, #640]	@ (8005368 <UART_SetConfig+0x2e0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80050fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005108:	430b      	orrs	r3, r1
 800510a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	f023 010f 	bic.w	r1, r3, #15
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a91      	ldr	r2, [pc, #580]	@ (800536c <UART_SetConfig+0x2e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d125      	bne.n	8005178 <UART_SetConfig+0xf0>
 800512c:	4b90      	ldr	r3, [pc, #576]	@ (8005370 <UART_SetConfig+0x2e8>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d81a      	bhi.n	8005170 <UART_SetConfig+0xe8>
 800513a:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <UART_SetConfig+0xb8>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005151 	.word	0x08005151
 8005144:	08005161 	.word	0x08005161
 8005148:	08005159 	.word	0x08005159
 800514c:	08005169 	.word	0x08005169
 8005150:	2301      	movs	r3, #1
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e0d6      	b.n	8005306 <UART_SetConfig+0x27e>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515e:	e0d2      	b.n	8005306 <UART_SetConfig+0x27e>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005166:	e0ce      	b.n	8005306 <UART_SetConfig+0x27e>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e0ca      	b.n	8005306 <UART_SetConfig+0x27e>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e0c6      	b.n	8005306 <UART_SetConfig+0x27e>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a7d      	ldr	r2, [pc, #500]	@ (8005374 <UART_SetConfig+0x2ec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d138      	bne.n	80051f4 <UART_SetConfig+0x16c>
 8005182:	4b7b      	ldr	r3, [pc, #492]	@ (8005370 <UART_SetConfig+0x2e8>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d82d      	bhi.n	80051ec <UART_SetConfig+0x164>
 8005190:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <UART_SetConfig+0x110>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051cd 	.word	0x080051cd
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080051ed 	.word	0x080051ed
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051dd 	.word	0x080051dd
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051ed 	.word	0x080051ed
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051e5 	.word	0x080051e5
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e098      	b.n	8005306 <UART_SetConfig+0x27e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e094      	b.n	8005306 <UART_SetConfig+0x27e>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e090      	b.n	8005306 <UART_SetConfig+0x27e>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e08c      	b.n	8005306 <UART_SetConfig+0x27e>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f2:	e088      	b.n	8005306 <UART_SetConfig+0x27e>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5f      	ldr	r2, [pc, #380]	@ (8005378 <UART_SetConfig+0x2f0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d125      	bne.n	800524a <UART_SetConfig+0x1c2>
 80051fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005370 <UART_SetConfig+0x2e8>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005204:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005208:	2b30      	cmp	r3, #48	@ 0x30
 800520a:	d016      	beq.n	800523a <UART_SetConfig+0x1b2>
 800520c:	2b30      	cmp	r3, #48	@ 0x30
 800520e:	d818      	bhi.n	8005242 <UART_SetConfig+0x1ba>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d00a      	beq.n	800522a <UART_SetConfig+0x1a2>
 8005214:	2b20      	cmp	r3, #32
 8005216:	d814      	bhi.n	8005242 <UART_SetConfig+0x1ba>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <UART_SetConfig+0x19a>
 800521c:	2b10      	cmp	r3, #16
 800521e:	d008      	beq.n	8005232 <UART_SetConfig+0x1aa>
 8005220:	e00f      	b.n	8005242 <UART_SetConfig+0x1ba>
 8005222:	2300      	movs	r3, #0
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005228:	e06d      	b.n	8005306 <UART_SetConfig+0x27e>
 800522a:	2302      	movs	r3, #2
 800522c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005230:	e069      	b.n	8005306 <UART_SetConfig+0x27e>
 8005232:	2304      	movs	r3, #4
 8005234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005238:	e065      	b.n	8005306 <UART_SetConfig+0x27e>
 800523a:	2308      	movs	r3, #8
 800523c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005240:	e061      	b.n	8005306 <UART_SetConfig+0x27e>
 8005242:	2310      	movs	r3, #16
 8005244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005248:	e05d      	b.n	8005306 <UART_SetConfig+0x27e>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4b      	ldr	r2, [pc, #300]	@ (800537c <UART_SetConfig+0x2f4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d125      	bne.n	80052a0 <UART_SetConfig+0x218>
 8005254:	4b46      	ldr	r3, [pc, #280]	@ (8005370 <UART_SetConfig+0x2e8>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800525e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005260:	d016      	beq.n	8005290 <UART_SetConfig+0x208>
 8005262:	2bc0      	cmp	r3, #192	@ 0xc0
 8005264:	d818      	bhi.n	8005298 <UART_SetConfig+0x210>
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d00a      	beq.n	8005280 <UART_SetConfig+0x1f8>
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d814      	bhi.n	8005298 <UART_SetConfig+0x210>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <UART_SetConfig+0x1f0>
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d008      	beq.n	8005288 <UART_SetConfig+0x200>
 8005276:	e00f      	b.n	8005298 <UART_SetConfig+0x210>
 8005278:	2300      	movs	r3, #0
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527e:	e042      	b.n	8005306 <UART_SetConfig+0x27e>
 8005280:	2302      	movs	r3, #2
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005286:	e03e      	b.n	8005306 <UART_SetConfig+0x27e>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528e:	e03a      	b.n	8005306 <UART_SetConfig+0x27e>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005296:	e036      	b.n	8005306 <UART_SetConfig+0x27e>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529e:	e032      	b.n	8005306 <UART_SetConfig+0x27e>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a30      	ldr	r2, [pc, #192]	@ (8005368 <UART_SetConfig+0x2e0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d12a      	bne.n	8005300 <UART_SetConfig+0x278>
 80052aa:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <UART_SetConfig+0x2e8>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b8:	d01a      	beq.n	80052f0 <UART_SetConfig+0x268>
 80052ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052be:	d81b      	bhi.n	80052f8 <UART_SetConfig+0x270>
 80052c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c4:	d00c      	beq.n	80052e0 <UART_SetConfig+0x258>
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ca:	d815      	bhi.n	80052f8 <UART_SetConfig+0x270>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <UART_SetConfig+0x250>
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d4:	d008      	beq.n	80052e8 <UART_SetConfig+0x260>
 80052d6:	e00f      	b.n	80052f8 <UART_SetConfig+0x270>
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e012      	b.n	8005306 <UART_SetConfig+0x27e>
 80052e0:	2302      	movs	r3, #2
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e00e      	b.n	8005306 <UART_SetConfig+0x27e>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e00a      	b.n	8005306 <UART_SetConfig+0x27e>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e006      	b.n	8005306 <UART_SetConfig+0x27e>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e002      	b.n	8005306 <UART_SetConfig+0x27e>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <UART_SetConfig+0x2e0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	f040 80a8 	bne.w	8005462 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005312:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005316:	2b08      	cmp	r3, #8
 8005318:	d834      	bhi.n	8005384 <UART_SetConfig+0x2fc>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0x298>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005345 	.word	0x08005345
 8005324:	08005385 	.word	0x08005385
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005385 	.word	0x08005385
 8005330:	08005353 	.word	0x08005353
 8005334:	08005385 	.word	0x08005385
 8005338:	08005385 	.word	0x08005385
 800533c:	08005385 	.word	0x08005385
 8005340:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7fd ffe6 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800534a:	e021      	b.n	8005390 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <UART_SetConfig+0x2f8>)
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005350:	e01e      	b.n	8005390 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fd ff71 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8005356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005358:	e01a      	b.n	8005390 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005360:	e016      	b.n	8005390 <UART_SetConfig+0x308>
 8005362:	bf00      	nop
 8005364:	cfff69f3 	.word	0xcfff69f3
 8005368:	40008000 	.word	0x40008000
 800536c:	40013800 	.word	0x40013800
 8005370:	40021000 	.word	0x40021000
 8005374:	40004400 	.word	0x40004400
 8005378:	40004800 	.word	0x40004800
 800537c:	40004c00 	.word	0x40004c00
 8005380:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800538e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 812a 	beq.w	80055ec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	4a9e      	ldr	r2, [pc, #632]	@ (8005618 <UART_SetConfig+0x590>)
 800539e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d305      	bcc.n	80053c8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d903      	bls.n	80053d0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053ce:	e10d      	b.n	80055ec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	60fa      	str	r2, [r7, #12]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005618 <UART_SetConfig+0x590>)
 80053de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2200      	movs	r2, #0
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053f2:	f7fb fc01 	bl	8000bf8 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	020b      	lsls	r3, r1, #8
 8005408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800540c:	0202      	lsls	r2, r0, #8
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	6849      	ldr	r1, [r1, #4]
 8005412:	0849      	lsrs	r1, r1, #1
 8005414:	2000      	movs	r0, #0
 8005416:	460c      	mov	r4, r1
 8005418:	4605      	mov	r5, r0
 800541a:	eb12 0804 	adds.w	r8, r2, r4
 800541e:	eb43 0905 	adc.w	r9, r3, r5
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	469a      	mov	sl, r3
 800542a:	4693      	mov	fp, r2
 800542c:	4652      	mov	r2, sl
 800542e:	465b      	mov	r3, fp
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb fbe0 	bl	8000bf8 <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4613      	mov	r3, r2
 800543e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005446:	d308      	bcc.n	800545a <UART_SetConfig+0x3d2>
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544e:	d204      	bcs.n	800545a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	e0c8      	b.n	80055ec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005460:	e0c4      	b.n	80055ec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800546a:	d167      	bne.n	800553c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800546c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005470:	2b08      	cmp	r3, #8
 8005472:	d828      	bhi.n	80054c6 <UART_SetConfig+0x43e>
 8005474:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <UART_SetConfig+0x3f4>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	080054c7 	.word	0x080054c7
 800548c:	080054b7 	.word	0x080054b7
 8005490:	080054c7 	.word	0x080054c7
 8005494:	080054c7 	.word	0x080054c7
 8005498:	080054c7 	.word	0x080054c7
 800549c:	080054bf 	.word	0x080054bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a0:	f7fd ff38 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054a6:	e014      	b.n	80054d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fd ff4a 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80054ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ae:	e010      	b.n	80054d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b0:	4b5a      	ldr	r3, [pc, #360]	@ (800561c <UART_SetConfig+0x594>)
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054b4:	e00d      	b.n	80054d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b6:	f7fd febf 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80054ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054bc:	e009      	b.n	80054d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054c4:	e005      	b.n	80054d2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8089 	beq.w	80055ec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	4a4e      	ldr	r2, [pc, #312]	@ (8005618 <UART_SetConfig+0x590>)
 80054e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ec:	005a      	lsls	r2, r3, #1
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	441a      	add	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b0f      	cmp	r3, #15
 8005504:	d916      	bls.n	8005534 <UART_SetConfig+0x4ac>
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800550c:	d212      	bcs.n	8005534 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f023 030f 	bic.w	r3, r3, #15
 8005516:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	b29a      	uxth	r2, r3
 8005524:	8bfb      	ldrh	r3, [r7, #30]
 8005526:	4313      	orrs	r3, r2
 8005528:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	8bfa      	ldrh	r2, [r7, #30]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	e05b      	b.n	80055ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800553a:	e057      	b.n	80055ec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800553c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005540:	2b08      	cmp	r3, #8
 8005542:	d828      	bhi.n	8005596 <UART_SetConfig+0x50e>
 8005544:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <UART_SetConfig+0x4c4>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fd fed0 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005576:	e014      	b.n	80055a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fd fee2 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 800557c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b26      	ldr	r3, [pc, #152]	@ (800561c <UART_SetConfig+0x594>)
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fd fe57 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 800558a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055a0:	bf00      	nop
    }

    if (pclk != 0U)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d021      	beq.n	80055ec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005618 <UART_SetConfig+0x590>)
 80055ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	441a      	add	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d909      	bls.n	80055e6 <UART_SetConfig+0x55e>
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d8:	d205      	bcs.n	80055e6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	e002      	b.n	80055ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2200      	movs	r2, #0
 8005600:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2200      	movs	r2, #0
 8005606:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005608:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800560c:	4618      	mov	r0, r3
 800560e:	3730      	adds	r7, #48	@ 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	0800b234 	.word	0x0800b234
 800561c:	00f42400 	.word	0x00f42400

08005620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01a      	beq.n	8005736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571e:	d10a      	bne.n	8005736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b098      	sub	sp, #96	@ 0x60
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005774:	f7fc fd54 	bl	8002220 <HAL_GetTick>
 8005778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d12f      	bne.n	80057e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005790:	2200      	movs	r2, #0
 8005792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f88e 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d022      	beq.n	80057e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e063      	b.n	80058b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d149      	bne.n	800588a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fe:	2200      	movs	r2, #0
 8005800:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f857 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d03c      	beq.n	800588a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	623b      	str	r3, [r7, #32]
   return(result);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005830:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e6      	bne.n	8005810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	60fb      	str	r3, [r7, #12]
   return(result);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005862:	61fa      	str	r2, [r7, #28]
 8005864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	617b      	str	r3, [r7, #20]
   return(result);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e012      	b.n	80058b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3758      	adds	r7, #88	@ 0x58
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	e04f      	b.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d04b      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fc fca5 	bl	8002220 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e04e      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d037      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b80      	cmp	r3, #128	@ 0x80
 80058fe:	d034      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b40      	cmp	r3, #64	@ 0x40
 8005904:	d031      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d110      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2208      	movs	r2, #8
 800591a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f838 	bl	8005992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2208      	movs	r2, #8
 8005926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e029      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005944:	d111      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800594e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f81e 	bl	8005992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e00f      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	bf0c      	ite	eq
 800597a:	2301      	moveq	r3, #1
 800597c:	2300      	movne	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	429a      	cmp	r2, r3
 8005986:	d0a0      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005992:	b480      	push	{r7}
 8005994:	b095      	sub	sp, #84	@ 0x54
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	61fb      	str	r3, [r7, #28]
   return(result);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d118      	bne.n	8005a3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	613b      	str	r3, [r7, #16]
   return(result);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a52:	bf00      	nop
 8005a54:	3754      	adds	r7, #84	@ 0x54
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e027      	b.n	8005ac4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	@ 0x24
 8005a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005aa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e02d      	b.n	8005b44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	@ 0x24
 8005af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f84f 	bl	8005bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e02d      	b.n	8005bc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	@ 0x24
 8005b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f811 	bl	8005bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d108      	bne.n	8005bea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005be8:	e031      	b.n	8005c4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bea:	2308      	movs	r3, #8
 8005bec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bee:	2308      	movs	r3, #8
 8005bf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	0e5b      	lsrs	r3, r3, #25
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	0f5b      	lsrs	r3, r3, #29
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	7b3a      	ldrb	r2, [r7, #12]
 8005c16:	4911      	ldr	r1, [pc, #68]	@ (8005c5c <UARTEx_SetNbDataToProcess+0x94>)
 8005c18:	5c8a      	ldrb	r2, [r1, r2]
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c1e:	7b3a      	ldrb	r2, [r7, #12]
 8005c20:	490f      	ldr	r1, [pc, #60]	@ (8005c60 <UARTEx_SetNbDataToProcess+0x98>)
 8005c22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	7b7a      	ldrb	r2, [r7, #13]
 8005c34:	4909      	ldr	r1, [pc, #36]	@ (8005c5c <UARTEx_SetNbDataToProcess+0x94>)
 8005c36:	5c8a      	ldrb	r2, [r1, r2]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c3c:	7b7a      	ldrb	r2, [r7, #13]
 8005c3e:	4908      	ldr	r1, [pc, #32]	@ (8005c60 <UARTEx_SetNbDataToProcess+0x98>)
 8005c40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c42:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	0800b24c 	.word	0x0800b24c
 8005c60:	0800b254 	.word	0x0800b254

08005c64 <__NVIC_SetPriority>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db0a      	blt.n	8005c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	490c      	ldr	r1, [pc, #48]	@ (8005cb0 <__NVIC_SetPriority+0x4c>)
 8005c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c82:	0112      	lsls	r2, r2, #4
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	440b      	add	r3, r1
 8005c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c8c:	e00a      	b.n	8005ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4908      	ldr	r1, [pc, #32]	@ (8005cb4 <__NVIC_SetPriority+0x50>)
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	3b04      	subs	r3, #4
 8005c9c:	0112      	lsls	r2, r2, #4
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	761a      	strb	r2, [r3, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000e100 	.word	0xe000e100
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <SysTick_Handler+0x1c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cc0:	f001 fd18 	bl	80076f4 <xTaskGetSchedulerState>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d001      	beq.n	8005cce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005cca:	f002 fb0d 	bl	80082e8 <xPortSysTickHandler>
  }
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000e010 	.word	0xe000e010

08005cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f06f 0004 	mvn.w	r0, #4
 8005ce2:	f7ff ffbf 	bl	8005c64 <__NVIC_SetPriority>
#endif
}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf2:	f3ef 8305 	mrs	r3, IPSR
 8005cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8005cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cfe:	f06f 0305 	mvn.w	r3, #5
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	e00c      	b.n	8005d20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d06:	4b0a      	ldr	r3, [pc, #40]	@ (8005d30 <osKernelInitialize+0x44>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d105      	bne.n	8005d1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d0e:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <osKernelInitialize+0x44>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	e002      	b.n	8005d20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d20:	687b      	ldr	r3, [r7, #4]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	200003f0 	.word	0x200003f0

08005d34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d46:	f06f 0305 	mvn.w	r3, #5
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e010      	b.n	8005d70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <osKernelStart+0x48>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d109      	bne.n	8005d6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d56:	f7ff ffbf 	bl	8005cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d5a:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <osKernelStart+0x48>)
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d60:	f001 f87a 	bl	8006e58 <vTaskStartScheduler>
      stat = osOK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e002      	b.n	8005d70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d70:	687b      	ldr	r3, [r7, #4]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200003f0 	.word	0x200003f0

08005d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	@ 0x38
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	617b      	str	r3, [r7, #20]
  return(result);
 8005d96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d17e      	bne.n	8005e9a <osThreadNew+0x11a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d07b      	beq.n	8005e9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005da2:	2380      	movs	r3, #128	@ 0x80
 8005da4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005da6:	2318      	movs	r3, #24
 8005da8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d045      	beq.n	8005e46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <osThreadNew+0x48>
        name = attr->name;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <osThreadNew+0x6e>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b38      	cmp	r3, #56	@ 0x38
 8005de0:	d805      	bhi.n	8005dee <osThreadNew+0x6e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <osThreadNew+0x72>
        return (NULL);
 8005dee:	2300      	movs	r3, #0
 8005df0:	e054      	b.n	8005e9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <osThreadNew+0xa8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005e10:	d90a      	bls.n	8005e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <osThreadNew+0xa8>
        mem = 1;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e010      	b.n	8005e4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <osThreadNew+0xca>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <osThreadNew+0xca>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <osThreadNew+0xca>
          mem = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e001      	b.n	8005e4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d110      	bne.n	8005e72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e58:	9202      	str	r2, [sp, #8]
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fe1a 	bl	8006aa0 <xTaskCreateStatic>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	e013      	b.n	8005e9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fe68 	bl	8006b60 <xTaskCreate>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d001      	beq.n	8005e9a <osThreadNew+0x11a>
            hTask = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e9a:	693b      	ldr	r3, [r7, #16]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3728      	adds	r7, #40	@ 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eac:	f3ef 8305 	mrs	r3, IPSR
 8005eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <osDelay+0x1c>
    stat = osErrorISR;
 8005eb8:	f06f 0305 	mvn.w	r3, #5
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e007      	b.n	8005ed0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 ff8e 	bl	8006dec <vTaskDelay>
    }
  }

  return (stat);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a07      	ldr	r2, [pc, #28]	@ (8005f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a06      	ldr	r2, [pc, #24]	@ (8005f0c <vApplicationGetIdleTaskMemory+0x30>)
 8005ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2280      	movs	r2, #128	@ 0x80
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	200003f4 	.word	0x200003f4
 8005f0c:	20000450 	.word	0x20000450

08005f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a07      	ldr	r2, [pc, #28]	@ (8005f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a06      	ldr	r2, [pc, #24]	@ (8005f40 <vApplicationGetTimerTaskMemory+0x30>)
 8005f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000650 	.word	0x20000650
 8005f40:	200006ac 	.word	0x200006ac

08005f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f103 0208 	add.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f103 0208 	add.w	r2, r3, #8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f103 0208 	add.w	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d103      	bne.n	8006006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e00c      	b.n	8006020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3308      	adds	r3, #8
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	e002      	b.n	8006014 <vListInsert+0x2e>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	d2f6      	bcs.n	800600e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6892      	ldr	r2, [r2, #8]
 800606e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6852      	ldr	r2, [r2, #4]
 8006078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d103      	bne.n	800608c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060d8:	f002 f876 	bl	80081c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	68f9      	ldr	r1, [r7, #12]
 80060e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	441a      	add	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	3b01      	subs	r3, #1
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	441a      	add	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	22ff      	movs	r2, #255	@ 0xff
 800611c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	22ff      	movs	r2, #255	@ 0xff
 8006124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d114      	bne.n	8006158 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3310      	adds	r3, #16
 800613a:	4618      	mov	r0, r3
 800613c:	f001 f91a 	bl	8007374 <xTaskRemoveFromEventList>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d012      	beq.n	800616c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <xQueueGenericReset+0xd0>)
 8006148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	e009      	b.n	800616c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3310      	adds	r3, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fef1 	bl	8005f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3324      	adds	r3, #36	@ 0x24
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff feec 	bl	8005f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800616c:	f002 f85e 	bl	800822c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006170:	2301      	movs	r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	@ 0x38
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <xQueueGenericCreateStatic+0x56>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <xQueueGenericCreateStatic+0x5a>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericCreateStatic+0x5c>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <xQueueGenericCreateStatic+0x84>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <xQueueGenericCreateStatic+0x88>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <xQueueGenericCreateStatic+0x8a>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	61fb      	str	r3, [r7, #28]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006226:	2350      	movs	r3, #80	@ 0x50
 8006228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b50      	cmp	r3, #80	@ 0x50
 800622e:	d00b      	beq.n	8006248 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	61bb      	str	r3, [r7, #24]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006248:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00d      	beq.n	8006270 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800625c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f805 	bl	800627a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3730      	adds	r7, #48	@ 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e002      	b.n	800629c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062a8:	2101      	movs	r1, #1
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	f7ff fefe 	bl	80060ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	@ 0x38
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xQueueGenericSend+0x34>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <xQueueGenericSend+0x42>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <xQueueGenericSend+0x46>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <xQueueGenericSend+0x48>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <xQueueGenericSend+0x64>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <xQueueGenericSend+0x72>
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <xQueueGenericSend+0x76>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericSend+0x78>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <xQueueGenericSend+0x94>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006354:	f001 f9ce 	bl	80076f4 <xTaskGetSchedulerState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <xQueueGenericSend+0xa4>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <xQueueGenericSend+0xa8>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <xQueueGenericSend+0xaa>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <xQueueGenericSend+0xc6>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	61fb      	str	r3, [r7, #28]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006386:	f001 ff1f 	bl	80081c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <xQueueGenericSend+0xdc>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d129      	bne.n	80063f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063a2:	f000 fa0f 	bl	80067c4 <prvCopyDataToQueue>
 80063a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d010      	beq.n	80063d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	3324      	adds	r3, #36	@ 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 ffdd 	bl	8007374 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063c0:	4b3f      	ldr	r3, [pc, #252]	@ (80064c0 <xQueueGenericSend+0x200>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	e00a      	b.n	80063e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063d8:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <xQueueGenericSend+0x200>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063e8:	f001 ff20 	bl	800822c <vPortExitCritical>
				return pdPASS;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e063      	b.n	80064b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063f6:	f001 ff19 	bl	800822c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e05c      	b.n	80064b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f817 	bl	800743c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006412:	f001 ff0b 	bl	800822c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006416:	f000 fd87 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800641a:	f001 fed5 	bl	80081c8 <vPortEnterCritical>
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006424:	b25b      	sxtb	r3, r3
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d103      	bne.n	8006434 <xQueueGenericSend+0x174>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x18a>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800644a:	f001 feef 	bl	800822c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	f107 0314 	add.w	r3, r7, #20
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f806 	bl	8007468 <xTaskCheckForTimeOut>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d124      	bne.n	80064ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006464:	f000 faa6 	bl	80069b4 <prvIsQueueFull>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	3310      	adds	r3, #16
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff2a 	bl	80072d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800647c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647e:	f000 fa31 	bl	80068e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006482:	f000 fd5f 	bl	8006f44 <xTaskResumeAll>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af7c 	bne.w	8006386 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <xQueueGenericSend+0x200>)
 8006490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	e772      	b.n	8006386 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064a2:	f000 fa1f 	bl	80068e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a6:	f000 fd4d 	bl	8006f44 <xTaskResumeAll>
 80064aa:	e76c      	b.n	8006386 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ae:	f000 fa19 	bl	80068e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b2:	f000 fd47 	bl	8006f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3738      	adds	r7, #56	@ 0x38
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b090      	sub	sp, #64	@ 0x40
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <xQueueGenericSendFromISR+0x3e>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <xQueueGenericSendFromISR+0x42>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericSendFromISR+0x44>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d103      	bne.n	8006532 <xQueueGenericSendFromISR+0x6e>
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <xQueueGenericSendFromISR+0x72>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <xQueueGenericSendFromISR+0x74>
 8006536:	2300      	movs	r3, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	623b      	str	r3, [r7, #32]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006554:	f001 ff18 	bl	8008388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006558:	f3ef 8211 	mrs	r2, BASEPRI
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006570:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006572:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <xQueueGenericSendFromISR+0xc2>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d12f      	bne.n	80065e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800658c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800659c:	f000 f912 	bl	80067c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d112      	bne.n	80065d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fedc 	bl	8007374 <xTaskRemoveFromEventList>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e007      	b.n	80065e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	b25a      	sxtb	r2, r3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065e0:	2301      	movs	r3, #1
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80065e4:	e001      	b.n	80065ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3740      	adds	r7, #64	@ 0x40
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	@ 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xQueueReceive+0x32>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	623b      	str	r3, [r7, #32]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <xQueueReceive+0x40>
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <xQueueReceive+0x44>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <xQueueReceive+0x46>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xQueueReceive+0x62>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	61fb      	str	r3, [r7, #28]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006662:	f001 f847 	bl	80076f4 <xTaskGetSchedulerState>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <xQueueReceive+0x72>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xQueueReceive+0x76>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <xQueueReceive+0x78>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <xQueueReceive+0x94>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006694:	f001 fd98 	bl	80081c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01f      	beq.n	80066e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a8:	f000 f8f6 	bl	8006898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	1e5a      	subs	r2, r3, #1
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00f      	beq.n	80066dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	3310      	adds	r3, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fe57 	bl	8007374 <xTaskRemoveFromEventList>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <xQueueReceive+0x1c0>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066dc:	f001 fda6 	bl	800822c <vPortExitCritical>
				return pdPASS;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e069      	b.n	80067b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ea:	f001 fd9f 	bl	800822c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e062      	b.n	80067b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066f8:	f107 0310 	add.w	r3, r7, #16
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fe9d 	bl	800743c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006706:	f001 fd91 	bl	800822c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800670a:	f000 fc0d 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800670e:	f001 fd5b 	bl	80081c8 <vPortEnterCritical>
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006718:	b25b      	sxtb	r3, r3
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d103      	bne.n	8006728 <xQueueReceive+0x128>
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d103      	bne.n	800673e <xQueueReceive+0x13e>
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800673e:	f001 fd75 	bl	800822c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006742:	1d3a      	adds	r2, r7, #4
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fe8c 	bl	8007468 <xTaskCheckForTimeOut>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d123      	bne.n	800679e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006758:	f000 f916 	bl	8006988 <prvIsQueueEmpty>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	3324      	adds	r3, #36	@ 0x24
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4611      	mov	r1, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fdb0 	bl	80072d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006772:	f000 f8b7 	bl	80068e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006776:	f000 fbe5 	bl	8006f44 <xTaskResumeAll>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d189      	bne.n	8006694 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006780:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <xQueueReceive+0x1c0>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	e780      	b.n	8006694 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006794:	f000 f8a6 	bl	80068e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006798:	f000 fbd4 	bl	8006f44 <xTaskResumeAll>
 800679c:	e77a      	b.n	8006694 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800679e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a0:	f000 f8a0 	bl	80068e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067a4:	f000 fbce 	bl	8006f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067aa:	f000 f8ed 	bl	8006988 <prvIsQueueEmpty>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f43f af6f 	beq.w	8006694 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	@ 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d14d      	bne.n	8006886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 ff9e 	bl	8007730 <xTaskPriorityDisinherit>
 80067f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	e043      	b.n	8006886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d119      	bne.n	8006838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6858      	ldr	r0, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	461a      	mov	r2, r3
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	f002 fdd9 	bl	80093c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d32b      	bcc.n	8006886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	e026      	b.n	8006886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68d8      	ldr	r0, [r3, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006840:	461a      	mov	r2, r3
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	f002 fdbf 	bl	80093c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	425b      	negs	r3, r3
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d207      	bcs.n	8006874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	425b      	negs	r3, r3
 800686e:	441a      	add	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d105      	bne.n	8006886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3b01      	subs	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800688e:	697b      	ldr	r3, [r7, #20]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	441a      	add	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d303      	bcc.n	80068cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68d9      	ldr	r1, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	461a      	mov	r2, r3
 80068d6:	6838      	ldr	r0, [r7, #0]
 80068d8:	f002 fd75 	bl	80093c6 <memcpy>
	}
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068ec:	f001 fc6c 	bl	80081c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068f8:	e011      	b.n	800691e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d012      	beq.n	8006928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3324      	adds	r3, #36	@ 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fd34 	bl	8007374 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006912:	f000 fe0d 	bl	8007530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	3b01      	subs	r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006922:	2b00      	cmp	r3, #0
 8006924:	dce9      	bgt.n	80068fa <prvUnlockQueue+0x16>
 8006926:	e000      	b.n	800692a <prvUnlockQueue+0x46>
					break;
 8006928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	22ff      	movs	r2, #255	@ 0xff
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006932:	f001 fc7b 	bl	800822c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006936:	f001 fc47 	bl	80081c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006942:	e011      	b.n	8006968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d012      	beq.n	8006972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3310      	adds	r3, #16
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fd0f 	bl	8007374 <xTaskRemoveFromEventList>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800695c:	f000 fde8 	bl	8007530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	3b01      	subs	r3, #1
 8006964:	b2db      	uxtb	r3, r3
 8006966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dce9      	bgt.n	8006944 <prvUnlockQueue+0x60>
 8006970:	e000      	b.n	8006974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	22ff      	movs	r2, #255	@ 0xff
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800697c:	f001 fc56 	bl	800822c <vPortExitCritical>
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006990:	f001 fc1a 	bl	80081c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e001      	b.n	80069a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069a6:	f001 fc41 	bl	800822c <vPortExitCritical>

	return xReturn;
 80069aa:	68fb      	ldr	r3, [r7, #12]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069bc:	f001 fc04 	bl	80081c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d102      	bne.n	80069d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069cc:	2301      	movs	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e001      	b.n	80069d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069d6:	f001 fc29 	bl	800822c <vPortExitCritical>

	return xReturn;
 80069da:	68fb      	ldr	r3, [r7, #12]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	e014      	b.n	8006a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006a34 <vQueueAddToRegistry+0x50>)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a00:	490c      	ldr	r1, [pc, #48]	@ (8006a34 <vQueueAddToRegistry+0x50>)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a34 <vQueueAddToRegistry+0x50>)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a16:	e006      	b.n	8006a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b07      	cmp	r3, #7
 8006a22:	d9e7      	bls.n	80069f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000aac 	.word	0x20000aac

08006a38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a48:	f001 fbbe 	bl	80081c8 <vPortEnterCritical>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d103      	bne.n	8006a62 <vQueueWaitForMessageRestricted+0x2a>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <vQueueWaitForMessageRestricted+0x40>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a78:	f001 fbd8 	bl	800822c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	3324      	adds	r3, #36	@ 0x24
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fc45 	bl	800731c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a92:	6978      	ldr	r0, [r7, #20]
 8006a94:	f7ff ff26 	bl	80068e4 <prvUnlockQueue>
	}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08e      	sub	sp, #56	@ 0x38
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	623b      	str	r3, [r7, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	61fb      	str	r3, [r7, #28]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aea:	235c      	movs	r3, #92	@ 0x5c
 8006aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006af2:	d00b      	beq.n	8006b0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61bb      	str	r3, [r7, #24]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01e      	beq.n	8006b52 <xTaskCreateStatic+0xb2>
 8006b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01b      	beq.n	8006b52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f850 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b4c:	f000 f8de 	bl	8006d0c <prvAddNewTaskToReadyList>
 8006b50:	e001      	b.n	8006b56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b56:	697b      	ldr	r3, [r7, #20]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	@ 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	@ 0x30
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fc49 	bl	800840c <pvPortMalloc>
 8006b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b82:	205c      	movs	r0, #92	@ 0x5c
 8006b84:	f001 fc42 	bl	800840c <pvPortMalloc>
 8006b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b96:	e005      	b.n	8006ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f001 fd05 	bl	80085a8 <vPortFree>
 8006b9e:	e001      	b.n	8006ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f80e 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bce:	69f8      	ldr	r0, [r7, #28]
 8006bd0:	f000 f89c 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e002      	b.n	8006be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295
 8006bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006be0:	69bb      	ldr	r3, [r7, #24]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	461a      	mov	r2, r3
 8006c02:	21a5      	movs	r1, #165	@ 0xa5
 8006c04:	f002 fb5f 	bl	80092c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c12:	3b01      	subs	r3, #1
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	617b      	str	r3, [r7, #20]
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01f      	beq.n	8006c8a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e012      	b.n	8006c76 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	7819      	ldrb	r1, [r3, #0]
 8006c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3334      	adds	r3, #52	@ 0x34
 8006c60:	460a      	mov	r2, r1
 8006c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b0f      	cmp	r3, #15
 8006c7a:	d9e9      	bls.n	8006c50 <prvInitialiseNewTask+0x66>
 8006c7c:	e000      	b.n	8006c80 <prvInitialiseNewTask+0x96>
			{
				break;
 8006c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c88:	e003      	b.n	8006c92 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	2b37      	cmp	r3, #55	@ 0x37
 8006c96:	d901      	bls.n	8006c9c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c98:	2337      	movs	r3, #55	@ 0x37
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	2200      	movs	r2, #0
 8006cac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff f966 	bl	8005f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff f961 	bl	8005f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f001 f93e 	bl	8007f6c <pxPortInitialiseStack>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f001 fa58 	bl	80081c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b2c      	ldr	r3, [pc, #176]	@ (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b27      	ldr	r3, [pc, #156]	@ (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fc1e 	bl	8007578 <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b26      	ldr	r3, [pc, #152]	@ (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b23      	ldr	r3, [pc, #140]	@ (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b20      	ldr	r3, [pc, #128]	@ (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d70:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d903      	bls.n	8006d80 <prvAddNewTaskToReadyList+0x74>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	4a18      	ldr	r2, [pc, #96]	@ (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <prvAddNewTaskToReadyList+0xd8>)
 8006d8e:	441a      	add	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7ff f901 	bl	8005f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d9c:	f001 fa46 	bl	800822c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006da0:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006da8:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d207      	bcs.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006db6:	4b0c      	ldr	r3, [pc, #48]	@ (8006de8 <prvAddNewTaskToReadyList+0xdc>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000fc0 	.word	0x20000fc0
 8006dd4:	20000aec 	.word	0x20000aec
 8006dd8:	20000fcc 	.word	0x20000fcc
 8006ddc:	20000fdc 	.word	0x20000fdc
 8006de0:	20000fc8 	.word	0x20000fc8
 8006de4:	20000af0 	.word	0x20000af0
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d018      	beq.n	8006e30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dfe:	4b14      	ldr	r3, [pc, #80]	@ (8006e50 <vTaskDelay+0x64>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <vTaskDelay+0x32>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e1e:	f000 f883 	bl	8006f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fcf3 	bl	8007810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e2a:	f000 f88b 	bl	8006f44 <xTaskResumeAll>
 8006e2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d107      	bne.n	8006e46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e36:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <vTaskDelay+0x68>)
 8006e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000fe8 	.word	0x20000fe8
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	@ 0x28
 8006e5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e66:	463a      	mov	r2, r7
 8006e68:	1d39      	adds	r1, r7, #4
 8006e6a:	f107 0308 	add.w	r3, r7, #8
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff f834 	bl	8005edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	9202      	str	r2, [sp, #8]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	460a      	mov	r2, r1
 8006e86:	4922      	ldr	r1, [pc, #136]	@ (8006f10 <vTaskStartScheduler+0xb8>)
 8006e88:	4822      	ldr	r0, [pc, #136]	@ (8006f14 <vTaskStartScheduler+0xbc>)
 8006e8a:	f7ff fe09 	bl	8006aa0 <xTaskCreateStatic>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4a21      	ldr	r2, [pc, #132]	@ (8006f18 <vTaskStartScheduler+0xc0>)
 8006e92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e94:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <vTaskStartScheduler+0xc0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e001      	b.n	8006ea6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d102      	bne.n	8006eb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006eac:	f000 fd04 	bl	80078b8 <xTimerCreateTimerTask>
 8006eb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d116      	bne.n	8006ee6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	613b      	str	r3, [r7, #16]
}
 8006eca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ecc:	4b13      	ldr	r3, [pc, #76]	@ (8006f1c <vTaskStartScheduler+0xc4>)
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ed4:	4b12      	ldr	r3, [pc, #72]	@ (8006f20 <vTaskStartScheduler+0xc8>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006eda:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <vTaskStartScheduler+0xcc>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ee0:	f001 f8ce 	bl	8008080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ee4:	e00f      	b.n	8006f06 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d10b      	bne.n	8006f06 <vTaskStartScheduler+0xae>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60fb      	str	r3, [r7, #12]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <vTaskStartScheduler+0xaa>
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	0800b174 	.word	0x0800b174
 8006f14:	08007549 	.word	0x08007549
 8006f18:	20000fe4 	.word	0x20000fe4
 8006f1c:	20000fe0 	.word	0x20000fe0
 8006f20:	20000fcc 	.word	0x20000fcc
 8006f24:	20000fc4 	.word	0x20000fc4

08006f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <vTaskSuspendAll+0x18>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a03      	ldr	r2, [pc, #12]	@ (8006f40 <vTaskSuspendAll+0x18>)
 8006f34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f36:	bf00      	nop
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000fe8 	.word	0x20000fe8

08006f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f52:	4b42      	ldr	r3, [pc, #264]	@ (800705c <xTaskResumeAll+0x118>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <xTaskResumeAll+0x2e>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	603b      	str	r3, [r7, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f72:	f001 f929 	bl	80081c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f76:	4b39      	ldr	r3, [pc, #228]	@ (800705c <xTaskResumeAll+0x118>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a37      	ldr	r2, [pc, #220]	@ (800705c <xTaskResumeAll+0x118>)
 8006f7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f80:	4b36      	ldr	r3, [pc, #216]	@ (800705c <xTaskResumeAll+0x118>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d162      	bne.n	800704e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f88:	4b35      	ldr	r3, [pc, #212]	@ (8007060 <xTaskResumeAll+0x11c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05e      	beq.n	800704e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f90:	e02f      	b.n	8006ff2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f92:	4b34      	ldr	r3, [pc, #208]	@ (8007064 <xTaskResumeAll+0x120>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff f85a 	bl	8006058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f855 	bl	8006058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007068 <xTaskResumeAll+0x124>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <xTaskResumeAll+0x7e>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8007068 <xTaskResumeAll+0x124>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a27      	ldr	r2, [pc, #156]	@ (800706c <xTaskResumeAll+0x128>)
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe ffe0 	bl	8005f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe2:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <xTaskResumeAll+0x12c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006fec:	4b21      	ldr	r3, [pc, #132]	@ (8007074 <xTaskResumeAll+0x130>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8007064 <xTaskResumeAll+0x120>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cb      	bne.n	8006f92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007000:	f000 fb58 	bl	80076b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007004:	4b1c      	ldr	r3, [pc, #112]	@ (8007078 <xTaskResumeAll+0x134>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007010:	f000 f846 	bl	80070a0 <xTaskIncrementTick>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800701a:	4b16      	ldr	r3, [pc, #88]	@ (8007074 <xTaskResumeAll+0x130>)
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3b01      	subs	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f1      	bne.n	8007010 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800702c:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <xTaskResumeAll+0x134>)
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007032:	4b10      	ldr	r3, [pc, #64]	@ (8007074 <xTaskResumeAll+0x130>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800703e:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <xTaskResumeAll+0x138>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800704e:	f001 f8ed 	bl	800822c <vPortExitCritical>

	return xAlreadyYielded;
 8007052:	68bb      	ldr	r3, [r7, #8]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000fe8 	.word	0x20000fe8
 8007060:	20000fc0 	.word	0x20000fc0
 8007064:	20000f80 	.word	0x20000f80
 8007068:	20000fc8 	.word	0x20000fc8
 800706c:	20000af0 	.word	0x20000af0
 8007070:	20000aec 	.word	0x20000aec
 8007074:	20000fd4 	.word	0x20000fd4
 8007078:	20000fd0 	.word	0x20000fd0
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007086:	4b05      	ldr	r3, [pc, #20]	@ (800709c <xTaskGetTickCount+0x1c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800708c:	687b      	ldr	r3, [r7, #4]
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000fc4 	.word	0x20000fc4

080070a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070aa:	4b4f      	ldr	r3, [pc, #316]	@ (80071e8 <xTaskIncrementTick+0x148>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 8090 	bne.w	80071d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b4:	4b4d      	ldr	r3, [pc, #308]	@ (80071ec <xTaskIncrementTick+0x14c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070bc:	4a4b      	ldr	r2, [pc, #300]	@ (80071ec <xTaskIncrementTick+0x14c>)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d121      	bne.n	800710c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c8:	4b49      	ldr	r3, [pc, #292]	@ (80071f0 <xTaskIncrementTick+0x150>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	603b      	str	r3, [r7, #0]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <xTaskIncrementTick+0x46>
 80070ea:	4b41      	ldr	r3, [pc, #260]	@ (80071f0 <xTaskIncrementTick+0x150>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	4b40      	ldr	r3, [pc, #256]	@ (80071f4 <xTaskIncrementTick+0x154>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3e      	ldr	r2, [pc, #248]	@ (80071f0 <xTaskIncrementTick+0x150>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	4a3e      	ldr	r2, [pc, #248]	@ (80071f4 <xTaskIncrementTick+0x154>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <xTaskIncrementTick+0x158>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a3c      	ldr	r2, [pc, #240]	@ (80071f8 <xTaskIncrementTick+0x158>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	f000 fad4 	bl	80076b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800710c:	4b3b      	ldr	r3, [pc, #236]	@ (80071fc <xTaskIncrementTick+0x15c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	d349      	bcc.n	80071aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007116:	4b36      	ldr	r3, [pc, #216]	@ (80071f0 <xTaskIncrementTick+0x150>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007120:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <xTaskIncrementTick+0x15c>)
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	601a      	str	r2, [r3, #0]
					break;
 8007128:	e03f      	b.n	80071aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712a:	4b31      	ldr	r3, [pc, #196]	@ (80071f0 <xTaskIncrementTick+0x150>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d203      	bcs.n	800714a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <xTaskIncrementTick+0x15c>)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007148:	e02f      	b.n	80071aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe ff82 	bl	8006058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3318      	adds	r3, #24
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe ff79 	bl	8006058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716a:	4b25      	ldr	r3, [pc, #148]	@ (8007200 <xTaskIncrementTick+0x160>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d903      	bls.n	800717a <xTaskIncrementTick+0xda>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a22      	ldr	r2, [pc, #136]	@ (8007200 <xTaskIncrementTick+0x160>)
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4a1f      	ldr	r2, [pc, #124]	@ (8007204 <xTaskIncrementTick+0x164>)
 8007188:	441a      	add	r2, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f7fe ff04 	bl	8005f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <xTaskIncrementTick+0x168>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d3b8      	bcc.n	8007116 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a8:	e7b5      	b.n	8007116 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071aa:	4b17      	ldr	r3, [pc, #92]	@ (8007208 <xTaskIncrementTick+0x168>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	4914      	ldr	r1, [pc, #80]	@ (8007204 <xTaskIncrementTick+0x164>)
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d901      	bls.n	80071c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071c6:	4b11      	ldr	r3, [pc, #68]	@ (800720c <xTaskIncrementTick+0x16c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80071ce:	2301      	movs	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e004      	b.n	80071de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007210 <xTaskIncrementTick+0x170>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3301      	adds	r3, #1
 80071da:	4a0d      	ldr	r2, [pc, #52]	@ (8007210 <xTaskIncrementTick+0x170>)
 80071dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000fe8 	.word	0x20000fe8
 80071ec:	20000fc4 	.word	0x20000fc4
 80071f0:	20000f78 	.word	0x20000f78
 80071f4:	20000f7c 	.word	0x20000f7c
 80071f8:	20000fd8 	.word	0x20000fd8
 80071fc:	20000fe0 	.word	0x20000fe0
 8007200:	20000fc8 	.word	0x20000fc8
 8007204:	20000af0 	.word	0x20000af0
 8007208:	20000aec 	.word	0x20000aec
 800720c:	20000fd4 	.word	0x20000fd4
 8007210:	20000fd0 	.word	0x20000fd0

08007214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800721a:	4b28      	ldr	r3, [pc, #160]	@ (80072bc <vTaskSwitchContext+0xa8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007222:	4b27      	ldr	r3, [pc, #156]	@ (80072c0 <vTaskSwitchContext+0xac>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007228:	e042      	b.n	80072b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800722a:	4b25      	ldr	r3, [pc, #148]	@ (80072c0 <vTaskSwitchContext+0xac>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007230:	4b24      	ldr	r3, [pc, #144]	@ (80072c4 <vTaskSwitchContext+0xb0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	e011      	b.n	800725c <vTaskSwitchContext+0x48>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <vTaskSwitchContext+0x42>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <vTaskSwitchContext+0x3e>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	491a      	ldr	r1, [pc, #104]	@ (80072c8 <vTaskSwitchContext+0xb4>)
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0e3      	beq.n	8007238 <vTaskSwitchContext+0x24>
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a13      	ldr	r2, [pc, #76]	@ (80072c8 <vTaskSwitchContext+0xb4>)
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3308      	adds	r3, #8
 8007292:	429a      	cmp	r2, r3
 8007294:	d104      	bne.n	80072a0 <vTaskSwitchContext+0x8c>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	4a09      	ldr	r2, [pc, #36]	@ (80072cc <vTaskSwitchContext+0xb8>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4a06      	ldr	r2, [pc, #24]	@ (80072c4 <vTaskSwitchContext+0xb0>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	20000fe8 	.word	0x20000fe8
 80072c0:	20000fd4 	.word	0x20000fd4
 80072c4:	20000fc8 	.word	0x20000fc8
 80072c8:	20000af0 	.word	0x20000af0
 80072cc:	20000aec 	.word	0x20000aec

080072d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072f8:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <vTaskPlaceOnEventList+0x48>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3318      	adds	r3, #24
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fe fe70 	bl	8005fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007306:	2101      	movs	r1, #1
 8007308:	6838      	ldr	r0, [r7, #0]
 800730a:	f000 fa81 	bl	8007810 <prvAddCurrentTaskToDelayedList>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000aec 	.word	0x20000aec

0800731c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617b      	str	r3, [r7, #20]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <vTaskPlaceOnEventListRestricted+0x54>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3318      	adds	r3, #24
 800734c:	4619      	mov	r1, r3
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7fe fe25 	bl	8005f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
 800735e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	68b8      	ldr	r0, [r7, #8]
 8007364:	f000 fa54 	bl	8007810 <prvAddCurrentTaskToDelayedList>
	}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000aec 	.word	0x20000aec

08007374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	60fb      	str	r3, [r7, #12]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3318      	adds	r3, #24
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fe56 	bl	8006058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007424 <xTaskRemoveFromEventList+0xb0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11d      	bne.n	80073f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fe4d 	bl	8006058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c2:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <xTaskRemoveFromEventList+0xb4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d903      	bls.n	80073d2 <xTaskRemoveFromEventList+0x5e>
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <xTaskRemoveFromEventList+0xb4>)
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4a13      	ldr	r2, [pc, #76]	@ (800742c <xTaskRemoveFromEventList+0xb8>)
 80073e0:	441a      	add	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fe fdd8 	bl	8005f9e <vListInsertEnd>
 80073ee:	e005      	b.n	80073fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	3318      	adds	r3, #24
 80073f4:	4619      	mov	r1, r3
 80073f6:	480e      	ldr	r0, [pc, #56]	@ (8007430 <xTaskRemoveFromEventList+0xbc>)
 80073f8:	f7fe fdd1 	bl	8005f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007400:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <xTaskRemoveFromEventList+0xc0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	429a      	cmp	r2, r3
 8007408:	d905      	bls.n	8007416 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800740a:	2301      	movs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800740e:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <xTaskRemoveFromEventList+0xc4>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e001      	b.n	800741a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800741a:	697b      	ldr	r3, [r7, #20]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000fe8 	.word	0x20000fe8
 8007428:	20000fc8 	.word	0x20000fc8
 800742c:	20000af0 	.word	0x20000af0
 8007430:	20000f80 	.word	0x20000f80
 8007434:	20000aec 	.word	0x20000aec
 8007438:	20000fd4 	.word	0x20000fd4

0800743c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007444:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <vTaskInternalSetTimeOutState+0x24>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <vTaskInternalSetTimeOutState+0x28>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000fd8 	.word	0x20000fd8
 8007464:	20000fc4 	.word	0x20000fc4

08007468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	613b      	str	r3, [r7, #16]
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10b      	bne.n	80074ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	60fb      	str	r3, [r7, #12]
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	e7fd      	b.n	80074aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80074ae:	f000 fe8b 	bl	80081c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <xTaskCheckForTimeOut+0xc0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d102      	bne.n	80074d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e023      	b.n	800751a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b15      	ldr	r3, [pc, #84]	@ (800752c <xTaskCheckForTimeOut+0xc4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d007      	beq.n	80074ee <xTaskCheckForTimeOut+0x86>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	61fb      	str	r3, [r7, #28]
 80074ec:	e015      	b.n	800751a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d20b      	bcs.n	8007510 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff99 	bl	800743c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e004      	b.n	800751a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007516:	2301      	movs	r3, #1
 8007518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800751a:	f000 fe87 	bl	800822c <vPortExitCritical>

	return xReturn;
 800751e:	69fb      	ldr	r3, [r7, #28]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3720      	adds	r7, #32
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000fc4 	.word	0x20000fc4
 800752c:	20000fd8 	.word	0x20000fd8

08007530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007534:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <vTaskMissedYield+0x14>)
 8007536:	2201      	movs	r2, #1
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000fd4 	.word	0x20000fd4

08007548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007550:	f000 f852 	bl	80075f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <prvIdleTask+0x28>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d9f9      	bls.n	8007550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <prvIdleTask+0x2c>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800756c:	e7f0      	b.n	8007550 <prvIdleTask+0x8>
 800756e:	bf00      	nop
 8007570:	20000af0 	.word	0x20000af0
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	e00c      	b.n	800759e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4a12      	ldr	r2, [pc, #72]	@ (80075d8 <prvInitialiseTaskLists+0x60>)
 8007590:	4413      	add	r3, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fcd6 	bl	8005f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3301      	adds	r3, #1
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b37      	cmp	r3, #55	@ 0x37
 80075a2:	d9ef      	bls.n	8007584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075a4:	480d      	ldr	r0, [pc, #52]	@ (80075dc <prvInitialiseTaskLists+0x64>)
 80075a6:	f7fe fccd 	bl	8005f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075aa:	480d      	ldr	r0, [pc, #52]	@ (80075e0 <prvInitialiseTaskLists+0x68>)
 80075ac:	f7fe fcca 	bl	8005f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075b0:	480c      	ldr	r0, [pc, #48]	@ (80075e4 <prvInitialiseTaskLists+0x6c>)
 80075b2:	f7fe fcc7 	bl	8005f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075b6:	480c      	ldr	r0, [pc, #48]	@ (80075e8 <prvInitialiseTaskLists+0x70>)
 80075b8:	f7fe fcc4 	bl	8005f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075bc:	480b      	ldr	r0, [pc, #44]	@ (80075ec <prvInitialiseTaskLists+0x74>)
 80075be:	f7fe fcc1 	bl	8005f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075c2:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <prvInitialiseTaskLists+0x78>)
 80075c4:	4a05      	ldr	r2, [pc, #20]	@ (80075dc <prvInitialiseTaskLists+0x64>)
 80075c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075c8:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <prvInitialiseTaskLists+0x7c>)
 80075ca:	4a05      	ldr	r2, [pc, #20]	@ (80075e0 <prvInitialiseTaskLists+0x68>)
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000af0 	.word	0x20000af0
 80075dc:	20000f50 	.word	0x20000f50
 80075e0:	20000f64 	.word	0x20000f64
 80075e4:	20000f80 	.word	0x20000f80
 80075e8:	20000f94 	.word	0x20000f94
 80075ec:	20000fac 	.word	0x20000fac
 80075f0:	20000f78 	.word	0x20000f78
 80075f4:	20000f7c 	.word	0x20000f7c

080075f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075fe:	e019      	b.n	8007634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007600:	f000 fde2 	bl	80081c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007604:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <prvCheckTasksWaitingTermination+0x50>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fd21 	bl	8006058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <prvCheckTasksWaitingTermination+0x54>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3b01      	subs	r3, #1
 800761c:	4a0b      	ldr	r2, [pc, #44]	@ (800764c <prvCheckTasksWaitingTermination+0x54>)
 800761e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007620:	4b0b      	ldr	r3, [pc, #44]	@ (8007650 <prvCheckTasksWaitingTermination+0x58>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3b01      	subs	r3, #1
 8007626:	4a0a      	ldr	r2, [pc, #40]	@ (8007650 <prvCheckTasksWaitingTermination+0x58>)
 8007628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800762a:	f000 fdff 	bl	800822c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f810 	bl	8007654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007634:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <prvCheckTasksWaitingTermination+0x58>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e1      	bne.n	8007600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000f94 	.word	0x20000f94
 800764c:	20000fc0 	.word	0x20000fc0
 8007650:	20000fa8 	.word	0x20000fa8

08007654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007662:	2b00      	cmp	r3, #0
 8007664:	d108      	bne.n	8007678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	4618      	mov	r0, r3
 800766c:	f000 ff9c 	bl	80085a8 <vPortFree>
				vPortFree( pxTCB );
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ff99 	bl	80085a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007676:	e019      	b.n	80076ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800767e:	2b01      	cmp	r3, #1
 8007680:	d103      	bne.n	800768a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ff90 	bl	80085a8 <vPortFree>
	}
 8007688:	e010      	b.n	80076ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007690:	2b02      	cmp	r3, #2
 8007692:	d00b      	beq.n	80076ac <prvDeleteTCB+0x58>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	60fb      	str	r3, [r7, #12]
}
 80076a6:	bf00      	nop
 80076a8:	bf00      	nop
 80076aa:	e7fd      	b.n	80076a8 <prvDeleteTCB+0x54>
	}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <prvResetNextTaskUnblockTime+0x38>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c4:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <prvResetNextTaskUnblockTime+0x3c>)
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076cc:	e008      	b.n	80076e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ce:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <prvResetNextTaskUnblockTime+0x38>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4a04      	ldr	r2, [pc, #16]	@ (80076f0 <prvResetNextTaskUnblockTime+0x3c>)
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000f78 	.word	0x20000f78
 80076f0:	20000fe0 	.word	0x20000fe0

080076f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <xTaskGetSchedulerState+0x34>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007702:	2301      	movs	r3, #1
 8007704:	607b      	str	r3, [r7, #4]
 8007706:	e008      	b.n	800771a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007708:	4b08      	ldr	r3, [pc, #32]	@ (800772c <xTaskGetSchedulerState+0x38>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007710:	2302      	movs	r3, #2
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e001      	b.n	800771a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800771a:	687b      	ldr	r3, [r7, #4]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	20000fcc 	.word	0x20000fcc
 800772c:	20000fe8 	.word	0x20000fe8

08007730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d058      	beq.n	80077f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007746:	4b2f      	ldr	r3, [pc, #188]	@ (8007804 <xTaskPriorityDisinherit+0xd4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	429a      	cmp	r2, r3
 800774e:	d00b      	beq.n	8007768 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60fb      	str	r3, [r7, #12]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60bb      	str	r3, [r7, #8]
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	e7fd      	b.n	8007784 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778c:	1e5a      	subs	r2, r3, #1
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779a:	429a      	cmp	r2, r3
 800779c:	d02c      	beq.n	80077f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d128      	bne.n	80077f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fc54 	bl	8006058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <xTaskPriorityDisinherit+0xd8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d903      	bls.n	80077d8 <xTaskPriorityDisinherit+0xa8>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007808 <xTaskPriorityDisinherit+0xd8>)
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4a09      	ldr	r2, [pc, #36]	@ (800780c <xTaskPriorityDisinherit+0xdc>)
 80077e6:	441a      	add	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f7fe fbd5 	bl	8005f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f8:	697b      	ldr	r3, [r7, #20]
	}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000aec 	.word	0x20000aec
 8007808:	20000fc8 	.word	0x20000fc8
 800780c:	20000af0 	.word	0x20000af0

08007810 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800781a:	4b21      	ldr	r3, [pc, #132]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007820:	4b20      	ldr	r3, [pc, #128]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3304      	adds	r3, #4
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fc16 	bl	8006058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d10a      	bne.n	800784a <prvAddCurrentTaskToDelayedList+0x3a>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783a:	4b1a      	ldr	r3, [pc, #104]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4819      	ldr	r0, [pc, #100]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007844:	f7fe fbab 	bl	8005f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007848:	e026      	b.n	8007898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	429a      	cmp	r2, r3
 8007860:	d209      	bcs.n	8007876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b0f      	ldr	r3, [pc, #60]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fe fbb9 	bl	8005fe6 <vListInsert>
}
 8007874:	e010      	b.n	8007898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007876:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe fbaf 	bl	8005fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007888:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	d202      	bcs.n	8007898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007892:	4a08      	ldr	r2, [pc, #32]	@ (80078b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6013      	str	r3, [r2, #0]
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20000fc4 	.word	0x20000fc4
 80078a4:	20000aec 	.word	0x20000aec
 80078a8:	20000fac 	.word	0x20000fac
 80078ac:	20000f7c 	.word	0x20000f7c
 80078b0:	20000f78 	.word	0x20000f78
 80078b4:	20000fe0 	.word	0x20000fe0

080078b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	@ 0x28
 80078bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078c2:	f000 fb13 	bl	8007eec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078c6:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <xTimerCreateTimerTask+0x84>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d021      	beq.n	8007912 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078d6:	1d3a      	adds	r2, r7, #4
 80078d8:	f107 0108 	add.w	r1, r7, #8
 80078dc:	f107 030c 	add.w	r3, r7, #12
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe fb15 	bl	8005f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	9202      	str	r2, [sp, #8]
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	2302      	movs	r3, #2
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	2300      	movs	r3, #0
 80078f6:	460a      	mov	r2, r1
 80078f8:	4911      	ldr	r1, [pc, #68]	@ (8007940 <xTimerCreateTimerTask+0x88>)
 80078fa:	4812      	ldr	r0, [pc, #72]	@ (8007944 <xTimerCreateTimerTask+0x8c>)
 80078fc:	f7ff f8d0 	bl	8006aa0 <xTaskCreateStatic>
 8007900:	4603      	mov	r3, r0
 8007902:	4a11      	ldr	r2, [pc, #68]	@ (8007948 <xTimerCreateTimerTask+0x90>)
 8007904:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007906:	4b10      	ldr	r3, [pc, #64]	@ (8007948 <xTimerCreateTimerTask+0x90>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800790e:	2301      	movs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	613b      	str	r3, [r7, #16]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007930:	697b      	ldr	r3, [r7, #20]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	2000101c 	.word	0x2000101c
 8007940:	0800b17c 	.word	0x0800b17c
 8007944:	08007a85 	.word	0x08007a85
 8007948:	20001020 	.word	0x20001020

0800794c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	@ 0x28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <xTimerGenericCommand+0x30>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800797c:	4b19      	ldr	r3, [pc, #100]	@ (80079e4 <xTimerGenericCommand+0x98>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d02a      	beq.n	80079da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b05      	cmp	r3, #5
 8007994:	dc18      	bgt.n	80079c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007996:	f7ff fead 	bl	80076f4 <xTaskGetSchedulerState>
 800799a:	4603      	mov	r3, r0
 800799c:	2b02      	cmp	r3, #2
 800799e:	d109      	bne.n	80079b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079a0:	4b10      	ldr	r3, [pc, #64]	@ (80079e4 <xTimerGenericCommand+0x98>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	f107 0110 	add.w	r1, r7, #16
 80079a8:	2300      	movs	r3, #0
 80079aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ac:	f7fe fc88 	bl	80062c0 <xQueueGenericSend>
 80079b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80079b2:	e012      	b.n	80079da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079b4:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <xTimerGenericCommand+0x98>)
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	f107 0110 	add.w	r1, r7, #16
 80079bc:	2300      	movs	r3, #0
 80079be:	2200      	movs	r2, #0
 80079c0:	f7fe fc7e 	bl	80062c0 <xQueueGenericSend>
 80079c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80079c6:	e008      	b.n	80079da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079c8:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <xTimerGenericCommand+0x98>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	f107 0110 	add.w	r1, r7, #16
 80079d0:	2300      	movs	r3, #0
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f7fe fd76 	bl	80064c4 <xQueueGenericSendFromISR>
 80079d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3728      	adds	r7, #40	@ 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000101c 	.word	0x2000101c

080079e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f2:	4b23      	ldr	r3, [pc, #140]	@ (8007a80 <prvProcessExpiredTimer+0x98>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fb29 	bl	8006058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d023      	beq.n	8007a5c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	18d1      	adds	r1, r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f000 f8d5 	bl	8007bd0 <prvInsertTimerInActiveList>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d020      	beq.n	8007a6e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	2100      	movs	r1, #0
 8007a36:	6978      	ldr	r0, [r7, #20]
 8007a38:	f7ff ff88 	bl	800794c <xTimerGenericCommand>
 8007a3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d114      	bne.n	8007a6e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	60fb      	str	r3, [r7, #12]
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	6978      	ldr	r0, [r7, #20]
 8007a74:	4798      	blx	r3
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001014 	.word	0x20001014

08007a84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a8c:	f107 0308 	add.w	r3, r7, #8
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f859 	bl	8007b48 <prvGetNextExpireTime>
 8007a96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f805 	bl	8007aac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007aa2:	f000 f8d7 	bl	8007c54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aa6:	bf00      	nop
 8007aa8:	e7f0      	b.n	8007a8c <prvTimerTask+0x8>
	...

08007aac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ab6:	f7ff fa37 	bl	8006f28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f866 	bl	8007b90 <prvSampleTimeNow>
 8007ac4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d130      	bne.n	8007b2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <prvProcessTimerOrBlockTask+0x3c>
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d806      	bhi.n	8007ae8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ada:	f7ff fa33 	bl	8006f44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff ff81 	bl	80079e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ae6:	e024      	b.n	8007b32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aee:	4b13      	ldr	r3, [pc, #76]	@ (8007b3c <prvProcessTimerOrBlockTask+0x90>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <prvProcessTimerOrBlockTask+0x50>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <prvProcessTimerOrBlockTask+0x52>
 8007afc:	2300      	movs	r3, #0
 8007afe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b00:	4b0f      	ldr	r3, [pc, #60]	@ (8007b40 <prvProcessTimerOrBlockTask+0x94>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7fe ff93 	bl	8006a38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b12:	f7ff fa17 	bl	8006f44 <xTaskResumeAll>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b1c:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <prvProcessTimerOrBlockTask+0x98>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	f3bf 8f6f 	isb	sy
}
 8007b2c:	e001      	b.n	8007b32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b2e:	f7ff fa09 	bl	8006f44 <xTaskResumeAll>
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20001018 	.word	0x20001018
 8007b40:	2000101c 	.word	0x2000101c
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b50:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <prvGetNextExpireTime+0x44>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <prvGetNextExpireTime+0x16>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	e000      	b.n	8007b60 <prvGetNextExpireTime+0x18>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d105      	bne.n	8007b78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <prvGetNextExpireTime+0x44>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e001      	b.n	8007b7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20001014 	.word	0x20001014

08007b90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b98:	f7ff fa72 	bl	8007080 <xTaskGetTickCount>
 8007b9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <prvSampleTimeNow+0x3c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d205      	bcs.n	8007bb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ba8:	f000 f93a 	bl	8007e20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e002      	b.n	8007bba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bba:	4a04      	ldr	r2, [pc, #16]	@ (8007bcc <prvSampleTimeNow+0x3c>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20001024 	.word	0x20001024

08007bd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d812      	bhi.n	8007c1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	1ad2      	subs	r2, r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d302      	bcc.n	8007c0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	e01b      	b.n	8007c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c0a:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <prvInsertTimerInActiveList+0x7c>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f7fe f9e6 	bl	8005fe6 <vListInsert>
 8007c1a:	e012      	b.n	8007c42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d206      	bcs.n	8007c32 <prvInsertTimerInActiveList+0x62>
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d302      	bcc.n	8007c32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	e007      	b.n	8007c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c32:	4b07      	ldr	r3, [pc, #28]	@ (8007c50 <prvInsertTimerInActiveList+0x80>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fe f9d2 	bl	8005fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c42:	697b      	ldr	r3, [r7, #20]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20001018 	.word	0x20001018
 8007c50:	20001014 	.word	0x20001014

08007c54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	@ 0x38
 8007c58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c5a:	e0ce      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da19      	bge.n	8007c96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c62:	1d3b      	adds	r3, r7, #4
 8007c64:	3304      	adds	r3, #4
 8007c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	61fb      	str	r3, [r7, #28]
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c8c:	6850      	ldr	r0, [r2, #4]
 8007c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c90:	6892      	ldr	r2, [r2, #8]
 8007c92:	4611      	mov	r1, r2
 8007c94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f2c0 80ae 	blt.w	8007dfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f9d2 	bl	8006058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff ff6a 	bl	8007b90 <prvSampleTimeNow>
 8007cbc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b09      	cmp	r3, #9
 8007cc2:	f200 8097 	bhi.w	8007df4 <prvProcessReceivedCommands+0x1a0>
 8007cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <prvProcessReceivedCommands+0x78>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007d6b 	.word	0x08007d6b
 8007cdc:	08007d7f 	.word	0x08007d7f
 8007ce0:	08007dcb 	.word	0x08007dcb
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007cf5 	.word	0x08007cf5
 8007cec:	08007d6b 	.word	0x08007d6b
 8007cf0:	08007d7f 	.word	0x08007d7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	18d1      	adds	r1, r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d14:	f7ff ff5c 	bl	8007bd0 <prvInsertTimerInActiveList>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d06c      	beq.n	8007df8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d061      	beq.n	8007df8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	441a      	add	r2, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2300      	movs	r3, #0
 8007d42:	2100      	movs	r1, #0
 8007d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d46:	f7ff fe01 	bl	800794c <xTimerGenericCommand>
 8007d4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d152      	bne.n	8007df8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	61bb      	str	r3, [r7, #24]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d7c:	e03d      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	617b      	str	r3, [r7, #20]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	18d1      	adds	r1, r2, r3
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc4:	f7ff ff04 	bl	8007bd0 <prvInsertTimerInActiveList>
					break;
 8007dc8:	e017      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d103      	bne.n	8007de0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dda:	f000 fbe5 	bl	80085a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dde:	e00c      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007df2:	e002      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <prvProcessReceivedCommands+0x1a6>
					break;
 8007df8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfa:	4b08      	ldr	r3, [pc, #32]	@ (8007e1c <prvProcessReceivedCommands+0x1c8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	1d39      	adds	r1, r7, #4
 8007e00:	2200      	movs	r2, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fbfc 	bl	8006600 <xQueueReceive>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f47f af26 	bne.w	8007c5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	3730      	adds	r7, #48	@ 0x30
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000101c 	.word	0x2000101c

08007e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e26:	e049      	b.n	8007ebc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e28:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e32:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe f909 	bl	8006058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d02f      	beq.n	8007ebc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d90e      	bls.n	8007e8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f7fe f8ae 	bl	8005fe6 <vListInsert>
 8007e8a:	e017      	b.n	8007ebc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	2100      	movs	r1, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fd58 	bl	800794c <xTimerGenericCommand>
 8007e9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	603b      	str	r3, [r7, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ebc:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1b0      	bne.n	8007e28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ec6:	4b07      	ldr	r3, [pc, #28]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <prvSwitchTimerLists+0xc8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a04      	ldr	r2, [pc, #16]	@ (8007ee4 <prvSwitchTimerLists+0xc4>)
 8007ed2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ed4:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <prvSwitchTimerLists+0xc8>)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	6013      	str	r3, [r2, #0]
}
 8007eda:	bf00      	nop
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20001014 	.word	0x20001014
 8007ee8:	20001018 	.word	0x20001018

08007eec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ef2:	f000 f969 	bl	80081c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ef6:	4b15      	ldr	r3, [pc, #84]	@ (8007f4c <prvCheckForValidListAndQueue+0x60>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d120      	bne.n	8007f40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007efe:	4814      	ldr	r0, [pc, #80]	@ (8007f50 <prvCheckForValidListAndQueue+0x64>)
 8007f00:	f7fe f820 	bl	8005f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f04:	4813      	ldr	r0, [pc, #76]	@ (8007f54 <prvCheckForValidListAndQueue+0x68>)
 8007f06:	f7fe f81d 	bl	8005f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f0a:	4b13      	ldr	r3, [pc, #76]	@ (8007f58 <prvCheckForValidListAndQueue+0x6c>)
 8007f0c:	4a10      	ldr	r2, [pc, #64]	@ (8007f50 <prvCheckForValidListAndQueue+0x64>)
 8007f0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f10:	4b12      	ldr	r3, [pc, #72]	@ (8007f5c <prvCheckForValidListAndQueue+0x70>)
 8007f12:	4a10      	ldr	r2, [pc, #64]	@ (8007f54 <prvCheckForValidListAndQueue+0x68>)
 8007f14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f16:	2300      	movs	r3, #0
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4b11      	ldr	r3, [pc, #68]	@ (8007f60 <prvCheckForValidListAndQueue+0x74>)
 8007f1c:	4a11      	ldr	r2, [pc, #68]	@ (8007f64 <prvCheckForValidListAndQueue+0x78>)
 8007f1e:	2110      	movs	r1, #16
 8007f20:	200a      	movs	r0, #10
 8007f22:	f7fe f92d 	bl	8006180 <xQueueGenericCreateStatic>
 8007f26:	4603      	mov	r3, r0
 8007f28:	4a08      	ldr	r2, [pc, #32]	@ (8007f4c <prvCheckForValidListAndQueue+0x60>)
 8007f2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f2c:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <prvCheckForValidListAndQueue+0x60>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <prvCheckForValidListAndQueue+0x60>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	490b      	ldr	r1, [pc, #44]	@ (8007f68 <prvCheckForValidListAndQueue+0x7c>)
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fd52 	bl	80069e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f40:	f000 f974 	bl	800822c <vPortExitCritical>
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2000101c 	.word	0x2000101c
 8007f50:	20000fec 	.word	0x20000fec
 8007f54:	20001000 	.word	0x20001000
 8007f58:	20001014 	.word	0x20001014
 8007f5c:	20001018 	.word	0x20001018
 8007f60:	200010c8 	.word	0x200010c8
 8007f64:	20001028 	.word	0x20001028
 8007f68:	0800b184 	.word	0x0800b184

08007f6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3b04      	subs	r3, #4
 8007f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd0 <pxPortInitialiseStack+0x64>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3b14      	subs	r3, #20
 8007fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f06f 0202 	mvn.w	r2, #2
 8007fba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3b20      	subs	r3, #32
 8007fc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	08007fd5 	.word	0x08007fd5

08007fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fde:	4b13      	ldr	r3, [pc, #76]	@ (800802c <prvTaskExitError+0x58>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d00b      	beq.n	8008000 <prvTaskExitError+0x2c>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	60fb      	str	r3, [r7, #12]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <prvTaskExitError+0x28>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60bb      	str	r3, [r7, #8]
}
 8008012:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008014:	bf00      	nop
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0fc      	beq.n	8008016 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	2000000c 	.word	0x2000000c

08008030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008030:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <pxCurrentTCBConst2>)
 8008032:	6819      	ldr	r1, [r3, #0]
 8008034:	6808      	ldr	r0, [r1, #0]
 8008036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	f380 8809 	msr	PSP, r0
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8811 	msr	BASEPRI, r0
 800804a:	4770      	bx	lr
 800804c:	f3af 8000 	nop.w

08008050 <pxCurrentTCBConst2>:
 8008050:	20000aec 	.word	0x20000aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop

08008058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008058:	4808      	ldr	r0, [pc, #32]	@ (800807c <prvPortStartFirstTask+0x24>)
 800805a:	6800      	ldr	r0, [r0, #0]
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	f380 8808 	msr	MSP, r0
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8814 	msr	CONTROL, r0
 800806a:	b662      	cpsie	i
 800806c:	b661      	cpsie	f
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	df00      	svc	0
 8008078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800807a:	bf00      	nop
 800807c:	e000ed08 	.word	0xe000ed08

08008080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008086:	4b47      	ldr	r3, [pc, #284]	@ (80081a4 <xPortStartScheduler+0x124>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a47      	ldr	r2, [pc, #284]	@ (80081a8 <xPortStartScheduler+0x128>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d10b      	bne.n	80080a8 <xPortStartScheduler+0x28>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080a8:	4b3e      	ldr	r3, [pc, #248]	@ (80081a4 <xPortStartScheduler+0x124>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a3f      	ldr	r2, [pc, #252]	@ (80081ac <xPortStartScheduler+0x12c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d10b      	bne.n	80080ca <xPortStartScheduler+0x4a>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080ca:	4b39      	ldr	r3, [pc, #228]	@ (80081b0 <xPortStartScheduler+0x130>)
 80080cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	22ff      	movs	r2, #255	@ 0xff
 80080da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	4b31      	ldr	r3, [pc, #196]	@ (80081b4 <xPortStartScheduler+0x134>)
 80080f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080f2:	4b31      	ldr	r3, [pc, #196]	@ (80081b8 <xPortStartScheduler+0x138>)
 80080f4:	2207      	movs	r2, #7
 80080f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080f8:	e009      	b.n	800810e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080fa:	4b2f      	ldr	r3, [pc, #188]	@ (80081b8 <xPortStartScheduler+0x138>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	4a2d      	ldr	r2, [pc, #180]	@ (80081b8 <xPortStartScheduler+0x138>)
 8008102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b80      	cmp	r3, #128	@ 0x80
 8008118:	d0ef      	beq.n	80080fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800811a:	4b27      	ldr	r3, [pc, #156]	@ (80081b8 <xPortStartScheduler+0x138>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1c3 0307 	rsb	r3, r3, #7
 8008122:	2b04      	cmp	r3, #4
 8008124:	d00b      	beq.n	800813e <xPortStartScheduler+0xbe>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	60bb      	str	r3, [r7, #8]
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	e7fd      	b.n	800813a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800813e:	4b1e      	ldr	r3, [pc, #120]	@ (80081b8 <xPortStartScheduler+0x138>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	4a1c      	ldr	r2, [pc, #112]	@ (80081b8 <xPortStartScheduler+0x138>)
 8008146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008148:	4b1b      	ldr	r3, [pc, #108]	@ (80081b8 <xPortStartScheduler+0x138>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008150:	4a19      	ldr	r2, [pc, #100]	@ (80081b8 <xPortStartScheduler+0x138>)
 8008152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800815c:	4b17      	ldr	r3, [pc, #92]	@ (80081bc <xPortStartScheduler+0x13c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a16      	ldr	r2, [pc, #88]	@ (80081bc <xPortStartScheduler+0x13c>)
 8008162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008168:	4b14      	ldr	r3, [pc, #80]	@ (80081bc <xPortStartScheduler+0x13c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a13      	ldr	r2, [pc, #76]	@ (80081bc <xPortStartScheduler+0x13c>)
 800816e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008174:	f000 f8da 	bl	800832c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008178:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <xPortStartScheduler+0x140>)
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800817e:	f000 f8f9 	bl	8008374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008182:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <xPortStartScheduler+0x144>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <xPortStartScheduler+0x144>)
 8008188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800818c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800818e:	f7ff ff63 	bl	8008058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008192:	f7ff f83f 	bl	8007214 <vTaskSwitchContext>
	prvTaskExitError();
 8008196:	f7ff ff1d 	bl	8007fd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed00 	.word	0xe000ed00
 80081a8:	410fc271 	.word	0x410fc271
 80081ac:	410fc270 	.word	0x410fc270
 80081b0:	e000e400 	.word	0xe000e400
 80081b4:	20001118 	.word	0x20001118
 80081b8:	2000111c 	.word	0x2000111c
 80081bc:	e000ed20 	.word	0xe000ed20
 80081c0:	2000000c 	.word	0x2000000c
 80081c4:	e000ef34 	.word	0xe000ef34

080081c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081e2:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <vPortEnterCritical+0x5c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008224 <vPortEnterCritical+0x5c>)
 80081ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <vPortEnterCritical+0x5c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d110      	bne.n	8008216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <vPortEnterCritical+0x60>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <vPortEnterCritical+0x4e>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	603b      	str	r3, [r7, #0]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <vPortEnterCritical+0x4a>
	}
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000000c 	.word	0x2000000c
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008232:	4b12      	ldr	r3, [pc, #72]	@ (800827c <vPortExitCritical+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <vPortExitCritical+0x26>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	607b      	str	r3, [r7, #4]
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	e7fd      	b.n	800824e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <vPortExitCritical+0x50>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3b01      	subs	r3, #1
 8008258:	4a08      	ldr	r2, [pc, #32]	@ (800827c <vPortExitCritical+0x50>)
 800825a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <vPortExitCritical+0x50>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <vPortExitCritical+0x44>
 8008264:	2300      	movs	r3, #0
 8008266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	2000000c 	.word	0x2000000c

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b15      	ldr	r3, [pc, #84]	@ (80082e0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f01e 0f10 	tst.w	lr, #16
 8008290:	bf08      	it	eq
 8008292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80082a4:	f380 8811 	msr	BASEPRI, r0
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f7fe ffb0 	bl	8007214 <vTaskSwitchContext>
 80082b4:	f04f 0000 	mov.w	r0, #0
 80082b8:	f380 8811 	msr	BASEPRI, r0
 80082bc:	bc09      	pop	{r0, r3}
 80082be:	6819      	ldr	r1, [r3, #0]
 80082c0:	6808      	ldr	r0, [r1, #0]
 80082c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c6:	f01e 0f10 	tst.w	lr, #16
 80082ca:	bf08      	it	eq
 80082cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082d0:	f380 8809 	msr	PSP, r0
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	f3af 8000 	nop.w

080082e0 <pxCurrentTCBConst>:
 80082e0:	20000aec 	.word	0x20000aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008302:	f7fe fecd 	bl	80070a0 <xTaskIncrementTick>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <xPortSysTickHandler+0x40>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	2300      	movs	r3, #0
 8008316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f383 8811 	msr	BASEPRI, r3
}
 800831e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008330:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008336:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <vPortSetupTimerInterrupt+0x38>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800833c:	4b0a      	ldr	r3, [pc, #40]	@ (8008368 <vPortSetupTimerInterrupt+0x3c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <vPortSetupTimerInterrupt+0x40>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	4a09      	ldr	r2, [pc, #36]	@ (8008370 <vPortSetupTimerInterrupt+0x44>)
 800834a:	3b01      	subs	r3, #1
 800834c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800834e:	4b04      	ldr	r3, [pc, #16]	@ (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008350:	2207      	movs	r2, #7
 8008352:	601a      	str	r2, [r3, #0]
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	e000e010 	.word	0xe000e010
 8008364:	e000e018 	.word	0xe000e018
 8008368:	20000000 	.word	0x20000000
 800836c:	51eb851f 	.word	0x51eb851f
 8008370:	e000e014 	.word	0xe000e014

08008374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008384 <vPortEnableVFP+0x10>
 8008378:	6801      	ldr	r1, [r0, #0]
 800837a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800837e:	6001      	str	r1, [r0, #0]
 8008380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008382:	bf00      	nop
 8008384:	e000ed88 	.word	0xe000ed88

08008388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800838e:	f3ef 8305 	mrs	r3, IPSR
 8008392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b0f      	cmp	r3, #15
 8008398:	d915      	bls.n	80083c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800839a:	4a18      	ldr	r2, [pc, #96]	@ (80083fc <vPortValidateInterruptPriority+0x74>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083a4:	4b16      	ldr	r3, [pc, #88]	@ (8008400 <vPortValidateInterruptPriority+0x78>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	7afa      	ldrb	r2, [r7, #11]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d20b      	bcs.n	80083c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	607b      	str	r3, [r7, #4]
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <vPortValidateInterruptPriority+0x7c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008408 <vPortValidateInterruptPriority+0x80>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d90b      	bls.n	80083ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	603b      	str	r3, [r7, #0]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <vPortValidateInterruptPriority+0x62>
	}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	e000e3f0 	.word	0xe000e3f0
 8008400:	20001118 	.word	0x20001118
 8008404:	e000ed0c 	.word	0xe000ed0c
 8008408:	2000111c 	.word	0x2000111c

0800840c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	@ 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008414:	2300      	movs	r3, #0
 8008416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008418:	f7fe fd86 	bl	8006f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800841c:	4b5c      	ldr	r3, [pc, #368]	@ (8008590 <pvPortMalloc+0x184>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008424:	f000 f924 	bl	8008670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008428:	4b5a      	ldr	r3, [pc, #360]	@ (8008594 <pvPortMalloc+0x188>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4013      	ands	r3, r2
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 8095 	bne.w	8008560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01e      	beq.n	800847a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800843c:	2208      	movs	r2, #8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d015      	beq.n	800847a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f023 0307 	bic.w	r3, r3, #7
 8008454:	3308      	adds	r3, #8
 8008456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <pvPortMalloc+0x6e>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	617b      	str	r3, [r7, #20]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d06f      	beq.n	8008560 <pvPortMalloc+0x154>
 8008480:	4b45      	ldr	r3, [pc, #276]	@ (8008598 <pvPortMalloc+0x18c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d86a      	bhi.n	8008560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800848a:	4b44      	ldr	r3, [pc, #272]	@ (800859c <pvPortMalloc+0x190>)
 800848c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800848e:	4b43      	ldr	r3, [pc, #268]	@ (800859c <pvPortMalloc+0x190>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008494:	e004      	b.n	80084a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d903      	bls.n	80084b2 <pvPortMalloc+0xa6>
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f1      	bne.n	8008496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084b2:	4b37      	ldr	r3, [pc, #220]	@ (8008590 <pvPortMalloc+0x184>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d051      	beq.n	8008560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2208      	movs	r2, #8
 80084c2:	4413      	add	r3, r2
 80084c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	2308      	movs	r3, #8
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	429a      	cmp	r2, r3
 80084dc:	d920      	bls.n	8008520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <pvPortMalloc+0xfc>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	e7fd      	b.n	8008504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800851a:	69b8      	ldr	r0, [r7, #24]
 800851c:	f000 f90a 	bl	8008734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008520:	4b1d      	ldr	r3, [pc, #116]	@ (8008598 <pvPortMalloc+0x18c>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	4a1b      	ldr	r2, [pc, #108]	@ (8008598 <pvPortMalloc+0x18c>)
 800852c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800852e:	4b1a      	ldr	r3, [pc, #104]	@ (8008598 <pvPortMalloc+0x18c>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4b1b      	ldr	r3, [pc, #108]	@ (80085a0 <pvPortMalloc+0x194>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d203      	bcs.n	8008542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800853a:	4b17      	ldr	r3, [pc, #92]	@ (8008598 <pvPortMalloc+0x18c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a18      	ldr	r2, [pc, #96]	@ (80085a0 <pvPortMalloc+0x194>)
 8008540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	4b13      	ldr	r3, [pc, #76]	@ (8008594 <pvPortMalloc+0x188>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	431a      	orrs	r2, r3
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008556:	4b13      	ldr	r3, [pc, #76]	@ (80085a4 <pvPortMalloc+0x198>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a11      	ldr	r2, [pc, #68]	@ (80085a4 <pvPortMalloc+0x198>)
 800855e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008560:	f7fe fcf0 	bl	8006f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <pvPortMalloc+0x17a>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60fb      	str	r3, [r7, #12]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <pvPortMalloc+0x176>
	return pvReturn;
 8008586:	69fb      	ldr	r3, [r7, #28]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3728      	adds	r7, #40	@ 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20001d28 	.word	0x20001d28
 8008594:	20001d3c 	.word	0x20001d3c
 8008598:	20001d2c 	.word	0x20001d2c
 800859c:	20001d20 	.word	0x20001d20
 80085a0:	20001d30 	.word	0x20001d30
 80085a4:	20001d34 	.word	0x20001d34

080085a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d04f      	beq.n	800865a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ba:	2308      	movs	r3, #8
 80085bc:	425b      	negs	r3, r3
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b25      	ldr	r3, [pc, #148]	@ (8008664 <vPortFree+0xbc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4013      	ands	r3, r2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <vPortFree+0x46>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60fb      	str	r3, [r7, #12]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <vPortFree+0x66>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60bb      	str	r3, [r7, #8]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <vPortFree+0xbc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4013      	ands	r3, r2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01e      	beq.n	800865a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11a      	bne.n	800865a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	4b0e      	ldr	r3, [pc, #56]	@ (8008664 <vPortFree+0xbc>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	43db      	mvns	r3, r3
 800862e:	401a      	ands	r2, r3
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008634:	f7fe fc78 	bl	8006f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <vPortFree+0xc0>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4413      	add	r3, r2
 8008642:	4a09      	ldr	r2, [pc, #36]	@ (8008668 <vPortFree+0xc0>)
 8008644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008646:	6938      	ldr	r0, [r7, #16]
 8008648:	f000 f874 	bl	8008734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800864c:	4b07      	ldr	r3, [pc, #28]	@ (800866c <vPortFree+0xc4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	4a06      	ldr	r2, [pc, #24]	@ (800866c <vPortFree+0xc4>)
 8008654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008656:	f7fe fc75 	bl	8006f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800865a:	bf00      	nop
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20001d3c 	.word	0x20001d3c
 8008668:	20001d2c 	.word	0x20001d2c
 800866c:	20001d38 	.word	0x20001d38

08008670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008676:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800867a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800867c:	4b27      	ldr	r3, [pc, #156]	@ (800871c <prvHeapInit+0xac>)
 800867e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3307      	adds	r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	4a1f      	ldr	r2, [pc, #124]	@ (800871c <prvHeapInit+0xac>)
 80086a0:	4413      	add	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008720 <prvHeapInit+0xb0>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008720 <prvHeapInit+0xb0>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4413      	add	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086bc:	2208      	movs	r2, #8
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1a9b      	subs	r3, r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0307 	bic.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <prvHeapInit+0xb4>)
 80086d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086d2:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <prvHeapInit+0xb4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2200      	movs	r2, #0
 80086d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086da:	4b12      	ldr	r3, [pc, #72]	@ (8008724 <prvHeapInit+0xb4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	1ad2      	subs	r2, r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <prvHeapInit+0xb4>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008728 <prvHeapInit+0xb8>)
 80086fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	4a09      	ldr	r2, [pc, #36]	@ (800872c <prvHeapInit+0xbc>)
 8008706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008708:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <prvHeapInit+0xc0>)
 800870a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800870e:	601a      	str	r2, [r3, #0]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20001120 	.word	0x20001120
 8008720:	20001d20 	.word	0x20001d20
 8008724:	20001d28 	.word	0x20001d28
 8008728:	20001d30 	.word	0x20001d30
 800872c:	20001d2c 	.word	0x20001d2c
 8008730:	20001d3c 	.word	0x20001d3c

08008734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800873c:	4b28      	ldr	r3, [pc, #160]	@ (80087e0 <prvInsertBlockIntoFreeList+0xac>)
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e002      	b.n	8008748 <prvInsertBlockIntoFreeList+0x14>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d8f7      	bhi.n	8008742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d108      	bne.n	8008776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	441a      	add	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d118      	bne.n	80087bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b15      	ldr	r3, [pc, #84]	@ (80087e4 <prvInsertBlockIntoFreeList+0xb0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d00d      	beq.n	80087b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	441a      	add	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e008      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087b2:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <prvInsertBlockIntoFreeList+0xb0>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	e003      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d002      	beq.n	80087d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d2:	bf00      	nop
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20001d20 	.word	0x20001d20
 80087e4:	20001d28 	.word	0x20001d28

080087e8 <__cvt>:
 80087e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	ec57 6b10 	vmov	r6, r7, d0
 80087f0:	2f00      	cmp	r7, #0
 80087f2:	460c      	mov	r4, r1
 80087f4:	4619      	mov	r1, r3
 80087f6:	463b      	mov	r3, r7
 80087f8:	bfbb      	ittet	lt
 80087fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087fe:	461f      	movlt	r7, r3
 8008800:	2300      	movge	r3, #0
 8008802:	232d      	movlt	r3, #45	@ 0x2d
 8008804:	700b      	strb	r3, [r1, #0]
 8008806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008808:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800880c:	4691      	mov	r9, r2
 800880e:	f023 0820 	bic.w	r8, r3, #32
 8008812:	bfbc      	itt	lt
 8008814:	4632      	movlt	r2, r6
 8008816:	4616      	movlt	r6, r2
 8008818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800881c:	d005      	beq.n	800882a <__cvt+0x42>
 800881e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008822:	d100      	bne.n	8008826 <__cvt+0x3e>
 8008824:	3401      	adds	r4, #1
 8008826:	2102      	movs	r1, #2
 8008828:	e000      	b.n	800882c <__cvt+0x44>
 800882a:	2103      	movs	r1, #3
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	ab02      	add	r3, sp, #8
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	ec47 6b10 	vmov	d0, r6, r7
 8008838:	4653      	mov	r3, sl
 800883a:	4622      	mov	r2, r4
 800883c:	f000 fe5c 	bl	80094f8 <_dtoa_r>
 8008840:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008844:	4605      	mov	r5, r0
 8008846:	d119      	bne.n	800887c <__cvt+0x94>
 8008848:	f019 0f01 	tst.w	r9, #1
 800884c:	d00e      	beq.n	800886c <__cvt+0x84>
 800884e:	eb00 0904 	add.w	r9, r0, r4
 8008852:	2200      	movs	r2, #0
 8008854:	2300      	movs	r3, #0
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f8 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800885e:	b108      	cbz	r0, 8008864 <__cvt+0x7c>
 8008860:	f8cd 900c 	str.w	r9, [sp, #12]
 8008864:	2230      	movs	r2, #48	@ 0x30
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	454b      	cmp	r3, r9
 800886a:	d31e      	bcc.n	80088aa <__cvt+0xc2>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008870:	1b5b      	subs	r3, r3, r5
 8008872:	4628      	mov	r0, r5
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	b004      	add	sp, #16
 8008878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008880:	eb00 0904 	add.w	r9, r0, r4
 8008884:	d1e5      	bne.n	8008852 <__cvt+0x6a>
 8008886:	7803      	ldrb	r3, [r0, #0]
 8008888:	2b30      	cmp	r3, #48	@ 0x30
 800888a:	d10a      	bne.n	80088a2 <__cvt+0xba>
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 f940 	bl	8000b18 <__aeabi_dcmpeq>
 8008898:	b918      	cbnz	r0, 80088a2 <__cvt+0xba>
 800889a:	f1c4 0401 	rsb	r4, r4, #1
 800889e:	f8ca 4000 	str.w	r4, [sl]
 80088a2:	f8da 3000 	ldr.w	r3, [sl]
 80088a6:	4499      	add	r9, r3
 80088a8:	e7d3      	b.n	8008852 <__cvt+0x6a>
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	9103      	str	r1, [sp, #12]
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7d9      	b.n	8008866 <__cvt+0x7e>

080088b2 <__exponent>:
 80088b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b4:	2900      	cmp	r1, #0
 80088b6:	bfba      	itte	lt
 80088b8:	4249      	neglt	r1, r1
 80088ba:	232d      	movlt	r3, #45	@ 0x2d
 80088bc:	232b      	movge	r3, #43	@ 0x2b
 80088be:	2909      	cmp	r1, #9
 80088c0:	7002      	strb	r2, [r0, #0]
 80088c2:	7043      	strb	r3, [r0, #1]
 80088c4:	dd29      	ble.n	800891a <__exponent+0x68>
 80088c6:	f10d 0307 	add.w	r3, sp, #7
 80088ca:	461d      	mov	r5, r3
 80088cc:	270a      	movs	r7, #10
 80088ce:	461a      	mov	r2, r3
 80088d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80088d4:	fb07 1416 	mls	r4, r7, r6, r1
 80088d8:	3430      	adds	r4, #48	@ 0x30
 80088da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088de:	460c      	mov	r4, r1
 80088e0:	2c63      	cmp	r4, #99	@ 0x63
 80088e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80088e6:	4631      	mov	r1, r6
 80088e8:	dcf1      	bgt.n	80088ce <__exponent+0x1c>
 80088ea:	3130      	adds	r1, #48	@ 0x30
 80088ec:	1e94      	subs	r4, r2, #2
 80088ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088f2:	1c41      	adds	r1, r0, #1
 80088f4:	4623      	mov	r3, r4
 80088f6:	42ab      	cmp	r3, r5
 80088f8:	d30a      	bcc.n	8008910 <__exponent+0x5e>
 80088fa:	f10d 0309 	add.w	r3, sp, #9
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	42ac      	cmp	r4, r5
 8008902:	bf88      	it	hi
 8008904:	2300      	movhi	r3, #0
 8008906:	3302      	adds	r3, #2
 8008908:	4403      	add	r3, r0
 800890a:	1a18      	subs	r0, r3, r0
 800890c:	b003      	add	sp, #12
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008910:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008914:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008918:	e7ed      	b.n	80088f6 <__exponent+0x44>
 800891a:	2330      	movs	r3, #48	@ 0x30
 800891c:	3130      	adds	r1, #48	@ 0x30
 800891e:	7083      	strb	r3, [r0, #2]
 8008920:	70c1      	strb	r1, [r0, #3]
 8008922:	1d03      	adds	r3, r0, #4
 8008924:	e7f1      	b.n	800890a <__exponent+0x58>
	...

08008928 <_printf_float>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	b08d      	sub	sp, #52	@ 0x34
 800892e:	460c      	mov	r4, r1
 8008930:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008934:	4616      	mov	r6, r2
 8008936:	461f      	mov	r7, r3
 8008938:	4605      	mov	r5, r0
 800893a:	f000 fccd 	bl	80092d8 <_localeconv_r>
 800893e:	6803      	ldr	r3, [r0, #0]
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	4618      	mov	r0, r3
 8008944:	f7f7 fcbc 	bl	80002c0 <strlen>
 8008948:	2300      	movs	r3, #0
 800894a:	930a      	str	r3, [sp, #40]	@ 0x28
 800894c:	f8d8 3000 	ldr.w	r3, [r8]
 8008950:	9005      	str	r0, [sp, #20]
 8008952:	3307      	adds	r3, #7
 8008954:	f023 0307 	bic.w	r3, r3, #7
 8008958:	f103 0208 	add.w	r2, r3, #8
 800895c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008960:	f8d4 b000 	ldr.w	fp, [r4]
 8008964:	f8c8 2000 	str.w	r2, [r8]
 8008968:	e9d3 8900 	ldrd	r8, r9, [r3]
 800896c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008970:	9307      	str	r3, [sp, #28]
 8008972:	f8cd 8018 	str.w	r8, [sp, #24]
 8008976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800897a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800897e:	4b9c      	ldr	r3, [pc, #624]	@ (8008bf0 <_printf_float+0x2c8>)
 8008980:	f04f 32ff 	mov.w	r2, #4294967295
 8008984:	f7f8 f8fa 	bl	8000b7c <__aeabi_dcmpun>
 8008988:	bb70      	cbnz	r0, 80089e8 <_printf_float+0xc0>
 800898a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800898e:	4b98      	ldr	r3, [pc, #608]	@ (8008bf0 <_printf_float+0x2c8>)
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	f7f8 f8d4 	bl	8000b40 <__aeabi_dcmple>
 8008998:	bb30      	cbnz	r0, 80089e8 <_printf_float+0xc0>
 800899a:	2200      	movs	r2, #0
 800899c:	2300      	movs	r3, #0
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f8 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 80089a6:	b110      	cbz	r0, 80089ae <_printf_float+0x86>
 80089a8:	232d      	movs	r3, #45	@ 0x2d
 80089aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089ae:	4a91      	ldr	r2, [pc, #580]	@ (8008bf4 <_printf_float+0x2cc>)
 80089b0:	4b91      	ldr	r3, [pc, #580]	@ (8008bf8 <_printf_float+0x2d0>)
 80089b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089b6:	bf94      	ite	ls
 80089b8:	4690      	movls	r8, r2
 80089ba:	4698      	movhi	r8, r3
 80089bc:	2303      	movs	r3, #3
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	f02b 0304 	bic.w	r3, fp, #4
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	9700      	str	r7, [sp, #0]
 80089cc:	4633      	mov	r3, r6
 80089ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089d0:	4621      	mov	r1, r4
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 f9d2 	bl	8008d7c <_printf_common>
 80089d8:	3001      	adds	r0, #1
 80089da:	f040 808d 	bne.w	8008af8 <_printf_float+0x1d0>
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	b00d      	add	sp, #52	@ 0x34
 80089e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f8 f8c4 	bl	8000b7c <__aeabi_dcmpun>
 80089f4:	b140      	cbz	r0, 8008a08 <_printf_float+0xe0>
 80089f6:	464b      	mov	r3, r9
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bfbc      	itt	lt
 80089fc:	232d      	movlt	r3, #45	@ 0x2d
 80089fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a02:	4a7e      	ldr	r2, [pc, #504]	@ (8008bfc <_printf_float+0x2d4>)
 8008a04:	4b7e      	ldr	r3, [pc, #504]	@ (8008c00 <_printf_float+0x2d8>)
 8008a06:	e7d4      	b.n	80089b2 <_printf_float+0x8a>
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a0e:	9206      	str	r2, [sp, #24]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	d13b      	bne.n	8008a8c <_printf_float+0x164>
 8008a14:	2306      	movs	r3, #6
 8008a16:	6063      	str	r3, [r4, #4]
 8008a18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a28:	ab09      	add	r3, sp, #36	@ 0x24
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	6861      	ldr	r1, [r4, #4]
 8008a2e:	ec49 8b10 	vmov	d0, r8, r9
 8008a32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7ff fed6 	bl	80087e8 <__cvt>
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a40:	2b47      	cmp	r3, #71	@ 0x47
 8008a42:	4680      	mov	r8, r0
 8008a44:	d129      	bne.n	8008a9a <_printf_float+0x172>
 8008a46:	1cc8      	adds	r0, r1, #3
 8008a48:	db02      	blt.n	8008a50 <_printf_float+0x128>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	dd41      	ble.n	8008ad4 <_printf_float+0x1ac>
 8008a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a54:	fa5f fa8a 	uxtb.w	sl, sl
 8008a58:	3901      	subs	r1, #1
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a60:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a62:	f7ff ff26 	bl	80088b2 <__exponent>
 8008a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a68:	1813      	adds	r3, r2, r0
 8008a6a:	2a01      	cmp	r2, #1
 8008a6c:	4681      	mov	r9, r0
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	dc02      	bgt.n	8008a78 <_printf_float+0x150>
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	07d2      	lsls	r2, r2, #31
 8008a76:	d501      	bpl.n	8008a7c <_printf_float+0x154>
 8008a78:	3301      	adds	r3, #1
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0a2      	beq.n	80089ca <_printf_float+0xa2>
 8008a84:	232d      	movs	r3, #45	@ 0x2d
 8008a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a8a:	e79e      	b.n	80089ca <_printf_float+0xa2>
 8008a8c:	9a06      	ldr	r2, [sp, #24]
 8008a8e:	2a47      	cmp	r2, #71	@ 0x47
 8008a90:	d1c2      	bne.n	8008a18 <_printf_float+0xf0>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1c0      	bne.n	8008a18 <_printf_float+0xf0>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7bd      	b.n	8008a16 <_printf_float+0xee>
 8008a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9e:	d9db      	bls.n	8008a58 <_printf_float+0x130>
 8008aa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008aa4:	d118      	bne.n	8008ad8 <_printf_float+0x1b0>
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	dd0b      	ble.n	8008ac4 <_printf_float+0x19c>
 8008aac:	6121      	str	r1, [r4, #16]
 8008aae:	b913      	cbnz	r3, 8008ab6 <_printf_float+0x18e>
 8008ab0:	6822      	ldr	r2, [r4, #0]
 8008ab2:	07d0      	lsls	r0, r2, #31
 8008ab4:	d502      	bpl.n	8008abc <_printf_float+0x194>
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	440b      	add	r3, r1
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008abe:	f04f 0900 	mov.w	r9, #0
 8008ac2:	e7db      	b.n	8008a7c <_printf_float+0x154>
 8008ac4:	b913      	cbnz	r3, 8008acc <_printf_float+0x1a4>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	07d2      	lsls	r2, r2, #31
 8008aca:	d501      	bpl.n	8008ad0 <_printf_float+0x1a8>
 8008acc:	3302      	adds	r3, #2
 8008ace:	e7f4      	b.n	8008aba <_printf_float+0x192>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e7f2      	b.n	8008aba <_printf_float+0x192>
 8008ad4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ada:	4299      	cmp	r1, r3
 8008adc:	db05      	blt.n	8008aea <_printf_float+0x1c2>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	6121      	str	r1, [r4, #16]
 8008ae2:	07d8      	lsls	r0, r3, #31
 8008ae4:	d5ea      	bpl.n	8008abc <_printf_float+0x194>
 8008ae6:	1c4b      	adds	r3, r1, #1
 8008ae8:	e7e7      	b.n	8008aba <_printf_float+0x192>
 8008aea:	2900      	cmp	r1, #0
 8008aec:	bfd4      	ite	le
 8008aee:	f1c1 0202 	rsble	r2, r1, #2
 8008af2:	2201      	movgt	r2, #1
 8008af4:	4413      	add	r3, r2
 8008af6:	e7e0      	b.n	8008aba <_printf_float+0x192>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	055a      	lsls	r2, r3, #21
 8008afc:	d407      	bmi.n	8008b0e <_printf_float+0x1e6>
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	4642      	mov	r2, r8
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d12b      	bne.n	8008b64 <_printf_float+0x23c>
 8008b0c:	e767      	b.n	80089de <_printf_float+0xb6>
 8008b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b12:	f240 80dd 	bls.w	8008cd0 <_printf_float+0x3a8>
 8008b16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f7f7 fffb 	bl	8000b18 <__aeabi_dcmpeq>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d033      	beq.n	8008b8e <_printf_float+0x266>
 8008b26:	4a37      	ldr	r2, [pc, #220]	@ (8008c04 <_printf_float+0x2dc>)
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f af54 	beq.w	80089de <_printf_float+0xb6>
 8008b36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b3a:	4543      	cmp	r3, r8
 8008b3c:	db02      	blt.n	8008b44 <_printf_float+0x21c>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	07d8      	lsls	r0, r3, #31
 8008b42:	d50f      	bpl.n	8008b64 <_printf_float+0x23c>
 8008b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f af45 	beq.w	80089de <_printf_float+0xb6>
 8008b54:	f04f 0900 	mov.w	r9, #0
 8008b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b5c:	f104 0a1a 	add.w	sl, r4, #26
 8008b60:	45c8      	cmp	r8, r9
 8008b62:	dc09      	bgt.n	8008b78 <_printf_float+0x250>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	079b      	lsls	r3, r3, #30
 8008b68:	f100 8103 	bmi.w	8008d72 <_printf_float+0x44a>
 8008b6c:	68e0      	ldr	r0, [r4, #12]
 8008b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b70:	4298      	cmp	r0, r3
 8008b72:	bfb8      	it	lt
 8008b74:	4618      	movlt	r0, r3
 8008b76:	e734      	b.n	80089e2 <_printf_float+0xba>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f af2b 	beq.w	80089de <_printf_float+0xb6>
 8008b88:	f109 0901 	add.w	r9, r9, #1
 8008b8c:	e7e8      	b.n	8008b60 <_printf_float+0x238>
 8008b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc39      	bgt.n	8008c08 <_printf_float+0x2e0>
 8008b94:	4a1b      	ldr	r2, [pc, #108]	@ (8008c04 <_printf_float+0x2dc>)
 8008b96:	2301      	movs	r3, #1
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f af1d 	beq.w	80089de <_printf_float+0xb6>
 8008ba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ba8:	ea59 0303 	orrs.w	r3, r9, r3
 8008bac:	d102      	bne.n	8008bb4 <_printf_float+0x28c>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	07d9      	lsls	r1, r3, #31
 8008bb2:	d5d7      	bpl.n	8008b64 <_printf_float+0x23c>
 8008bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f43f af0d 	beq.w	80089de <_printf_float+0xb6>
 8008bc4:	f04f 0a00 	mov.w	sl, #0
 8008bc8:	f104 0b1a 	add.w	fp, r4, #26
 8008bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bce:	425b      	negs	r3, r3
 8008bd0:	4553      	cmp	r3, sl
 8008bd2:	dc01      	bgt.n	8008bd8 <_printf_float+0x2b0>
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	e793      	b.n	8008b00 <_printf_float+0x1d8>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	465a      	mov	r2, fp
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f aefb 	beq.w	80089de <_printf_float+0xb6>
 8008be8:	f10a 0a01 	add.w	sl, sl, #1
 8008bec:	e7ee      	b.n	8008bcc <_printf_float+0x2a4>
 8008bee:	bf00      	nop
 8008bf0:	7fefffff 	.word	0x7fefffff
 8008bf4:	0800b25c 	.word	0x0800b25c
 8008bf8:	0800b260 	.word	0x0800b260
 8008bfc:	0800b264 	.word	0x0800b264
 8008c00:	0800b268 	.word	0x0800b268
 8008c04:	0800b26c 	.word	0x0800b26c
 8008c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c0e:	4553      	cmp	r3, sl
 8008c10:	bfa8      	it	ge
 8008c12:	4653      	movge	r3, sl
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	4699      	mov	r9, r3
 8008c18:	dc36      	bgt.n	8008c88 <_printf_float+0x360>
 8008c1a:	f04f 0b00 	mov.w	fp, #0
 8008c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c22:	f104 021a 	add.w	r2, r4, #26
 8008c26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c28:	9306      	str	r3, [sp, #24]
 8008c2a:	eba3 0309 	sub.w	r3, r3, r9
 8008c2e:	455b      	cmp	r3, fp
 8008c30:	dc31      	bgt.n	8008c96 <_printf_float+0x36e>
 8008c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c34:	459a      	cmp	sl, r3
 8008c36:	dc3a      	bgt.n	8008cae <_printf_float+0x386>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	07da      	lsls	r2, r3, #31
 8008c3c:	d437      	bmi.n	8008cae <_printf_float+0x386>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c40:	ebaa 0903 	sub.w	r9, sl, r3
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	ebaa 0303 	sub.w	r3, sl, r3
 8008c4a:	4599      	cmp	r9, r3
 8008c4c:	bfa8      	it	ge
 8008c4e:	4699      	movge	r9, r3
 8008c50:	f1b9 0f00 	cmp.w	r9, #0
 8008c54:	dc33      	bgt.n	8008cbe <_printf_float+0x396>
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c5e:	f104 0b1a 	add.w	fp, r4, #26
 8008c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c64:	ebaa 0303 	sub.w	r3, sl, r3
 8008c68:	eba3 0309 	sub.w	r3, r3, r9
 8008c6c:	4543      	cmp	r3, r8
 8008c6e:	f77f af79 	ble.w	8008b64 <_printf_float+0x23c>
 8008c72:	2301      	movs	r3, #1
 8008c74:	465a      	mov	r2, fp
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b8      	blx	r7
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f43f aeae 	beq.w	80089de <_printf_float+0xb6>
 8008c82:	f108 0801 	add.w	r8, r8, #1
 8008c86:	e7ec      	b.n	8008c62 <_printf_float+0x33a>
 8008c88:	4642      	mov	r2, r8
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	d1c2      	bne.n	8008c1a <_printf_float+0x2f2>
 8008c94:	e6a3      	b.n	80089de <_printf_float+0xb6>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	9206      	str	r2, [sp, #24]
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f ae9c 	beq.w	80089de <_printf_float+0xb6>
 8008ca6:	9a06      	ldr	r2, [sp, #24]
 8008ca8:	f10b 0b01 	add.w	fp, fp, #1
 8008cac:	e7bb      	b.n	8008c26 <_printf_float+0x2fe>
 8008cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d1c0      	bne.n	8008c3e <_printf_float+0x316>
 8008cbc:	e68f      	b.n	80089de <_printf_float+0xb6>
 8008cbe:	9a06      	ldr	r2, [sp, #24]
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	4442      	add	r2, r8
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d1c3      	bne.n	8008c56 <_printf_float+0x32e>
 8008cce:	e686      	b.n	80089de <_printf_float+0xb6>
 8008cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cd4:	f1ba 0f01 	cmp.w	sl, #1
 8008cd8:	dc01      	bgt.n	8008cde <_printf_float+0x3b6>
 8008cda:	07db      	lsls	r3, r3, #31
 8008cdc:	d536      	bpl.n	8008d4c <_printf_float+0x424>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae78 	beq.w	80089de <_printf_float+0xb6>
 8008cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f43f ae70 	beq.w	80089de <_printf_float+0xb6>
 8008cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d02:	2200      	movs	r2, #0
 8008d04:	2300      	movs	r3, #0
 8008d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d0a:	f7f7 ff05 	bl	8000b18 <__aeabi_dcmpeq>
 8008d0e:	b9c0      	cbnz	r0, 8008d42 <_printf_float+0x41a>
 8008d10:	4653      	mov	r3, sl
 8008d12:	f108 0201 	add.w	r2, r8, #1
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d10c      	bne.n	8008d3a <_printf_float+0x412>
 8008d20:	e65d      	b.n	80089de <_printf_float+0xb6>
 8008d22:	2301      	movs	r3, #1
 8008d24:	465a      	mov	r2, fp
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f ae56 	beq.w	80089de <_printf_float+0xb6>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	45d0      	cmp	r8, sl
 8008d38:	dbf3      	blt.n	8008d22 <_printf_float+0x3fa>
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d40:	e6df      	b.n	8008b02 <_printf_float+0x1da>
 8008d42:	f04f 0800 	mov.w	r8, #0
 8008d46:	f104 0b1a 	add.w	fp, r4, #26
 8008d4a:	e7f4      	b.n	8008d36 <_printf_float+0x40e>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4642      	mov	r2, r8
 8008d50:	e7e1      	b.n	8008d16 <_printf_float+0x3ee>
 8008d52:	2301      	movs	r3, #1
 8008d54:	464a      	mov	r2, r9
 8008d56:	4631      	mov	r1, r6
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	f43f ae3e 	beq.w	80089de <_printf_float+0xb6>
 8008d62:	f108 0801 	add.w	r8, r8, #1
 8008d66:	68e3      	ldr	r3, [r4, #12]
 8008d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d6a:	1a5b      	subs	r3, r3, r1
 8008d6c:	4543      	cmp	r3, r8
 8008d6e:	dcf0      	bgt.n	8008d52 <_printf_float+0x42a>
 8008d70:	e6fc      	b.n	8008b6c <_printf_float+0x244>
 8008d72:	f04f 0800 	mov.w	r8, #0
 8008d76:	f104 0919 	add.w	r9, r4, #25
 8008d7a:	e7f4      	b.n	8008d66 <_printf_float+0x43e>

08008d7c <_printf_common>:
 8008d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	4616      	mov	r6, r2
 8008d82:	4698      	mov	r8, r3
 8008d84:	688a      	ldr	r2, [r1, #8]
 8008d86:	690b      	ldr	r3, [r1, #16]
 8008d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	bfb8      	it	lt
 8008d90:	4613      	movlt	r3, r2
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d98:	4607      	mov	r7, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b10a      	cbz	r2, 8008da2 <_printf_common+0x26>
 8008d9e:	3301      	adds	r3, #1
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	0699      	lsls	r1, r3, #26
 8008da6:	bf42      	ittt	mi
 8008da8:	6833      	ldrmi	r3, [r6, #0]
 8008daa:	3302      	addmi	r3, #2
 8008dac:	6033      	strmi	r3, [r6, #0]
 8008dae:	6825      	ldr	r5, [r4, #0]
 8008db0:	f015 0506 	ands.w	r5, r5, #6
 8008db4:	d106      	bne.n	8008dc4 <_printf_common+0x48>
 8008db6:	f104 0a19 	add.w	sl, r4, #25
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	6832      	ldr	r2, [r6, #0]
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	dc26      	bgt.n	8008e12 <_printf_common+0x96>
 8008dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	3b00      	subs	r3, #0
 8008dcc:	bf18      	it	ne
 8008dce:	2301      	movne	r3, #1
 8008dd0:	0692      	lsls	r2, r2, #26
 8008dd2:	d42b      	bmi.n	8008e2c <_printf_common+0xb0>
 8008dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dd8:	4641      	mov	r1, r8
 8008dda:	4638      	mov	r0, r7
 8008ddc:	47c8      	blx	r9
 8008dde:	3001      	adds	r0, #1
 8008de0:	d01e      	beq.n	8008e20 <_printf_common+0xa4>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	f003 0306 	and.w	r3, r3, #6
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	bf02      	ittt	eq
 8008dee:	68e5      	ldreq	r5, [r4, #12]
 8008df0:	6833      	ldreq	r3, [r6, #0]
 8008df2:	1aed      	subeq	r5, r5, r3
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	bf0c      	ite	eq
 8008df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dfc:	2500      	movne	r5, #0
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bfc4      	itt	gt
 8008e02:	1a9b      	subgt	r3, r3, r2
 8008e04:	18ed      	addgt	r5, r5, r3
 8008e06:	2600      	movs	r6, #0
 8008e08:	341a      	adds	r4, #26
 8008e0a:	42b5      	cmp	r5, r6
 8008e0c:	d11a      	bne.n	8008e44 <_printf_common+0xc8>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e008      	b.n	8008e24 <_printf_common+0xa8>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4652      	mov	r2, sl
 8008e16:	4641      	mov	r1, r8
 8008e18:	4638      	mov	r0, r7
 8008e1a:	47c8      	blx	r9
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d103      	bne.n	8008e28 <_printf_common+0xac>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e28:	3501      	adds	r5, #1
 8008e2a:	e7c6      	b.n	8008dba <_printf_common+0x3e>
 8008e2c:	18e1      	adds	r1, r4, r3
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	2030      	movs	r0, #48	@ 0x30
 8008e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e36:	4422      	add	r2, r4
 8008e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e40:	3302      	adds	r3, #2
 8008e42:	e7c7      	b.n	8008dd4 <_printf_common+0x58>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4622      	mov	r2, r4
 8008e48:	4641      	mov	r1, r8
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	47c8      	blx	r9
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d0e6      	beq.n	8008e20 <_printf_common+0xa4>
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7d9      	b.n	8008e0a <_printf_common+0x8e>
	...

08008e58 <_printf_i>:
 8008e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	7e0f      	ldrb	r7, [r1, #24]
 8008e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e60:	2f78      	cmp	r7, #120	@ 0x78
 8008e62:	4691      	mov	r9, r2
 8008e64:	4680      	mov	r8, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	469a      	mov	sl, r3
 8008e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e6e:	d807      	bhi.n	8008e80 <_printf_i+0x28>
 8008e70:	2f62      	cmp	r7, #98	@ 0x62
 8008e72:	d80a      	bhi.n	8008e8a <_printf_i+0x32>
 8008e74:	2f00      	cmp	r7, #0
 8008e76:	f000 80d2 	beq.w	800901e <_printf_i+0x1c6>
 8008e7a:	2f58      	cmp	r7, #88	@ 0x58
 8008e7c:	f000 80b9 	beq.w	8008ff2 <_printf_i+0x19a>
 8008e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e88:	e03a      	b.n	8008f00 <_printf_i+0xa8>
 8008e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e8e:	2b15      	cmp	r3, #21
 8008e90:	d8f6      	bhi.n	8008e80 <_printf_i+0x28>
 8008e92:	a101      	add	r1, pc, #4	@ (adr r1, 8008e98 <_printf_i+0x40>)
 8008e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008e81 	.word	0x08008e81
 8008ea4:	08008e81 	.word	0x08008e81
 8008ea8:	08008e81 	.word	0x08008e81
 8008eac:	08008e81 	.word	0x08008e81
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	08008e81 	.word	0x08008e81
 8008eb8:	08008e81 	.word	0x08008e81
 8008ebc:	08008e81 	.word	0x08008e81
 8008ec0:	08008e81 	.word	0x08008e81
 8008ec4:	08009005 	.word	0x08009005
 8008ec8:	08008f2f 	.word	0x08008f2f
 8008ecc:	08008fbf 	.word	0x08008fbf
 8008ed0:	08008e81 	.word	0x08008e81
 8008ed4:	08008e81 	.word	0x08008e81
 8008ed8:	08009027 	.word	0x08009027
 8008edc:	08008e81 	.word	0x08008e81
 8008ee0:	08008f2f 	.word	0x08008f2f
 8008ee4:	08008e81 	.word	0x08008e81
 8008ee8:	08008e81 	.word	0x08008e81
 8008eec:	08008fc7 	.word	0x08008fc7
 8008ef0:	6833      	ldr	r3, [r6, #0]
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6032      	str	r2, [r6, #0]
 8008ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f00:	2301      	movs	r3, #1
 8008f02:	e09d      	b.n	8009040 <_printf_i+0x1e8>
 8008f04:	6833      	ldr	r3, [r6, #0]
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	1d19      	adds	r1, r3, #4
 8008f0a:	6031      	str	r1, [r6, #0]
 8008f0c:	0606      	lsls	r6, r0, #24
 8008f0e:	d501      	bpl.n	8008f14 <_printf_i+0xbc>
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	e003      	b.n	8008f1c <_printf_i+0xc4>
 8008f14:	0645      	lsls	r5, r0, #25
 8008f16:	d5fb      	bpl.n	8008f10 <_printf_i+0xb8>
 8008f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	da03      	bge.n	8008f28 <_printf_i+0xd0>
 8008f20:	232d      	movs	r3, #45	@ 0x2d
 8008f22:	426d      	negs	r5, r5
 8008f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f28:	4859      	ldr	r0, [pc, #356]	@ (8009090 <_printf_i+0x238>)
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	e011      	b.n	8008f52 <_printf_i+0xfa>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	0608      	lsls	r0, r1, #24
 8008f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f38:	d402      	bmi.n	8008f40 <_printf_i+0xe8>
 8008f3a:	0649      	lsls	r1, r1, #25
 8008f3c:	bf48      	it	mi
 8008f3e:	b2ad      	uxthmi	r5, r5
 8008f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f42:	4853      	ldr	r0, [pc, #332]	@ (8009090 <_printf_i+0x238>)
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	bf14      	ite	ne
 8008f48:	230a      	movne	r3, #10
 8008f4a:	2308      	moveq	r3, #8
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f52:	6866      	ldr	r6, [r4, #4]
 8008f54:	60a6      	str	r6, [r4, #8]
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	bfa2      	ittt	ge
 8008f5a:	6821      	ldrge	r1, [r4, #0]
 8008f5c:	f021 0104 	bicge.w	r1, r1, #4
 8008f60:	6021      	strge	r1, [r4, #0]
 8008f62:	b90d      	cbnz	r5, 8008f68 <_printf_i+0x110>
 8008f64:	2e00      	cmp	r6, #0
 8008f66:	d04b      	beq.n	8009000 <_printf_i+0x1a8>
 8008f68:	4616      	mov	r6, r2
 8008f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f72:	5dc7      	ldrb	r7, [r0, r7]
 8008f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f78:	462f      	mov	r7, r5
 8008f7a:	42bb      	cmp	r3, r7
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	d9f4      	bls.n	8008f6a <_printf_i+0x112>
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d10b      	bne.n	8008f9c <_printf_i+0x144>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	07df      	lsls	r7, r3, #31
 8008f88:	d508      	bpl.n	8008f9c <_printf_i+0x144>
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	bfde      	ittt	le
 8008f92:	2330      	movle	r3, #48	@ 0x30
 8008f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f9c:	1b92      	subs	r2, r2, r6
 8008f9e:	6122      	str	r2, [r4, #16]
 8008fa0:	f8cd a000 	str.w	sl, [sp]
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	aa03      	add	r2, sp, #12
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4640      	mov	r0, r8
 8008fac:	f7ff fee6 	bl	8008d7c <_printf_common>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d14a      	bne.n	800904a <_printf_i+0x1f2>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	b004      	add	sp, #16
 8008fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f043 0320 	orr.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	4833      	ldr	r0, [pc, #204]	@ (8009094 <_printf_i+0x23c>)
 8008fc8:	2778      	movs	r7, #120	@ 0x78
 8008fca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	6831      	ldr	r1, [r6, #0]
 8008fd2:	061f      	lsls	r7, r3, #24
 8008fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fd8:	d402      	bmi.n	8008fe0 <_printf_i+0x188>
 8008fda:	065f      	lsls	r7, r3, #25
 8008fdc:	bf48      	it	mi
 8008fde:	b2ad      	uxthmi	r5, r5
 8008fe0:	6031      	str	r1, [r6, #0]
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	bf44      	itt	mi
 8008fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8008fea:	6023      	strmi	r3, [r4, #0]
 8008fec:	b11d      	cbz	r5, 8008ff6 <_printf_i+0x19e>
 8008fee:	2310      	movs	r3, #16
 8008ff0:	e7ac      	b.n	8008f4c <_printf_i+0xf4>
 8008ff2:	4827      	ldr	r0, [pc, #156]	@ (8009090 <_printf_i+0x238>)
 8008ff4:	e7e9      	b.n	8008fca <_printf_i+0x172>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	f023 0320 	bic.w	r3, r3, #32
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	e7f6      	b.n	8008fee <_printf_i+0x196>
 8009000:	4616      	mov	r6, r2
 8009002:	e7bd      	b.n	8008f80 <_printf_i+0x128>
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	6961      	ldr	r1, [r4, #20]
 800900a:	1d18      	adds	r0, r3, #4
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	062e      	lsls	r6, r5, #24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	d501      	bpl.n	8009018 <_printf_i+0x1c0>
 8009014:	6019      	str	r1, [r3, #0]
 8009016:	e002      	b.n	800901e <_printf_i+0x1c6>
 8009018:	0668      	lsls	r0, r5, #25
 800901a:	d5fb      	bpl.n	8009014 <_printf_i+0x1bc>
 800901c:	8019      	strh	r1, [r3, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	4616      	mov	r6, r2
 8009024:	e7bc      	b.n	8008fa0 <_printf_i+0x148>
 8009026:	6833      	ldr	r3, [r6, #0]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	6032      	str	r2, [r6, #0]
 800902c:	681e      	ldr	r6, [r3, #0]
 800902e:	6862      	ldr	r2, [r4, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	4630      	mov	r0, r6
 8009034:	f7f7 f8f4 	bl	8000220 <memchr>
 8009038:	b108      	cbz	r0, 800903e <_printf_i+0x1e6>
 800903a:	1b80      	subs	r0, r0, r6
 800903c:	6060      	str	r0, [r4, #4]
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	2300      	movs	r3, #0
 8009044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009048:	e7aa      	b.n	8008fa0 <_printf_i+0x148>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	4632      	mov	r2, r6
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	47d0      	blx	sl
 8009054:	3001      	adds	r0, #1
 8009056:	d0ad      	beq.n	8008fb4 <_printf_i+0x15c>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	d413      	bmi.n	8009086 <_printf_i+0x22e>
 800905e:	68e0      	ldr	r0, [r4, #12]
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	4298      	cmp	r0, r3
 8009064:	bfb8      	it	lt
 8009066:	4618      	movlt	r0, r3
 8009068:	e7a6      	b.n	8008fb8 <_printf_i+0x160>
 800906a:	2301      	movs	r3, #1
 800906c:	4632      	mov	r2, r6
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d09d      	beq.n	8008fb4 <_printf_i+0x15c>
 8009078:	3501      	adds	r5, #1
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	42ab      	cmp	r3, r5
 8009082:	dcf2      	bgt.n	800906a <_printf_i+0x212>
 8009084:	e7eb      	b.n	800905e <_printf_i+0x206>
 8009086:	2500      	movs	r5, #0
 8009088:	f104 0619 	add.w	r6, r4, #25
 800908c:	e7f5      	b.n	800907a <_printf_i+0x222>
 800908e:	bf00      	nop
 8009090:	0800b26e 	.word	0x0800b26e
 8009094:	0800b27f 	.word	0x0800b27f

08009098 <std>:
 8009098:	2300      	movs	r3, #0
 800909a:	b510      	push	{r4, lr}
 800909c:	4604      	mov	r4, r0
 800909e:	e9c0 3300 	strd	r3, r3, [r0]
 80090a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090a6:	6083      	str	r3, [r0, #8]
 80090a8:	8181      	strh	r1, [r0, #12]
 80090aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80090ac:	81c2      	strh	r2, [r0, #14]
 80090ae:	6183      	str	r3, [r0, #24]
 80090b0:	4619      	mov	r1, r3
 80090b2:	2208      	movs	r2, #8
 80090b4:	305c      	adds	r0, #92	@ 0x5c
 80090b6:	f000 f906 	bl	80092c6 <memset>
 80090ba:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <std+0x58>)
 80090bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80090be:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <std+0x5c>)
 80090c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090c2:	4b0d      	ldr	r3, [pc, #52]	@ (80090f8 <std+0x60>)
 80090c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090c6:	4b0d      	ldr	r3, [pc, #52]	@ (80090fc <std+0x64>)
 80090c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80090ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <std+0x68>)
 80090cc:	6224      	str	r4, [r4, #32]
 80090ce:	429c      	cmp	r4, r3
 80090d0:	d006      	beq.n	80090e0 <std+0x48>
 80090d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090d6:	4294      	cmp	r4, r2
 80090d8:	d002      	beq.n	80090e0 <std+0x48>
 80090da:	33d0      	adds	r3, #208	@ 0xd0
 80090dc:	429c      	cmp	r4, r3
 80090de:	d105      	bne.n	80090ec <std+0x54>
 80090e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e8:	f000 b96a 	b.w	80093c0 <__retarget_lock_init_recursive>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	bf00      	nop
 80090f0:	08009241 	.word	0x08009241
 80090f4:	08009263 	.word	0x08009263
 80090f8:	0800929b 	.word	0x0800929b
 80090fc:	080092bf 	.word	0x080092bf
 8009100:	20001d40 	.word	0x20001d40

08009104 <stdio_exit_handler>:
 8009104:	4a02      	ldr	r2, [pc, #8]	@ (8009110 <stdio_exit_handler+0xc>)
 8009106:	4903      	ldr	r1, [pc, #12]	@ (8009114 <stdio_exit_handler+0x10>)
 8009108:	4803      	ldr	r0, [pc, #12]	@ (8009118 <stdio_exit_handler+0x14>)
 800910a:	f000 b869 	b.w	80091e0 <_fwalk_sglue>
 800910e:	bf00      	nop
 8009110:	20000010 	.word	0x20000010
 8009114:	0800ad11 	.word	0x0800ad11
 8009118:	20000020 	.word	0x20000020

0800911c <cleanup_stdio>:
 800911c:	6841      	ldr	r1, [r0, #4]
 800911e:	4b0c      	ldr	r3, [pc, #48]	@ (8009150 <cleanup_stdio+0x34>)
 8009120:	4299      	cmp	r1, r3
 8009122:	b510      	push	{r4, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	d001      	beq.n	800912c <cleanup_stdio+0x10>
 8009128:	f001 fdf2 	bl	800ad10 <_fflush_r>
 800912c:	68a1      	ldr	r1, [r4, #8]
 800912e:	4b09      	ldr	r3, [pc, #36]	@ (8009154 <cleanup_stdio+0x38>)
 8009130:	4299      	cmp	r1, r3
 8009132:	d002      	beq.n	800913a <cleanup_stdio+0x1e>
 8009134:	4620      	mov	r0, r4
 8009136:	f001 fdeb 	bl	800ad10 <_fflush_r>
 800913a:	68e1      	ldr	r1, [r4, #12]
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <cleanup_stdio+0x3c>)
 800913e:	4299      	cmp	r1, r3
 8009140:	d004      	beq.n	800914c <cleanup_stdio+0x30>
 8009142:	4620      	mov	r0, r4
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f001 bde2 	b.w	800ad10 <_fflush_r>
 800914c:	bd10      	pop	{r4, pc}
 800914e:	bf00      	nop
 8009150:	20001d40 	.word	0x20001d40
 8009154:	20001da8 	.word	0x20001da8
 8009158:	20001e10 	.word	0x20001e10

0800915c <global_stdio_init.part.0>:
 800915c:	b510      	push	{r4, lr}
 800915e:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <global_stdio_init.part.0+0x30>)
 8009160:	4c0b      	ldr	r4, [pc, #44]	@ (8009190 <global_stdio_init.part.0+0x34>)
 8009162:	4a0c      	ldr	r2, [pc, #48]	@ (8009194 <global_stdio_init.part.0+0x38>)
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	4620      	mov	r0, r4
 8009168:	2200      	movs	r2, #0
 800916a:	2104      	movs	r1, #4
 800916c:	f7ff ff94 	bl	8009098 <std>
 8009170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009174:	2201      	movs	r2, #1
 8009176:	2109      	movs	r1, #9
 8009178:	f7ff ff8e 	bl	8009098 <std>
 800917c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009180:	2202      	movs	r2, #2
 8009182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009186:	2112      	movs	r1, #18
 8009188:	f7ff bf86 	b.w	8009098 <std>
 800918c:	20001e78 	.word	0x20001e78
 8009190:	20001d40 	.word	0x20001d40
 8009194:	08009105 	.word	0x08009105

08009198 <__sfp_lock_acquire>:
 8009198:	4801      	ldr	r0, [pc, #4]	@ (80091a0 <__sfp_lock_acquire+0x8>)
 800919a:	f000 b912 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	20001e81 	.word	0x20001e81

080091a4 <__sfp_lock_release>:
 80091a4:	4801      	ldr	r0, [pc, #4]	@ (80091ac <__sfp_lock_release+0x8>)
 80091a6:	f000 b90d 	b.w	80093c4 <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	20001e81 	.word	0x20001e81

080091b0 <__sinit>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	f7ff fff0 	bl	8009198 <__sfp_lock_acquire>
 80091b8:	6a23      	ldr	r3, [r4, #32]
 80091ba:	b11b      	cbz	r3, 80091c4 <__sinit+0x14>
 80091bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c0:	f7ff bff0 	b.w	80091a4 <__sfp_lock_release>
 80091c4:	4b04      	ldr	r3, [pc, #16]	@ (80091d8 <__sinit+0x28>)
 80091c6:	6223      	str	r3, [r4, #32]
 80091c8:	4b04      	ldr	r3, [pc, #16]	@ (80091dc <__sinit+0x2c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1f5      	bne.n	80091bc <__sinit+0xc>
 80091d0:	f7ff ffc4 	bl	800915c <global_stdio_init.part.0>
 80091d4:	e7f2      	b.n	80091bc <__sinit+0xc>
 80091d6:	bf00      	nop
 80091d8:	0800911d 	.word	0x0800911d
 80091dc:	20001e78 	.word	0x20001e78

080091e0 <_fwalk_sglue>:
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4607      	mov	r7, r0
 80091e6:	4688      	mov	r8, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	2600      	movs	r6, #0
 80091ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091f0:	f1b9 0901 	subs.w	r9, r9, #1
 80091f4:	d505      	bpl.n	8009202 <_fwalk_sglue+0x22>
 80091f6:	6824      	ldr	r4, [r4, #0]
 80091f8:	2c00      	cmp	r4, #0
 80091fa:	d1f7      	bne.n	80091ec <_fwalk_sglue+0xc>
 80091fc:	4630      	mov	r0, r6
 80091fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d907      	bls.n	8009218 <_fwalk_sglue+0x38>
 8009208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800920c:	3301      	adds	r3, #1
 800920e:	d003      	beq.n	8009218 <_fwalk_sglue+0x38>
 8009210:	4629      	mov	r1, r5
 8009212:	4638      	mov	r0, r7
 8009214:	47c0      	blx	r8
 8009216:	4306      	orrs	r6, r0
 8009218:	3568      	adds	r5, #104	@ 0x68
 800921a:	e7e9      	b.n	80091f0 <_fwalk_sglue+0x10>

0800921c <iprintf>:
 800921c:	b40f      	push	{r0, r1, r2, r3}
 800921e:	b507      	push	{r0, r1, r2, lr}
 8009220:	4906      	ldr	r1, [pc, #24]	@ (800923c <iprintf+0x20>)
 8009222:	ab04      	add	r3, sp, #16
 8009224:	6808      	ldr	r0, [r1, #0]
 8009226:	f853 2b04 	ldr.w	r2, [r3], #4
 800922a:	6881      	ldr	r1, [r0, #8]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	f001 fbd3 	bl	800a9d8 <_vfiprintf_r>
 8009232:	b003      	add	sp, #12
 8009234:	f85d eb04 	ldr.w	lr, [sp], #4
 8009238:	b004      	add	sp, #16
 800923a:	4770      	bx	lr
 800923c:	2000001c 	.word	0x2000001c

08009240 <__sread>:
 8009240:	b510      	push	{r4, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009248:	f000 f86c 	bl	8009324 <_read_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	bfab      	itete	ge
 8009250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009252:	89a3      	ldrhlt	r3, [r4, #12]
 8009254:	181b      	addge	r3, r3, r0
 8009256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800925a:	bfac      	ite	ge
 800925c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800925e:	81a3      	strhlt	r3, [r4, #12]
 8009260:	bd10      	pop	{r4, pc}

08009262 <__swrite>:
 8009262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	461f      	mov	r7, r3
 8009268:	898b      	ldrh	r3, [r1, #12]
 800926a:	05db      	lsls	r3, r3, #23
 800926c:	4605      	mov	r5, r0
 800926e:	460c      	mov	r4, r1
 8009270:	4616      	mov	r6, r2
 8009272:	d505      	bpl.n	8009280 <__swrite+0x1e>
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2302      	movs	r3, #2
 800927a:	2200      	movs	r2, #0
 800927c:	f000 f840 	bl	8009300 <_lseek_r>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	4628      	mov	r0, r5
 8009292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	f000 b857 	b.w	8009348 <_write_r>

0800929a <__sseek>:
 800929a:	b510      	push	{r4, lr}
 800929c:	460c      	mov	r4, r1
 800929e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a2:	f000 f82d 	bl	8009300 <_lseek_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	bf15      	itete	ne
 80092ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092b6:	81a3      	strheq	r3, [r4, #12]
 80092b8:	bf18      	it	ne
 80092ba:	81a3      	strhne	r3, [r4, #12]
 80092bc:	bd10      	pop	{r4, pc}

080092be <__sclose>:
 80092be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c2:	f000 b80d 	b.w	80092e0 <_close_r>

080092c6 <memset>:
 80092c6:	4402      	add	r2, r0
 80092c8:	4603      	mov	r3, r0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d100      	bne.n	80092d0 <memset+0xa>
 80092ce:	4770      	bx	lr
 80092d0:	f803 1b01 	strb.w	r1, [r3], #1
 80092d4:	e7f9      	b.n	80092ca <memset+0x4>
	...

080092d8 <_localeconv_r>:
 80092d8:	4800      	ldr	r0, [pc, #0]	@ (80092dc <_localeconv_r+0x4>)
 80092da:	4770      	bx	lr
 80092dc:	2000015c 	.word	0x2000015c

080092e0 <_close_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	@ (80092fc <_close_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f8 fec8 	bl	8002080 <_close>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_close_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_close_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	20001e7c 	.word	0x20001e7c

08009300 <_lseek_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4d07      	ldr	r5, [pc, #28]	@ (8009320 <_lseek_r+0x20>)
 8009304:	4604      	mov	r4, r0
 8009306:	4608      	mov	r0, r1
 8009308:	4611      	mov	r1, r2
 800930a:	2200      	movs	r2, #0
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f7f8 fedd 	bl	80020ce <_lseek>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_lseek_r+0x1e>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_lseek_r+0x1e>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	20001e7c 	.word	0x20001e7c

08009324 <_read_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d07      	ldr	r5, [pc, #28]	@ (8009344 <_read_r+0x20>)
 8009328:	4604      	mov	r4, r0
 800932a:	4608      	mov	r0, r1
 800932c:	4611      	mov	r1, r2
 800932e:	2200      	movs	r2, #0
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7f8 fe6b 	bl	800200e <_read>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_read_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_read_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	20001e7c 	.word	0x20001e7c

08009348 <_write_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d07      	ldr	r5, [pc, #28]	@ (8009368 <_write_r+0x20>)
 800934c:	4604      	mov	r4, r0
 800934e:	4608      	mov	r0, r1
 8009350:	4611      	mov	r1, r2
 8009352:	2200      	movs	r2, #0
 8009354:	602a      	str	r2, [r5, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f7f8 fe76 	bl	8002048 <_write>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_write_r+0x1e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_write_r+0x1e>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20001e7c 	.word	0x20001e7c

0800936c <__errno>:
 800936c:	4b01      	ldr	r3, [pc, #4]	@ (8009374 <__errno+0x8>)
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	2000001c 	.word	0x2000001c

08009378 <__libc_init_array>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4d0d      	ldr	r5, [pc, #52]	@ (80093b0 <__libc_init_array+0x38>)
 800937c:	4c0d      	ldr	r4, [pc, #52]	@ (80093b4 <__libc_init_array+0x3c>)
 800937e:	1b64      	subs	r4, r4, r5
 8009380:	10a4      	asrs	r4, r4, #2
 8009382:	2600      	movs	r6, #0
 8009384:	42a6      	cmp	r6, r4
 8009386:	d109      	bne.n	800939c <__libc_init_array+0x24>
 8009388:	4d0b      	ldr	r5, [pc, #44]	@ (80093b8 <__libc_init_array+0x40>)
 800938a:	4c0c      	ldr	r4, [pc, #48]	@ (80093bc <__libc_init_array+0x44>)
 800938c:	f001 fec0 	bl	800b110 <_init>
 8009390:	1b64      	subs	r4, r4, r5
 8009392:	10a4      	asrs	r4, r4, #2
 8009394:	2600      	movs	r6, #0
 8009396:	42a6      	cmp	r6, r4
 8009398:	d105      	bne.n	80093a6 <__libc_init_array+0x2e>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a0:	4798      	blx	r3
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7ee      	b.n	8009384 <__libc_init_array+0xc>
 80093a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093aa:	4798      	blx	r3
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7f2      	b.n	8009396 <__libc_init_array+0x1e>
 80093b0:	0800b5d8 	.word	0x0800b5d8
 80093b4:	0800b5d8 	.word	0x0800b5d8
 80093b8:	0800b5d8 	.word	0x0800b5d8
 80093bc:	0800b5dc 	.word	0x0800b5dc

080093c0 <__retarget_lock_init_recursive>:
 80093c0:	4770      	bx	lr

080093c2 <__retarget_lock_acquire_recursive>:
 80093c2:	4770      	bx	lr

080093c4 <__retarget_lock_release_recursive>:
 80093c4:	4770      	bx	lr

080093c6 <memcpy>:
 80093c6:	440a      	add	r2, r1
 80093c8:	4291      	cmp	r1, r2
 80093ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ce:	d100      	bne.n	80093d2 <memcpy+0xc>
 80093d0:	4770      	bx	lr
 80093d2:	b510      	push	{r4, lr}
 80093d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093dc:	4291      	cmp	r1, r2
 80093de:	d1f9      	bne.n	80093d4 <memcpy+0xe>
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <quorem>:
 80093e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e6:	6903      	ldr	r3, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	4607      	mov	r7, r0
 80093ee:	db7e      	blt.n	80094ee <quorem+0x10c>
 80093f0:	3c01      	subs	r4, #1
 80093f2:	f101 0814 	add.w	r8, r1, #20
 80093f6:	00a3      	lsls	r3, r4, #2
 80093f8:	f100 0514 	add.w	r5, r0, #20
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800940c:	3301      	adds	r3, #1
 800940e:	429a      	cmp	r2, r3
 8009410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009414:	fbb2 f6f3 	udiv	r6, r2, r3
 8009418:	d32e      	bcc.n	8009478 <quorem+0x96>
 800941a:	f04f 0a00 	mov.w	sl, #0
 800941e:	46c4      	mov	ip, r8
 8009420:	46ae      	mov	lr, r5
 8009422:	46d3      	mov	fp, sl
 8009424:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009428:	b298      	uxth	r0, r3
 800942a:	fb06 a000 	mla	r0, r6, r0, sl
 800942e:	0c02      	lsrs	r2, r0, #16
 8009430:	0c1b      	lsrs	r3, r3, #16
 8009432:	fb06 2303 	mla	r3, r6, r3, r2
 8009436:	f8de 2000 	ldr.w	r2, [lr]
 800943a:	b280      	uxth	r0, r0
 800943c:	b292      	uxth	r2, r2
 800943e:	1a12      	subs	r2, r2, r0
 8009440:	445a      	add	r2, fp
 8009442:	f8de 0000 	ldr.w	r0, [lr]
 8009446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800944a:	b29b      	uxth	r3, r3
 800944c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009450:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009454:	b292      	uxth	r2, r2
 8009456:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800945a:	45e1      	cmp	r9, ip
 800945c:	f84e 2b04 	str.w	r2, [lr], #4
 8009460:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009464:	d2de      	bcs.n	8009424 <quorem+0x42>
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	58eb      	ldr	r3, [r5, r3]
 800946a:	b92b      	cbnz	r3, 8009478 <quorem+0x96>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	3b04      	subs	r3, #4
 8009470:	429d      	cmp	r5, r3
 8009472:	461a      	mov	r2, r3
 8009474:	d32f      	bcc.n	80094d6 <quorem+0xf4>
 8009476:	613c      	str	r4, [r7, #16]
 8009478:	4638      	mov	r0, r7
 800947a:	f001 f97b 	bl	800a774 <__mcmp>
 800947e:	2800      	cmp	r0, #0
 8009480:	db25      	blt.n	80094ce <quorem+0xec>
 8009482:	4629      	mov	r1, r5
 8009484:	2000      	movs	r0, #0
 8009486:	f858 2b04 	ldr.w	r2, [r8], #4
 800948a:	f8d1 c000 	ldr.w	ip, [r1]
 800948e:	fa1f fe82 	uxth.w	lr, r2
 8009492:	fa1f f38c 	uxth.w	r3, ip
 8009496:	eba3 030e 	sub.w	r3, r3, lr
 800949a:	4403      	add	r3, r0
 800949c:	0c12      	lsrs	r2, r2, #16
 800949e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ac:	45c1      	cmp	r9, r8
 80094ae:	f841 3b04 	str.w	r3, [r1], #4
 80094b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094b6:	d2e6      	bcs.n	8009486 <quorem+0xa4>
 80094b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094c0:	b922      	cbnz	r2, 80094cc <quorem+0xea>
 80094c2:	3b04      	subs	r3, #4
 80094c4:	429d      	cmp	r5, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	d30b      	bcc.n	80094e2 <quorem+0x100>
 80094ca:	613c      	str	r4, [r7, #16]
 80094cc:	3601      	adds	r6, #1
 80094ce:	4630      	mov	r0, r6
 80094d0:	b003      	add	sp, #12
 80094d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	3b04      	subs	r3, #4
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d1cb      	bne.n	8009476 <quorem+0x94>
 80094de:	3c01      	subs	r4, #1
 80094e0:	e7c6      	b.n	8009470 <quorem+0x8e>
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d1ef      	bne.n	80094ca <quorem+0xe8>
 80094ea:	3c01      	subs	r4, #1
 80094ec:	e7ea      	b.n	80094c4 <quorem+0xe2>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e7ee      	b.n	80094d0 <quorem+0xee>
 80094f2:	0000      	movs	r0, r0
 80094f4:	0000      	movs	r0, r0
	...

080094f8 <_dtoa_r>:
 80094f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	69c7      	ldr	r7, [r0, #28]
 80094fe:	b099      	sub	sp, #100	@ 0x64
 8009500:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009504:	ec55 4b10 	vmov	r4, r5, d0
 8009508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800950a:	9109      	str	r1, [sp, #36]	@ 0x24
 800950c:	4683      	mov	fp, r0
 800950e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009512:	b97f      	cbnz	r7, 8009534 <_dtoa_r+0x3c>
 8009514:	2010      	movs	r0, #16
 8009516:	f000 fdfd 	bl	800a114 <malloc>
 800951a:	4602      	mov	r2, r0
 800951c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009520:	b920      	cbnz	r0, 800952c <_dtoa_r+0x34>
 8009522:	4ba7      	ldr	r3, [pc, #668]	@ (80097c0 <_dtoa_r+0x2c8>)
 8009524:	21ef      	movs	r1, #239	@ 0xef
 8009526:	48a7      	ldr	r0, [pc, #668]	@ (80097c4 <_dtoa_r+0x2cc>)
 8009528:	f001 fcbe 	bl	800aea8 <__assert_func>
 800952c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009530:	6007      	str	r7, [r0, #0]
 8009532:	60c7      	str	r7, [r0, #12]
 8009534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009538:	6819      	ldr	r1, [r3, #0]
 800953a:	b159      	cbz	r1, 8009554 <_dtoa_r+0x5c>
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	604a      	str	r2, [r1, #4]
 8009540:	2301      	movs	r3, #1
 8009542:	4093      	lsls	r3, r2
 8009544:	608b      	str	r3, [r1, #8]
 8009546:	4658      	mov	r0, fp
 8009548:	f000 feda 	bl	800a300 <_Bfree>
 800954c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	1e2b      	subs	r3, r5, #0
 8009556:	bfb9      	ittee	lt
 8009558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800955c:	9303      	strlt	r3, [sp, #12]
 800955e:	2300      	movge	r3, #0
 8009560:	6033      	strge	r3, [r6, #0]
 8009562:	9f03      	ldr	r7, [sp, #12]
 8009564:	4b98      	ldr	r3, [pc, #608]	@ (80097c8 <_dtoa_r+0x2d0>)
 8009566:	bfbc      	itt	lt
 8009568:	2201      	movlt	r2, #1
 800956a:	6032      	strlt	r2, [r6, #0]
 800956c:	43bb      	bics	r3, r7
 800956e:	d112      	bne.n	8009596 <_dtoa_r+0x9e>
 8009570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009572:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800957c:	4323      	orrs	r3, r4
 800957e:	f000 854d 	beq.w	800a01c <_dtoa_r+0xb24>
 8009582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80097dc <_dtoa_r+0x2e4>
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 854f 	beq.w	800a02c <_dtoa_r+0xb34>
 800958e:	f10a 0303 	add.w	r3, sl, #3
 8009592:	f000 bd49 	b.w	800a028 <_dtoa_r+0xb30>
 8009596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	ec51 0b17 	vmov	r0, r1, d7
 80095a0:	2300      	movs	r3, #0
 80095a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095a6:	f7f7 fab7 	bl	8000b18 <__aeabi_dcmpeq>
 80095aa:	4680      	mov	r8, r0
 80095ac:	b158      	cbz	r0, 80095c6 <_dtoa_r+0xce>
 80095ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095b0:	2301      	movs	r3, #1
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095b6:	b113      	cbz	r3, 80095be <_dtoa_r+0xc6>
 80095b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095ba:	4b84      	ldr	r3, [pc, #528]	@ (80097cc <_dtoa_r+0x2d4>)
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80097e0 <_dtoa_r+0x2e8>
 80095c2:	f000 bd33 	b.w	800a02c <_dtoa_r+0xb34>
 80095c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80095ca:	aa16      	add	r2, sp, #88	@ 0x58
 80095cc:	a917      	add	r1, sp, #92	@ 0x5c
 80095ce:	4658      	mov	r0, fp
 80095d0:	f001 f980 	bl	800a8d4 <__d2b>
 80095d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80095d8:	4681      	mov	r9, r0
 80095da:	2e00      	cmp	r6, #0
 80095dc:	d077      	beq.n	80096ce <_dtoa_r+0x1d6>
 80095de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80095e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095f8:	4619      	mov	r1, r3
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b74      	ldr	r3, [pc, #464]	@ (80097d0 <_dtoa_r+0x2d8>)
 80095fe:	f7f6 fe6b 	bl	80002d8 <__aeabi_dsub>
 8009602:	a369      	add	r3, pc, #420	@ (adr r3, 80097a8 <_dtoa_r+0x2b0>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f7 f81e 	bl	8000648 <__aeabi_dmul>
 800960c:	a368      	add	r3, pc, #416	@ (adr r3, 80097b0 <_dtoa_r+0x2b8>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	f7f6 fe63 	bl	80002dc <__adddf3>
 8009616:	4604      	mov	r4, r0
 8009618:	4630      	mov	r0, r6
 800961a:	460d      	mov	r5, r1
 800961c:	f7f6 ffaa 	bl	8000574 <__aeabi_i2d>
 8009620:	a365      	add	r3, pc, #404	@ (adr r3, 80097b8 <_dtoa_r+0x2c0>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f7 f80f 	bl	8000648 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f6 fe53 	bl	80002dc <__adddf3>
 8009636:	4604      	mov	r4, r0
 8009638:	460d      	mov	r5, r1
 800963a:	f7f7 fab5 	bl	8000ba8 <__aeabi_d2iz>
 800963e:	2200      	movs	r2, #0
 8009640:	4607      	mov	r7, r0
 8009642:	2300      	movs	r3, #0
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	f7f7 fa70 	bl	8000b2c <__aeabi_dcmplt>
 800964c:	b140      	cbz	r0, 8009660 <_dtoa_r+0x168>
 800964e:	4638      	mov	r0, r7
 8009650:	f7f6 ff90 	bl	8000574 <__aeabi_i2d>
 8009654:	4622      	mov	r2, r4
 8009656:	462b      	mov	r3, r5
 8009658:	f7f7 fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 800965c:	b900      	cbnz	r0, 8009660 <_dtoa_r+0x168>
 800965e:	3f01      	subs	r7, #1
 8009660:	2f16      	cmp	r7, #22
 8009662:	d851      	bhi.n	8009708 <_dtoa_r+0x210>
 8009664:	4b5b      	ldr	r3, [pc, #364]	@ (80097d4 <_dtoa_r+0x2dc>)
 8009666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009672:	f7f7 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	d048      	beq.n	800970c <_dtoa_r+0x214>
 800967a:	3f01      	subs	r7, #1
 800967c:	2300      	movs	r3, #0
 800967e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009682:	1b9b      	subs	r3, r3, r6
 8009684:	1e5a      	subs	r2, r3, #1
 8009686:	bf44      	itt	mi
 8009688:	f1c3 0801 	rsbmi	r8, r3, #1
 800968c:	2300      	movmi	r3, #0
 800968e:	9208      	str	r2, [sp, #32]
 8009690:	bf54      	ite	pl
 8009692:	f04f 0800 	movpl.w	r8, #0
 8009696:	9308      	strmi	r3, [sp, #32]
 8009698:	2f00      	cmp	r7, #0
 800969a:	db39      	blt.n	8009710 <_dtoa_r+0x218>
 800969c:	9b08      	ldr	r3, [sp, #32]
 800969e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096a0:	443b      	add	r3, r7
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	2300      	movs	r3, #0
 80096a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d864      	bhi.n	8009778 <_dtoa_r+0x280>
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	bfc4      	itt	gt
 80096b2:	3b04      	subgt	r3, #4
 80096b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	f1a3 0302 	sub.w	r3, r3, #2
 80096bc:	bfcc      	ite	gt
 80096be:	2400      	movgt	r4, #0
 80096c0:	2401      	movle	r4, #1
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d863      	bhi.n	800978e <_dtoa_r+0x296>
 80096c6:	e8df f003 	tbb	[pc, r3]
 80096ca:	372a      	.short	0x372a
 80096cc:	5535      	.short	0x5535
 80096ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80096d2:	441e      	add	r6, r3
 80096d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096d8:	2b20      	cmp	r3, #32
 80096da:	bfc1      	itttt	gt
 80096dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096e0:	409f      	lslgt	r7, r3
 80096e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096ea:	bfd6      	itet	le
 80096ec:	f1c3 0320 	rsble	r3, r3, #32
 80096f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80096f4:	fa04 f003 	lslle.w	r0, r4, r3
 80096f8:	f7f6 ff2c 	bl	8000554 <__aeabi_ui2d>
 80096fc:	2201      	movs	r2, #1
 80096fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009702:	3e01      	subs	r6, #1
 8009704:	9214      	str	r2, [sp, #80]	@ 0x50
 8009706:	e777      	b.n	80095f8 <_dtoa_r+0x100>
 8009708:	2301      	movs	r3, #1
 800970a:	e7b8      	b.n	800967e <_dtoa_r+0x186>
 800970c:	9012      	str	r0, [sp, #72]	@ 0x48
 800970e:	e7b7      	b.n	8009680 <_dtoa_r+0x188>
 8009710:	427b      	negs	r3, r7
 8009712:	930a      	str	r3, [sp, #40]	@ 0x28
 8009714:	2300      	movs	r3, #0
 8009716:	eba8 0807 	sub.w	r8, r8, r7
 800971a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800971c:	e7c4      	b.n	80096a8 <_dtoa_r+0x1b0>
 800971e:	2300      	movs	r3, #0
 8009720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	dc35      	bgt.n	8009794 <_dtoa_r+0x29c>
 8009728:	2301      	movs	r3, #1
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	9307      	str	r3, [sp, #28]
 800972e:	461a      	mov	r2, r3
 8009730:	920e      	str	r2, [sp, #56]	@ 0x38
 8009732:	e00b      	b.n	800974c <_dtoa_r+0x254>
 8009734:	2301      	movs	r3, #1
 8009736:	e7f3      	b.n	8009720 <_dtoa_r+0x228>
 8009738:	2300      	movs	r3, #0
 800973a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800973c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	2b01      	cmp	r3, #1
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	bfb8      	it	lt
 800974a:	2301      	movlt	r3, #1
 800974c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009750:	2100      	movs	r1, #0
 8009752:	2204      	movs	r2, #4
 8009754:	f102 0514 	add.w	r5, r2, #20
 8009758:	429d      	cmp	r5, r3
 800975a:	d91f      	bls.n	800979c <_dtoa_r+0x2a4>
 800975c:	6041      	str	r1, [r0, #4]
 800975e:	4658      	mov	r0, fp
 8009760:	f000 fd8e 	bl	800a280 <_Balloc>
 8009764:	4682      	mov	sl, r0
 8009766:	2800      	cmp	r0, #0
 8009768:	d13c      	bne.n	80097e4 <_dtoa_r+0x2ec>
 800976a:	4b1b      	ldr	r3, [pc, #108]	@ (80097d8 <_dtoa_r+0x2e0>)
 800976c:	4602      	mov	r2, r0
 800976e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009772:	e6d8      	b.n	8009526 <_dtoa_r+0x2e>
 8009774:	2301      	movs	r3, #1
 8009776:	e7e0      	b.n	800973a <_dtoa_r+0x242>
 8009778:	2401      	movs	r4, #1
 800977a:	2300      	movs	r3, #0
 800977c:	9309      	str	r3, [sp, #36]	@ 0x24
 800977e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009780:	f04f 33ff 	mov.w	r3, #4294967295
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	2200      	movs	r2, #0
 800978a:	2312      	movs	r3, #18
 800978c:	e7d0      	b.n	8009730 <_dtoa_r+0x238>
 800978e:	2301      	movs	r3, #1
 8009790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009792:	e7f5      	b.n	8009780 <_dtoa_r+0x288>
 8009794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	9307      	str	r3, [sp, #28]
 800979a:	e7d7      	b.n	800974c <_dtoa_r+0x254>
 800979c:	3101      	adds	r1, #1
 800979e:	0052      	lsls	r2, r2, #1
 80097a0:	e7d8      	b.n	8009754 <_dtoa_r+0x25c>
 80097a2:	bf00      	nop
 80097a4:	f3af 8000 	nop.w
 80097a8:	636f4361 	.word	0x636f4361
 80097ac:	3fd287a7 	.word	0x3fd287a7
 80097b0:	8b60c8b3 	.word	0x8b60c8b3
 80097b4:	3fc68a28 	.word	0x3fc68a28
 80097b8:	509f79fb 	.word	0x509f79fb
 80097bc:	3fd34413 	.word	0x3fd34413
 80097c0:	0800b29d 	.word	0x0800b29d
 80097c4:	0800b2b4 	.word	0x0800b2b4
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	0800b26d 	.word	0x0800b26d
 80097d0:	3ff80000 	.word	0x3ff80000
 80097d4:	0800b3b0 	.word	0x0800b3b0
 80097d8:	0800b30c 	.word	0x0800b30c
 80097dc:	0800b299 	.word	0x0800b299
 80097e0:	0800b26c 	.word	0x0800b26c
 80097e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097e8:	6018      	str	r0, [r3, #0]
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	2b0e      	cmp	r3, #14
 80097ee:	f200 80a4 	bhi.w	800993a <_dtoa_r+0x442>
 80097f2:	2c00      	cmp	r4, #0
 80097f4:	f000 80a1 	beq.w	800993a <_dtoa_r+0x442>
 80097f8:	2f00      	cmp	r7, #0
 80097fa:	dd33      	ble.n	8009864 <_dtoa_r+0x36c>
 80097fc:	4bad      	ldr	r3, [pc, #692]	@ (8009ab4 <_dtoa_r+0x5bc>)
 80097fe:	f007 020f 	and.w	r2, r7, #15
 8009802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009806:	ed93 7b00 	vldr	d7, [r3]
 800980a:	05f8      	lsls	r0, r7, #23
 800980c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009810:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009814:	d516      	bpl.n	8009844 <_dtoa_r+0x34c>
 8009816:	4ba8      	ldr	r3, [pc, #672]	@ (8009ab8 <_dtoa_r+0x5c0>)
 8009818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800981c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009820:	f7f7 f83c 	bl	800089c <__aeabi_ddiv>
 8009824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009828:	f004 040f 	and.w	r4, r4, #15
 800982c:	2603      	movs	r6, #3
 800982e:	4da2      	ldr	r5, [pc, #648]	@ (8009ab8 <_dtoa_r+0x5c0>)
 8009830:	b954      	cbnz	r4, 8009848 <_dtoa_r+0x350>
 8009832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983a:	f7f7 f82f 	bl	800089c <__aeabi_ddiv>
 800983e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009842:	e028      	b.n	8009896 <_dtoa_r+0x39e>
 8009844:	2602      	movs	r6, #2
 8009846:	e7f2      	b.n	800982e <_dtoa_r+0x336>
 8009848:	07e1      	lsls	r1, r4, #31
 800984a:	d508      	bpl.n	800985e <_dtoa_r+0x366>
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009854:	f7f6 fef8 	bl	8000648 <__aeabi_dmul>
 8009858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800985c:	3601      	adds	r6, #1
 800985e:	1064      	asrs	r4, r4, #1
 8009860:	3508      	adds	r5, #8
 8009862:	e7e5      	b.n	8009830 <_dtoa_r+0x338>
 8009864:	f000 80d2 	beq.w	8009a0c <_dtoa_r+0x514>
 8009868:	427c      	negs	r4, r7
 800986a:	4b92      	ldr	r3, [pc, #584]	@ (8009ab4 <_dtoa_r+0x5bc>)
 800986c:	4d92      	ldr	r5, [pc, #584]	@ (8009ab8 <_dtoa_r+0x5c0>)
 800986e:	f004 020f 	and.w	r2, r4, #15
 8009872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800987e:	f7f6 fee3 	bl	8000648 <__aeabi_dmul>
 8009882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009886:	1124      	asrs	r4, r4, #4
 8009888:	2300      	movs	r3, #0
 800988a:	2602      	movs	r6, #2
 800988c:	2c00      	cmp	r4, #0
 800988e:	f040 80b2 	bne.w	80099f6 <_dtoa_r+0x4fe>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1d3      	bne.n	800983e <_dtoa_r+0x346>
 8009896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 80b7 	beq.w	8009a10 <_dtoa_r+0x518>
 80098a2:	4b86      	ldr	r3, [pc, #536]	@ (8009abc <_dtoa_r+0x5c4>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f7 f93f 	bl	8000b2c <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 80ae 	beq.w	8009a10 <_dtoa_r+0x518>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 80aa 	beq.w	8009a10 <_dtoa_r+0x518>
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd37      	ble.n	8009932 <_dtoa_r+0x43a>
 80098c2:	1e7b      	subs	r3, r7, #1
 80098c4:	9304      	str	r3, [sp, #16]
 80098c6:	4620      	mov	r0, r4
 80098c8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ac0 <_dtoa_r+0x5c8>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 febb 	bl	8000648 <__aeabi_dmul>
 80098d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d6:	9c00      	ldr	r4, [sp, #0]
 80098d8:	3601      	adds	r6, #1
 80098da:	4630      	mov	r0, r6
 80098dc:	f7f6 fe4a 	bl	8000574 <__aeabi_i2d>
 80098e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098e4:	f7f6 feb0 	bl	8000648 <__aeabi_dmul>
 80098e8:	4b76      	ldr	r3, [pc, #472]	@ (8009ac4 <_dtoa_r+0x5cc>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	f7f6 fcf6 	bl	80002dc <__adddf3>
 80098f0:	4605      	mov	r5, r0
 80098f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	f040 808d 	bne.w	8009a16 <_dtoa_r+0x51e>
 80098fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009900:	4b71      	ldr	r3, [pc, #452]	@ (8009ac8 <_dtoa_r+0x5d0>)
 8009902:	2200      	movs	r2, #0
 8009904:	f7f6 fce8 	bl	80002d8 <__aeabi_dsub>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009910:	462a      	mov	r2, r5
 8009912:	4633      	mov	r3, r6
 8009914:	f7f7 f928 	bl	8000b68 <__aeabi_dcmpgt>
 8009918:	2800      	cmp	r0, #0
 800991a:	f040 828b 	bne.w	8009e34 <_dtoa_r+0x93c>
 800991e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009922:	462a      	mov	r2, r5
 8009924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009928:	f7f7 f900 	bl	8000b2c <__aeabi_dcmplt>
 800992c:	2800      	cmp	r0, #0
 800992e:	f040 8128 	bne.w	8009b82 <_dtoa_r+0x68a>
 8009932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800993a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800993c:	2b00      	cmp	r3, #0
 800993e:	f2c0 815a 	blt.w	8009bf6 <_dtoa_r+0x6fe>
 8009942:	2f0e      	cmp	r7, #14
 8009944:	f300 8157 	bgt.w	8009bf6 <_dtoa_r+0x6fe>
 8009948:	4b5a      	ldr	r3, [pc, #360]	@ (8009ab4 <_dtoa_r+0x5bc>)
 800994a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800994e:	ed93 7b00 	vldr	d7, [r3]
 8009952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009954:	2b00      	cmp	r3, #0
 8009956:	ed8d 7b00 	vstr	d7, [sp]
 800995a:	da03      	bge.n	8009964 <_dtoa_r+0x46c>
 800995c:	9b07      	ldr	r3, [sp, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f340 8101 	ble.w	8009b66 <_dtoa_r+0x66e>
 8009964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009968:	4656      	mov	r6, sl
 800996a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 ff93 	bl	800089c <__aeabi_ddiv>
 8009976:	f7f7 f917 	bl	8000ba8 <__aeabi_d2iz>
 800997a:	4680      	mov	r8, r0
 800997c:	f7f6 fdfa 	bl	8000574 <__aeabi_i2d>
 8009980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009984:	f7f6 fe60 	bl	8000648 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009994:	f7f6 fca0 	bl	80002d8 <__aeabi_dsub>
 8009998:	f806 4b01 	strb.w	r4, [r6], #1
 800999c:	9d07      	ldr	r5, [sp, #28]
 800999e:	eba6 040a 	sub.w	r4, r6, sl
 80099a2:	42a5      	cmp	r5, r4
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	f040 8117 	bne.w	8009bda <_dtoa_r+0x6e2>
 80099ac:	f7f6 fc96 	bl	80002dc <__adddf3>
 80099b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b4:	4604      	mov	r4, r0
 80099b6:	460d      	mov	r5, r1
 80099b8:	f7f7 f8d6 	bl	8000b68 <__aeabi_dcmpgt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	f040 80f9 	bne.w	8009bb4 <_dtoa_r+0x6bc>
 80099c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f7 f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 80099ce:	b118      	cbz	r0, 80099d8 <_dtoa_r+0x4e0>
 80099d0:	f018 0f01 	tst.w	r8, #1
 80099d4:	f040 80ee 	bne.w	8009bb4 <_dtoa_r+0x6bc>
 80099d8:	4649      	mov	r1, r9
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fc90 	bl	800a300 <_Bfree>
 80099e0:	2300      	movs	r3, #0
 80099e2:	7033      	strb	r3, [r6, #0]
 80099e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099e6:	3701      	adds	r7, #1
 80099e8:	601f      	str	r7, [r3, #0]
 80099ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 831d 	beq.w	800a02c <_dtoa_r+0xb34>
 80099f2:	601e      	str	r6, [r3, #0]
 80099f4:	e31a      	b.n	800a02c <_dtoa_r+0xb34>
 80099f6:	07e2      	lsls	r2, r4, #31
 80099f8:	d505      	bpl.n	8009a06 <_dtoa_r+0x50e>
 80099fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099fe:	f7f6 fe23 	bl	8000648 <__aeabi_dmul>
 8009a02:	3601      	adds	r6, #1
 8009a04:	2301      	movs	r3, #1
 8009a06:	1064      	asrs	r4, r4, #1
 8009a08:	3508      	adds	r5, #8
 8009a0a:	e73f      	b.n	800988c <_dtoa_r+0x394>
 8009a0c:	2602      	movs	r6, #2
 8009a0e:	e742      	b.n	8009896 <_dtoa_r+0x39e>
 8009a10:	9c07      	ldr	r4, [sp, #28]
 8009a12:	9704      	str	r7, [sp, #16]
 8009a14:	e761      	b.n	80098da <_dtoa_r+0x3e2>
 8009a16:	4b27      	ldr	r3, [pc, #156]	@ (8009ab4 <_dtoa_r+0x5bc>)
 8009a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a22:	4454      	add	r4, sl
 8009a24:	2900      	cmp	r1, #0
 8009a26:	d053      	beq.n	8009ad0 <_dtoa_r+0x5d8>
 8009a28:	4928      	ldr	r1, [pc, #160]	@ (8009acc <_dtoa_r+0x5d4>)
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	f7f6 ff36 	bl	800089c <__aeabi_ddiv>
 8009a30:	4633      	mov	r3, r6
 8009a32:	462a      	mov	r2, r5
 8009a34:	f7f6 fc50 	bl	80002d8 <__aeabi_dsub>
 8009a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a3c:	4656      	mov	r6, sl
 8009a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a42:	f7f7 f8b1 	bl	8000ba8 <__aeabi_d2iz>
 8009a46:	4605      	mov	r5, r0
 8009a48:	f7f6 fd94 	bl	8000574 <__aeabi_i2d>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a54:	f7f6 fc40 	bl	80002d8 <__aeabi_dsub>
 8009a58:	3530      	adds	r5, #48	@ 0x30
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a62:	f806 5b01 	strb.w	r5, [r6], #1
 8009a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a6a:	f7f7 f85f 	bl	8000b2c <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d171      	bne.n	8009b56 <_dtoa_r+0x65e>
 8009a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a76:	4911      	ldr	r1, [pc, #68]	@ (8009abc <_dtoa_r+0x5c4>)
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f7f6 fc2d 	bl	80002d8 <__aeabi_dsub>
 8009a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a82:	f7f7 f853 	bl	8000b2c <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f040 8095 	bne.w	8009bb6 <_dtoa_r+0x6be>
 8009a8c:	42a6      	cmp	r6, r4
 8009a8e:	f43f af50 	beq.w	8009932 <_dtoa_r+0x43a>
 8009a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <_dtoa_r+0x5c8>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f7f6 fdd5 	bl	8000648 <__aeabi_dmul>
 8009a9e:	4b08      	ldr	r3, [pc, #32]	@ (8009ac0 <_dtoa_r+0x5c8>)
 8009aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aaa:	f7f6 fdcd 	bl	8000648 <__aeabi_dmul>
 8009aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab2:	e7c4      	b.n	8009a3e <_dtoa_r+0x546>
 8009ab4:	0800b3b0 	.word	0x0800b3b0
 8009ab8:	0800b388 	.word	0x0800b388
 8009abc:	3ff00000 	.word	0x3ff00000
 8009ac0:	40240000 	.word	0x40240000
 8009ac4:	401c0000 	.word	0x401c0000
 8009ac8:	40140000 	.word	0x40140000
 8009acc:	3fe00000 	.word	0x3fe00000
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7f6 fdb8 	bl	8000648 <__aeabi_dmul>
 8009ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009adc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ade:	4656      	mov	r6, sl
 8009ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae4:	f7f7 f860 	bl	8000ba8 <__aeabi_d2iz>
 8009ae8:	4605      	mov	r5, r0
 8009aea:	f7f6 fd43 	bl	8000574 <__aeabi_i2d>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af6:	f7f6 fbef 	bl	80002d8 <__aeabi_dsub>
 8009afa:	3530      	adds	r5, #48	@ 0x30
 8009afc:	f806 5b01 	strb.w	r5, [r6], #1
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	42a6      	cmp	r6, r4
 8009b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	d124      	bne.n	8009b5a <_dtoa_r+0x662>
 8009b10:	4bac      	ldr	r3, [pc, #688]	@ (8009dc4 <_dtoa_r+0x8cc>)
 8009b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b16:	f7f6 fbe1 	bl	80002dc <__adddf3>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b22:	f7f7 f821 	bl	8000b68 <__aeabi_dcmpgt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d145      	bne.n	8009bb6 <_dtoa_r+0x6be>
 8009b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b2e:	49a5      	ldr	r1, [pc, #660]	@ (8009dc4 <_dtoa_r+0x8cc>)
 8009b30:	2000      	movs	r0, #0
 8009b32:	f7f6 fbd1 	bl	80002d8 <__aeabi_dsub>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b3e:	f7f6 fff5 	bl	8000b2c <__aeabi_dcmplt>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f43f aef5 	beq.w	8009932 <_dtoa_r+0x43a>
 8009b48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b4a:	1e73      	subs	r3, r6, #1
 8009b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b52:	2b30      	cmp	r3, #48	@ 0x30
 8009b54:	d0f8      	beq.n	8009b48 <_dtoa_r+0x650>
 8009b56:	9f04      	ldr	r7, [sp, #16]
 8009b58:	e73e      	b.n	80099d8 <_dtoa_r+0x4e0>
 8009b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009dc8 <_dtoa_r+0x8d0>)
 8009b5c:	f7f6 fd74 	bl	8000648 <__aeabi_dmul>
 8009b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b64:	e7bc      	b.n	8009ae0 <_dtoa_r+0x5e8>
 8009b66:	d10c      	bne.n	8009b82 <_dtoa_r+0x68a>
 8009b68:	4b98      	ldr	r3, [pc, #608]	@ (8009dcc <_dtoa_r+0x8d4>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b70:	f7f6 fd6a 	bl	8000648 <__aeabi_dmul>
 8009b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b78:	f7f6 ffec 	bl	8000b54 <__aeabi_dcmpge>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f000 8157 	beq.w	8009e30 <_dtoa_r+0x938>
 8009b82:	2400      	movs	r4, #0
 8009b84:	4625      	mov	r5, r4
 8009b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	4656      	mov	r6, sl
 8009b8e:	2700      	movs	r7, #0
 8009b90:	4621      	mov	r1, r4
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 fbb4 	bl	800a300 <_Bfree>
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	d0dc      	beq.n	8009b56 <_dtoa_r+0x65e>
 8009b9c:	b12f      	cbz	r7, 8009baa <_dtoa_r+0x6b2>
 8009b9e:	42af      	cmp	r7, r5
 8009ba0:	d003      	beq.n	8009baa <_dtoa_r+0x6b2>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4658      	mov	r0, fp
 8009ba6:	f000 fbab 	bl	800a300 <_Bfree>
 8009baa:	4629      	mov	r1, r5
 8009bac:	4658      	mov	r0, fp
 8009bae:	f000 fba7 	bl	800a300 <_Bfree>
 8009bb2:	e7d0      	b.n	8009b56 <_dtoa_r+0x65e>
 8009bb4:	9704      	str	r7, [sp, #16]
 8009bb6:	4633      	mov	r3, r6
 8009bb8:	461e      	mov	r6, r3
 8009bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bbe:	2a39      	cmp	r2, #57	@ 0x39
 8009bc0:	d107      	bne.n	8009bd2 <_dtoa_r+0x6da>
 8009bc2:	459a      	cmp	sl, r3
 8009bc4:	d1f8      	bne.n	8009bb8 <_dtoa_r+0x6c0>
 8009bc6:	9a04      	ldr	r2, [sp, #16]
 8009bc8:	3201      	adds	r2, #1
 8009bca:	9204      	str	r2, [sp, #16]
 8009bcc:	2230      	movs	r2, #48	@ 0x30
 8009bce:	f88a 2000 	strb.w	r2, [sl]
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	3201      	adds	r2, #1
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	e7bd      	b.n	8009b56 <_dtoa_r+0x65e>
 8009bda:	4b7b      	ldr	r3, [pc, #492]	@ (8009dc8 <_dtoa_r+0x8d0>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f7f6 fd33 	bl	8000648 <__aeabi_dmul>
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	f7f6 ff95 	bl	8000b18 <__aeabi_dcmpeq>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f aebb 	beq.w	800996a <_dtoa_r+0x472>
 8009bf4:	e6f0      	b.n	80099d8 <_dtoa_r+0x4e0>
 8009bf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	f000 80db 	beq.w	8009db4 <_dtoa_r+0x8bc>
 8009bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c00:	2a01      	cmp	r2, #1
 8009c02:	f300 80bf 	bgt.w	8009d84 <_dtoa_r+0x88c>
 8009c06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	f000 80b7 	beq.w	8009d7c <_dtoa_r+0x884>
 8009c0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c14:	4646      	mov	r6, r8
 8009c16:	9a08      	ldr	r2, [sp, #32]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	441a      	add	r2, r3
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	4498      	add	r8, r3
 8009c20:	9208      	str	r2, [sp, #32]
 8009c22:	f000 fc21 	bl	800a468 <__i2b>
 8009c26:	4605      	mov	r5, r0
 8009c28:	b15e      	cbz	r6, 8009c42 <_dtoa_r+0x74a>
 8009c2a:	9b08      	ldr	r3, [sp, #32]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dd08      	ble.n	8009c42 <_dtoa_r+0x74a>
 8009c30:	42b3      	cmp	r3, r6
 8009c32:	9a08      	ldr	r2, [sp, #32]
 8009c34:	bfa8      	it	ge
 8009c36:	4633      	movge	r3, r6
 8009c38:	eba8 0803 	sub.w	r8, r8, r3
 8009c3c:	1af6      	subs	r6, r6, r3
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	9308      	str	r3, [sp, #32]
 8009c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c44:	b1f3      	cbz	r3, 8009c84 <_dtoa_r+0x78c>
 8009c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 80b7 	beq.w	8009dbc <_dtoa_r+0x8c4>
 8009c4e:	b18c      	cbz	r4, 8009c74 <_dtoa_r+0x77c>
 8009c50:	4629      	mov	r1, r5
 8009c52:	4622      	mov	r2, r4
 8009c54:	4658      	mov	r0, fp
 8009c56:	f000 fcc7 	bl	800a5e8 <__pow5mult>
 8009c5a:	464a      	mov	r2, r9
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4605      	mov	r5, r0
 8009c60:	4658      	mov	r0, fp
 8009c62:	f000 fc17 	bl	800a494 <__multiply>
 8009c66:	4649      	mov	r1, r9
 8009c68:	9004      	str	r0, [sp, #16]
 8009c6a:	4658      	mov	r0, fp
 8009c6c:	f000 fb48 	bl	800a300 <_Bfree>
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	4699      	mov	r9, r3
 8009c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c76:	1b1a      	subs	r2, r3, r4
 8009c78:	d004      	beq.n	8009c84 <_dtoa_r+0x78c>
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f000 fcb3 	bl	800a5e8 <__pow5mult>
 8009c82:	4681      	mov	r9, r0
 8009c84:	2101      	movs	r1, #1
 8009c86:	4658      	mov	r0, fp
 8009c88:	f000 fbee 	bl	800a468 <__i2b>
 8009c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8e:	4604      	mov	r4, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 81cf 	beq.w	800a034 <_dtoa_r+0xb3c>
 8009c96:	461a      	mov	r2, r3
 8009c98:	4601      	mov	r1, r0
 8009c9a:	4658      	mov	r0, fp
 8009c9c:	f000 fca4 	bl	800a5e8 <__pow5mult>
 8009ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	f300 8095 	bgt.w	8009dd4 <_dtoa_r+0x8dc>
 8009caa:	9b02      	ldr	r3, [sp, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 8087 	bne.w	8009dc0 <_dtoa_r+0x8c8>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f040 8089 	bne.w	8009dd0 <_dtoa_r+0x8d8>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009cc4:	0d1b      	lsrs	r3, r3, #20
 8009cc6:	051b      	lsls	r3, r3, #20
 8009cc8:	b12b      	cbz	r3, 8009cd6 <_dtoa_r+0x7de>
 8009cca:	9b08      	ldr	r3, [sp, #32]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	9308      	str	r3, [sp, #32]
 8009cd0:	f108 0801 	add.w	r8, r8, #1
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 81b0 	beq.w	800a040 <_dtoa_r+0xb48>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ce6:	6918      	ldr	r0, [r3, #16]
 8009ce8:	f000 fb72 	bl	800a3d0 <__hi0bits>
 8009cec:	f1c0 0020 	rsb	r0, r0, #32
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	4418      	add	r0, r3
 8009cf4:	f010 001f 	ands.w	r0, r0, #31
 8009cf8:	d077      	beq.n	8009dea <_dtoa_r+0x8f2>
 8009cfa:	f1c0 0320 	rsb	r3, r0, #32
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	dd6b      	ble.n	8009dda <_dtoa_r+0x8e2>
 8009d02:	9b08      	ldr	r3, [sp, #32]
 8009d04:	f1c0 001c 	rsb	r0, r0, #28
 8009d08:	4403      	add	r3, r0
 8009d0a:	4480      	add	r8, r0
 8009d0c:	4406      	add	r6, r0
 8009d0e:	9308      	str	r3, [sp, #32]
 8009d10:	f1b8 0f00 	cmp.w	r8, #0
 8009d14:	dd05      	ble.n	8009d22 <_dtoa_r+0x82a>
 8009d16:	4649      	mov	r1, r9
 8009d18:	4642      	mov	r2, r8
 8009d1a:	4658      	mov	r0, fp
 8009d1c:	f000 fcbe 	bl	800a69c <__lshift>
 8009d20:	4681      	mov	r9, r0
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dd05      	ble.n	8009d34 <_dtoa_r+0x83c>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4658      	mov	r0, fp
 8009d2e:	f000 fcb5 	bl	800a69c <__lshift>
 8009d32:	4604      	mov	r4, r0
 8009d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d059      	beq.n	8009dee <_dtoa_r+0x8f6>
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4648      	mov	r0, r9
 8009d3e:	f000 fd19 	bl	800a774 <__mcmp>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	da53      	bge.n	8009dee <_dtoa_r+0x8f6>
 8009d46:	1e7b      	subs	r3, r7, #1
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	220a      	movs	r2, #10
 8009d50:	4658      	mov	r0, fp
 8009d52:	f000 faf7 	bl	800a344 <__multadd>
 8009d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d58:	4681      	mov	r9, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 8172 	beq.w	800a044 <_dtoa_r+0xb4c>
 8009d60:	2300      	movs	r3, #0
 8009d62:	4629      	mov	r1, r5
 8009d64:	220a      	movs	r2, #10
 8009d66:	4658      	mov	r0, fp
 8009d68:	f000 faec 	bl	800a344 <__multadd>
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	4605      	mov	r5, r0
 8009d72:	dc67      	bgt.n	8009e44 <_dtoa_r+0x94c>
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	dc41      	bgt.n	8009dfe <_dtoa_r+0x906>
 8009d7a:	e063      	b.n	8009e44 <_dtoa_r+0x94c>
 8009d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d82:	e746      	b.n	8009c12 <_dtoa_r+0x71a>
 8009d84:	9b07      	ldr	r3, [sp, #28]
 8009d86:	1e5c      	subs	r4, r3, #1
 8009d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	bfbf      	itttt	lt
 8009d8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009d92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d94:	1ae3      	sublt	r3, r4, r3
 8009d96:	bfb4      	ite	lt
 8009d98:	18d2      	addlt	r2, r2, r3
 8009d9a:	1b1c      	subge	r4, r3, r4
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	bfbc      	itt	lt
 8009da0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009da2:	2400      	movlt	r4, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bfb5      	itete	lt
 8009da8:	eba8 0603 	sublt.w	r6, r8, r3
 8009dac:	9b07      	ldrge	r3, [sp, #28]
 8009dae:	2300      	movlt	r3, #0
 8009db0:	4646      	movge	r6, r8
 8009db2:	e730      	b.n	8009c16 <_dtoa_r+0x71e>
 8009db4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009db6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009db8:	4646      	mov	r6, r8
 8009dba:	e735      	b.n	8009c28 <_dtoa_r+0x730>
 8009dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dbe:	e75c      	b.n	8009c7a <_dtoa_r+0x782>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e788      	b.n	8009cd6 <_dtoa_r+0x7de>
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	40240000 	.word	0x40240000
 8009dcc:	40140000 	.word	0x40140000
 8009dd0:	9b02      	ldr	r3, [sp, #8]
 8009dd2:	e780      	b.n	8009cd6 <_dtoa_r+0x7de>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dd8:	e782      	b.n	8009ce0 <_dtoa_r+0x7e8>
 8009dda:	d099      	beq.n	8009d10 <_dtoa_r+0x818>
 8009ddc:	9a08      	ldr	r2, [sp, #32]
 8009dde:	331c      	adds	r3, #28
 8009de0:	441a      	add	r2, r3
 8009de2:	4498      	add	r8, r3
 8009de4:	441e      	add	r6, r3
 8009de6:	9208      	str	r2, [sp, #32]
 8009de8:	e792      	b.n	8009d10 <_dtoa_r+0x818>
 8009dea:	4603      	mov	r3, r0
 8009dec:	e7f6      	b.n	8009ddc <_dtoa_r+0x8e4>
 8009dee:	9b07      	ldr	r3, [sp, #28]
 8009df0:	9704      	str	r7, [sp, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dc20      	bgt.n	8009e38 <_dtoa_r+0x940>
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	dd1e      	ble.n	8009e3c <_dtoa_r+0x944>
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f47f aec0 	bne.w	8009b86 <_dtoa_r+0x68e>
 8009e06:	4621      	mov	r1, r4
 8009e08:	2205      	movs	r2, #5
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f000 fa9a 	bl	800a344 <__multadd>
 8009e10:	4601      	mov	r1, r0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4648      	mov	r0, r9
 8009e16:	f000 fcad 	bl	800a774 <__mcmp>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	f77f aeb3 	ble.w	8009b86 <_dtoa_r+0x68e>
 8009e20:	4656      	mov	r6, sl
 8009e22:	2331      	movs	r3, #49	@ 0x31
 8009e24:	f806 3b01 	strb.w	r3, [r6], #1
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	e6ae      	b.n	8009b8e <_dtoa_r+0x696>
 8009e30:	9c07      	ldr	r4, [sp, #28]
 8009e32:	9704      	str	r7, [sp, #16]
 8009e34:	4625      	mov	r5, r4
 8009e36:	e7f3      	b.n	8009e20 <_dtoa_r+0x928>
 8009e38:	9b07      	ldr	r3, [sp, #28]
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 8104 	beq.w	800a04c <_dtoa_r+0xb54>
 8009e44:	2e00      	cmp	r6, #0
 8009e46:	dd05      	ble.n	8009e54 <_dtoa_r+0x95c>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4632      	mov	r2, r6
 8009e4c:	4658      	mov	r0, fp
 8009e4e:	f000 fc25 	bl	800a69c <__lshift>
 8009e52:	4605      	mov	r5, r0
 8009e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d05a      	beq.n	8009f10 <_dtoa_r+0xa18>
 8009e5a:	6869      	ldr	r1, [r5, #4]
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f000 fa0f 	bl	800a280 <_Balloc>
 8009e62:	4606      	mov	r6, r0
 8009e64:	b928      	cbnz	r0, 8009e72 <_dtoa_r+0x97a>
 8009e66:	4b84      	ldr	r3, [pc, #528]	@ (800a078 <_dtoa_r+0xb80>)
 8009e68:	4602      	mov	r2, r0
 8009e6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e6e:	f7ff bb5a 	b.w	8009526 <_dtoa_r+0x2e>
 8009e72:	692a      	ldr	r2, [r5, #16]
 8009e74:	3202      	adds	r2, #2
 8009e76:	0092      	lsls	r2, r2, #2
 8009e78:	f105 010c 	add.w	r1, r5, #12
 8009e7c:	300c      	adds	r0, #12
 8009e7e:	f7ff faa2 	bl	80093c6 <memcpy>
 8009e82:	2201      	movs	r2, #1
 8009e84:	4631      	mov	r1, r6
 8009e86:	4658      	mov	r0, fp
 8009e88:	f000 fc08 	bl	800a69c <__lshift>
 8009e8c:	f10a 0301 	add.w	r3, sl, #1
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	9b00      	ldr	r3, [sp, #0]
 8009e94:	4453      	add	r3, sl
 8009e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	462f      	mov	r7, r5
 8009ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	4648      	mov	r0, r9
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	f7ff fa98 	bl	80093e2 <quorem>
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	9002      	str	r0, [sp, #8]
 8009eb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009eba:	4648      	mov	r0, r9
 8009ebc:	f000 fc5a 	bl	800a774 <__mcmp>
 8009ec0:	462a      	mov	r2, r5
 8009ec2:	9008      	str	r0, [sp, #32]
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f000 fc70 	bl	800a7ac <__mdiff>
 8009ecc:	68c2      	ldr	r2, [r0, #12]
 8009ece:	4606      	mov	r6, r0
 8009ed0:	bb02      	cbnz	r2, 8009f14 <_dtoa_r+0xa1c>
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 fc4d 	bl	800a774 <__mcmp>
 8009eda:	4602      	mov	r2, r0
 8009edc:	4631      	mov	r1, r6
 8009ede:	4658      	mov	r0, fp
 8009ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ee2:	f000 fa0d 	bl	800a300 <_Bfree>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eea:	9e07      	ldr	r6, [sp, #28]
 8009eec:	ea43 0102 	orr.w	r1, r3, r2
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ef2:	4319      	orrs	r1, r3
 8009ef4:	d110      	bne.n	8009f18 <_dtoa_r+0xa20>
 8009ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009efa:	d029      	beq.n	8009f50 <_dtoa_r+0xa58>
 8009efc:	9b08      	ldr	r3, [sp, #32]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dd02      	ble.n	8009f08 <_dtoa_r+0xa10>
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f08:	9b00      	ldr	r3, [sp, #0]
 8009f0a:	f883 8000 	strb.w	r8, [r3]
 8009f0e:	e63f      	b.n	8009b90 <_dtoa_r+0x698>
 8009f10:	4628      	mov	r0, r5
 8009f12:	e7bb      	b.n	8009e8c <_dtoa_r+0x994>
 8009f14:	2201      	movs	r2, #1
 8009f16:	e7e1      	b.n	8009edc <_dtoa_r+0x9e4>
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	db04      	blt.n	8009f28 <_dtoa_r+0xa30>
 8009f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f20:	430b      	orrs	r3, r1
 8009f22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f24:	430b      	orrs	r3, r1
 8009f26:	d120      	bne.n	8009f6a <_dtoa_r+0xa72>
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	dded      	ble.n	8009f08 <_dtoa_r+0xa10>
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4658      	mov	r0, fp
 8009f32:	f000 fbb3 	bl	800a69c <__lshift>
 8009f36:	4621      	mov	r1, r4
 8009f38:	4681      	mov	r9, r0
 8009f3a:	f000 fc1b 	bl	800a774 <__mcmp>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	dc03      	bgt.n	8009f4a <_dtoa_r+0xa52>
 8009f42:	d1e1      	bne.n	8009f08 <_dtoa_r+0xa10>
 8009f44:	f018 0f01 	tst.w	r8, #1
 8009f48:	d0de      	beq.n	8009f08 <_dtoa_r+0xa10>
 8009f4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f4e:	d1d8      	bne.n	8009f02 <_dtoa_r+0xa0a>
 8009f50:	9a00      	ldr	r2, [sp, #0]
 8009f52:	2339      	movs	r3, #57	@ 0x39
 8009f54:	7013      	strb	r3, [r2, #0]
 8009f56:	4633      	mov	r3, r6
 8009f58:	461e      	mov	r6, r3
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f60:	2a39      	cmp	r2, #57	@ 0x39
 8009f62:	d052      	beq.n	800a00a <_dtoa_r+0xb12>
 8009f64:	3201      	adds	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]
 8009f68:	e612      	b.n	8009b90 <_dtoa_r+0x698>
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	dd07      	ble.n	8009f7e <_dtoa_r+0xa86>
 8009f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f72:	d0ed      	beq.n	8009f50 <_dtoa_r+0xa58>
 8009f74:	9a00      	ldr	r2, [sp, #0]
 8009f76:	f108 0301 	add.w	r3, r8, #1
 8009f7a:	7013      	strb	r3, [r2, #0]
 8009f7c:	e608      	b.n	8009b90 <_dtoa_r+0x698>
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	9a07      	ldr	r2, [sp, #28]
 8009f82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d028      	beq.n	8009fde <_dtoa_r+0xae6>
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	2300      	movs	r3, #0
 8009f90:	220a      	movs	r2, #10
 8009f92:	4658      	mov	r0, fp
 8009f94:	f000 f9d6 	bl	800a344 <__multadd>
 8009f98:	42af      	cmp	r7, r5
 8009f9a:	4681      	mov	r9, r0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	f04f 020a 	mov.w	r2, #10
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	d107      	bne.n	8009fba <_dtoa_r+0xac2>
 8009faa:	f000 f9cb 	bl	800a344 <__multadd>
 8009fae:	4607      	mov	r7, r0
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	e774      	b.n	8009ea4 <_dtoa_r+0x9ac>
 8009fba:	f000 f9c3 	bl	800a344 <__multadd>
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	4658      	mov	r0, fp
 8009fc8:	f000 f9bc 	bl	800a344 <__multadd>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	e7f0      	b.n	8009fb2 <_dtoa_r+0xaba>
 8009fd0:	9b00      	ldr	r3, [sp, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bfcc      	ite	gt
 8009fd6:	461e      	movgt	r6, r3
 8009fd8:	2601      	movle	r6, #1
 8009fda:	4456      	add	r6, sl
 8009fdc:	2700      	movs	r7, #0
 8009fde:	4649      	mov	r1, r9
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	4658      	mov	r0, fp
 8009fe4:	f000 fb5a 	bl	800a69c <__lshift>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4681      	mov	r9, r0
 8009fec:	f000 fbc2 	bl	800a774 <__mcmp>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	dcb0      	bgt.n	8009f56 <_dtoa_r+0xa5e>
 8009ff4:	d102      	bne.n	8009ffc <_dtoa_r+0xb04>
 8009ff6:	f018 0f01 	tst.w	r8, #1
 8009ffa:	d1ac      	bne.n	8009f56 <_dtoa_r+0xa5e>
 8009ffc:	4633      	mov	r3, r6
 8009ffe:	461e      	mov	r6, r3
 800a000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a004:	2a30      	cmp	r2, #48	@ 0x30
 800a006:	d0fa      	beq.n	8009ffe <_dtoa_r+0xb06>
 800a008:	e5c2      	b.n	8009b90 <_dtoa_r+0x698>
 800a00a:	459a      	cmp	sl, r3
 800a00c:	d1a4      	bne.n	8009f58 <_dtoa_r+0xa60>
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	3301      	adds	r3, #1
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	2331      	movs	r3, #49	@ 0x31
 800a016:	f88a 3000 	strb.w	r3, [sl]
 800a01a:	e5b9      	b.n	8009b90 <_dtoa_r+0x698>
 800a01c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a01e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a07c <_dtoa_r+0xb84>
 800a022:	b11b      	cbz	r3, 800a02c <_dtoa_r+0xb34>
 800a024:	f10a 0308 	add.w	r3, sl, #8
 800a028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	4650      	mov	r0, sl
 800a02e:	b019      	add	sp, #100	@ 0x64
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a036:	2b01      	cmp	r3, #1
 800a038:	f77f ae37 	ble.w	8009caa <_dtoa_r+0x7b2>
 800a03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a040:	2001      	movs	r0, #1
 800a042:	e655      	b.n	8009cf0 <_dtoa_r+0x7f8>
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f77f aed6 	ble.w	8009df8 <_dtoa_r+0x900>
 800a04c:	4656      	mov	r6, sl
 800a04e:	4621      	mov	r1, r4
 800a050:	4648      	mov	r0, r9
 800a052:	f7ff f9c6 	bl	80093e2 <quorem>
 800a056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a05a:	f806 8b01 	strb.w	r8, [r6], #1
 800a05e:	9b00      	ldr	r3, [sp, #0]
 800a060:	eba6 020a 	sub.w	r2, r6, sl
 800a064:	4293      	cmp	r3, r2
 800a066:	ddb3      	ble.n	8009fd0 <_dtoa_r+0xad8>
 800a068:	4649      	mov	r1, r9
 800a06a:	2300      	movs	r3, #0
 800a06c:	220a      	movs	r2, #10
 800a06e:	4658      	mov	r0, fp
 800a070:	f000 f968 	bl	800a344 <__multadd>
 800a074:	4681      	mov	r9, r0
 800a076:	e7ea      	b.n	800a04e <_dtoa_r+0xb56>
 800a078:	0800b30c 	.word	0x0800b30c
 800a07c:	0800b290 	.word	0x0800b290

0800a080 <_free_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4605      	mov	r5, r0
 800a084:	2900      	cmp	r1, #0
 800a086:	d041      	beq.n	800a10c <_free_r+0x8c>
 800a088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a08c:	1f0c      	subs	r4, r1, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfb8      	it	lt
 800a092:	18e4      	addlt	r4, r4, r3
 800a094:	f000 f8e8 	bl	800a268 <__malloc_lock>
 800a098:	4a1d      	ldr	r2, [pc, #116]	@ (800a110 <_free_r+0x90>)
 800a09a:	6813      	ldr	r3, [r2, #0]
 800a09c:	b933      	cbnz	r3, 800a0ac <_free_r+0x2c>
 800a09e:	6063      	str	r3, [r4, #4]
 800a0a0:	6014      	str	r4, [r2, #0]
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0a8:	f000 b8e4 	b.w	800a274 <__malloc_unlock>
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d908      	bls.n	800a0c2 <_free_r+0x42>
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	1821      	adds	r1, r4, r0
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	bf01      	itttt	eq
 800a0b8:	6819      	ldreq	r1, [r3, #0]
 800a0ba:	685b      	ldreq	r3, [r3, #4]
 800a0bc:	1809      	addeq	r1, r1, r0
 800a0be:	6021      	streq	r1, [r4, #0]
 800a0c0:	e7ed      	b.n	800a09e <_free_r+0x1e>
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b10b      	cbz	r3, 800a0cc <_free_r+0x4c>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d9fa      	bls.n	800a0c2 <_free_r+0x42>
 800a0cc:	6811      	ldr	r1, [r2, #0]
 800a0ce:	1850      	adds	r0, r2, r1
 800a0d0:	42a0      	cmp	r0, r4
 800a0d2:	d10b      	bne.n	800a0ec <_free_r+0x6c>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	4401      	add	r1, r0
 800a0d8:	1850      	adds	r0, r2, r1
 800a0da:	4283      	cmp	r3, r0
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	d1e0      	bne.n	800a0a2 <_free_r+0x22>
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	6053      	str	r3, [r2, #4]
 800a0e6:	4408      	add	r0, r1
 800a0e8:	6010      	str	r0, [r2, #0]
 800a0ea:	e7da      	b.n	800a0a2 <_free_r+0x22>
 800a0ec:	d902      	bls.n	800a0f4 <_free_r+0x74>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	e7d6      	b.n	800a0a2 <_free_r+0x22>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	1821      	adds	r1, r4, r0
 800a0f8:	428b      	cmp	r3, r1
 800a0fa:	bf04      	itt	eq
 800a0fc:	6819      	ldreq	r1, [r3, #0]
 800a0fe:	685b      	ldreq	r3, [r3, #4]
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	bf04      	itt	eq
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	6054      	str	r4, [r2, #4]
 800a10a:	e7ca      	b.n	800a0a2 <_free_r+0x22>
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	20001e88 	.word	0x20001e88

0800a114 <malloc>:
 800a114:	4b02      	ldr	r3, [pc, #8]	@ (800a120 <malloc+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b825 	b.w	800a168 <_malloc_r>
 800a11e:	bf00      	nop
 800a120:	2000001c 	.word	0x2000001c

0800a124 <sbrk_aligned>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4e0f      	ldr	r6, [pc, #60]	@ (800a164 <sbrk_aligned+0x40>)
 800a128:	460c      	mov	r4, r1
 800a12a:	6831      	ldr	r1, [r6, #0]
 800a12c:	4605      	mov	r5, r0
 800a12e:	b911      	cbnz	r1, 800a136 <sbrk_aligned+0x12>
 800a130:	f000 feaa 	bl	800ae88 <_sbrk_r>
 800a134:	6030      	str	r0, [r6, #0]
 800a136:	4621      	mov	r1, r4
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 fea5 	bl	800ae88 <_sbrk_r>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d103      	bne.n	800a14a <sbrk_aligned+0x26>
 800a142:	f04f 34ff 	mov.w	r4, #4294967295
 800a146:	4620      	mov	r0, r4
 800a148:	bd70      	pop	{r4, r5, r6, pc}
 800a14a:	1cc4      	adds	r4, r0, #3
 800a14c:	f024 0403 	bic.w	r4, r4, #3
 800a150:	42a0      	cmp	r0, r4
 800a152:	d0f8      	beq.n	800a146 <sbrk_aligned+0x22>
 800a154:	1a21      	subs	r1, r4, r0
 800a156:	4628      	mov	r0, r5
 800a158:	f000 fe96 	bl	800ae88 <_sbrk_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	d1f2      	bne.n	800a146 <sbrk_aligned+0x22>
 800a160:	e7ef      	b.n	800a142 <sbrk_aligned+0x1e>
 800a162:	bf00      	nop
 800a164:	20001e84 	.word	0x20001e84

0800a168 <_malloc_r>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	1ccd      	adds	r5, r1, #3
 800a16e:	f025 0503 	bic.w	r5, r5, #3
 800a172:	3508      	adds	r5, #8
 800a174:	2d0c      	cmp	r5, #12
 800a176:	bf38      	it	cc
 800a178:	250c      	movcc	r5, #12
 800a17a:	2d00      	cmp	r5, #0
 800a17c:	4606      	mov	r6, r0
 800a17e:	db01      	blt.n	800a184 <_malloc_r+0x1c>
 800a180:	42a9      	cmp	r1, r5
 800a182:	d904      	bls.n	800a18e <_malloc_r+0x26>
 800a184:	230c      	movs	r3, #12
 800a186:	6033      	str	r3, [r6, #0]
 800a188:	2000      	movs	r0, #0
 800a18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a264 <_malloc_r+0xfc>
 800a192:	f000 f869 	bl	800a268 <__malloc_lock>
 800a196:	f8d8 3000 	ldr.w	r3, [r8]
 800a19a:	461c      	mov	r4, r3
 800a19c:	bb44      	cbnz	r4, 800a1f0 <_malloc_r+0x88>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff ffbf 	bl	800a124 <sbrk_aligned>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	d158      	bne.n	800a25e <_malloc_r+0xf6>
 800a1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a1b0:	4627      	mov	r7, r4
 800a1b2:	2f00      	cmp	r7, #0
 800a1b4:	d143      	bne.n	800a23e <_malloc_r+0xd6>
 800a1b6:	2c00      	cmp	r4, #0
 800a1b8:	d04b      	beq.n	800a252 <_malloc_r+0xea>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4630      	mov	r0, r6
 800a1c0:	eb04 0903 	add.w	r9, r4, r3
 800a1c4:	f000 fe60 	bl	800ae88 <_sbrk_r>
 800a1c8:	4581      	cmp	r9, r0
 800a1ca:	d142      	bne.n	800a252 <_malloc_r+0xea>
 800a1cc:	6821      	ldr	r1, [r4, #0]
 800a1ce:	1a6d      	subs	r5, r5, r1
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff ffa6 	bl	800a124 <sbrk_aligned>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d03a      	beq.n	800a252 <_malloc_r+0xea>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	442b      	add	r3, r5
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	bb62      	cbnz	r2, 800a244 <_malloc_r+0xdc>
 800a1ea:	f8c8 7000 	str.w	r7, [r8]
 800a1ee:	e00f      	b.n	800a210 <_malloc_r+0xa8>
 800a1f0:	6822      	ldr	r2, [r4, #0]
 800a1f2:	1b52      	subs	r2, r2, r5
 800a1f4:	d420      	bmi.n	800a238 <_malloc_r+0xd0>
 800a1f6:	2a0b      	cmp	r2, #11
 800a1f8:	d917      	bls.n	800a22a <_malloc_r+0xc2>
 800a1fa:	1961      	adds	r1, r4, r5
 800a1fc:	42a3      	cmp	r3, r4
 800a1fe:	6025      	str	r5, [r4, #0]
 800a200:	bf18      	it	ne
 800a202:	6059      	strne	r1, [r3, #4]
 800a204:	6863      	ldr	r3, [r4, #4]
 800a206:	bf08      	it	eq
 800a208:	f8c8 1000 	streq.w	r1, [r8]
 800a20c:	5162      	str	r2, [r4, r5]
 800a20e:	604b      	str	r3, [r1, #4]
 800a210:	4630      	mov	r0, r6
 800a212:	f000 f82f 	bl	800a274 <__malloc_unlock>
 800a216:	f104 000b 	add.w	r0, r4, #11
 800a21a:	1d23      	adds	r3, r4, #4
 800a21c:	f020 0007 	bic.w	r0, r0, #7
 800a220:	1ac2      	subs	r2, r0, r3
 800a222:	bf1c      	itt	ne
 800a224:	1a1b      	subne	r3, r3, r0
 800a226:	50a3      	strne	r3, [r4, r2]
 800a228:	e7af      	b.n	800a18a <_malloc_r+0x22>
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	bf0c      	ite	eq
 800a230:	f8c8 2000 	streq.w	r2, [r8]
 800a234:	605a      	strne	r2, [r3, #4]
 800a236:	e7eb      	b.n	800a210 <_malloc_r+0xa8>
 800a238:	4623      	mov	r3, r4
 800a23a:	6864      	ldr	r4, [r4, #4]
 800a23c:	e7ae      	b.n	800a19c <_malloc_r+0x34>
 800a23e:	463c      	mov	r4, r7
 800a240:	687f      	ldr	r7, [r7, #4]
 800a242:	e7b6      	b.n	800a1b2 <_malloc_r+0x4a>
 800a244:	461a      	mov	r2, r3
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d1fb      	bne.n	800a244 <_malloc_r+0xdc>
 800a24c:	2300      	movs	r3, #0
 800a24e:	6053      	str	r3, [r2, #4]
 800a250:	e7de      	b.n	800a210 <_malloc_r+0xa8>
 800a252:	230c      	movs	r3, #12
 800a254:	6033      	str	r3, [r6, #0]
 800a256:	4630      	mov	r0, r6
 800a258:	f000 f80c 	bl	800a274 <__malloc_unlock>
 800a25c:	e794      	b.n	800a188 <_malloc_r+0x20>
 800a25e:	6005      	str	r5, [r0, #0]
 800a260:	e7d6      	b.n	800a210 <_malloc_r+0xa8>
 800a262:	bf00      	nop
 800a264:	20001e88 	.word	0x20001e88

0800a268 <__malloc_lock>:
 800a268:	4801      	ldr	r0, [pc, #4]	@ (800a270 <__malloc_lock+0x8>)
 800a26a:	f7ff b8aa 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 800a26e:	bf00      	nop
 800a270:	20001e80 	.word	0x20001e80

0800a274 <__malloc_unlock>:
 800a274:	4801      	ldr	r0, [pc, #4]	@ (800a27c <__malloc_unlock+0x8>)
 800a276:	f7ff b8a5 	b.w	80093c4 <__retarget_lock_release_recursive>
 800a27a:	bf00      	nop
 800a27c:	20001e80 	.word	0x20001e80

0800a280 <_Balloc>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	69c6      	ldr	r6, [r0, #28]
 800a284:	4604      	mov	r4, r0
 800a286:	460d      	mov	r5, r1
 800a288:	b976      	cbnz	r6, 800a2a8 <_Balloc+0x28>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7ff ff42 	bl	800a114 <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	61e0      	str	r0, [r4, #28]
 800a294:	b920      	cbnz	r0, 800a2a0 <_Balloc+0x20>
 800a296:	4b18      	ldr	r3, [pc, #96]	@ (800a2f8 <_Balloc+0x78>)
 800a298:	4818      	ldr	r0, [pc, #96]	@ (800a2fc <_Balloc+0x7c>)
 800a29a:	216b      	movs	r1, #107	@ 0x6b
 800a29c:	f000 fe04 	bl	800aea8 <__assert_func>
 800a2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a4:	6006      	str	r6, [r0, #0]
 800a2a6:	60c6      	str	r6, [r0, #12]
 800a2a8:	69e6      	ldr	r6, [r4, #28]
 800a2aa:	68f3      	ldr	r3, [r6, #12]
 800a2ac:	b183      	cbz	r3, 800a2d0 <_Balloc+0x50>
 800a2ae:	69e3      	ldr	r3, [r4, #28]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2b6:	b9b8      	cbnz	r0, 800a2e8 <_Balloc+0x68>
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a2be:	1d72      	adds	r2, r6, #5
 800a2c0:	0092      	lsls	r2, r2, #2
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 fe0e 	bl	800aee4 <_calloc_r>
 800a2c8:	b160      	cbz	r0, 800a2e4 <_Balloc+0x64>
 800a2ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ce:	e00e      	b.n	800a2ee <_Balloc+0x6e>
 800a2d0:	2221      	movs	r2, #33	@ 0x21
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fe05 	bl	800aee4 <_calloc_r>
 800a2da:	69e3      	ldr	r3, [r4, #28]
 800a2dc:	60f0      	str	r0, [r6, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e4      	bne.n	800a2ae <_Balloc+0x2e>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	6802      	ldr	r2, [r0, #0]
 800a2ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2f4:	e7f7      	b.n	800a2e6 <_Balloc+0x66>
 800a2f6:	bf00      	nop
 800a2f8:	0800b29d 	.word	0x0800b29d
 800a2fc:	0800b31d 	.word	0x0800b31d

0800a300 <_Bfree>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	69c6      	ldr	r6, [r0, #28]
 800a304:	4605      	mov	r5, r0
 800a306:	460c      	mov	r4, r1
 800a308:	b976      	cbnz	r6, 800a328 <_Bfree+0x28>
 800a30a:	2010      	movs	r0, #16
 800a30c:	f7ff ff02 	bl	800a114 <malloc>
 800a310:	4602      	mov	r2, r0
 800a312:	61e8      	str	r0, [r5, #28]
 800a314:	b920      	cbnz	r0, 800a320 <_Bfree+0x20>
 800a316:	4b09      	ldr	r3, [pc, #36]	@ (800a33c <_Bfree+0x3c>)
 800a318:	4809      	ldr	r0, [pc, #36]	@ (800a340 <_Bfree+0x40>)
 800a31a:	218f      	movs	r1, #143	@ 0x8f
 800a31c:	f000 fdc4 	bl	800aea8 <__assert_func>
 800a320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a324:	6006      	str	r6, [r0, #0]
 800a326:	60c6      	str	r6, [r0, #12]
 800a328:	b13c      	cbz	r4, 800a33a <_Bfree+0x3a>
 800a32a:	69eb      	ldr	r3, [r5, #28]
 800a32c:	6862      	ldr	r2, [r4, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a334:	6021      	str	r1, [r4, #0]
 800a336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	0800b29d 	.word	0x0800b29d
 800a340:	0800b31d 	.word	0x0800b31d

0800a344 <__multadd>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	690d      	ldr	r5, [r1, #16]
 800a34a:	4607      	mov	r7, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	461e      	mov	r6, r3
 800a350:	f101 0c14 	add.w	ip, r1, #20
 800a354:	2000      	movs	r0, #0
 800a356:	f8dc 3000 	ldr.w	r3, [ip]
 800a35a:	b299      	uxth	r1, r3
 800a35c:	fb02 6101 	mla	r1, r2, r1, r6
 800a360:	0c1e      	lsrs	r6, r3, #16
 800a362:	0c0b      	lsrs	r3, r1, #16
 800a364:	fb02 3306 	mla	r3, r2, r6, r3
 800a368:	b289      	uxth	r1, r1
 800a36a:	3001      	adds	r0, #1
 800a36c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a370:	4285      	cmp	r5, r0
 800a372:	f84c 1b04 	str.w	r1, [ip], #4
 800a376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a37a:	dcec      	bgt.n	800a356 <__multadd+0x12>
 800a37c:	b30e      	cbz	r6, 800a3c2 <__multadd+0x7e>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc19      	bgt.n	800a3b8 <__multadd+0x74>
 800a384:	6861      	ldr	r1, [r4, #4]
 800a386:	4638      	mov	r0, r7
 800a388:	3101      	adds	r1, #1
 800a38a:	f7ff ff79 	bl	800a280 <_Balloc>
 800a38e:	4680      	mov	r8, r0
 800a390:	b928      	cbnz	r0, 800a39e <__multadd+0x5a>
 800a392:	4602      	mov	r2, r0
 800a394:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <__multadd+0x84>)
 800a396:	480d      	ldr	r0, [pc, #52]	@ (800a3cc <__multadd+0x88>)
 800a398:	21ba      	movs	r1, #186	@ 0xba
 800a39a:	f000 fd85 	bl	800aea8 <__assert_func>
 800a39e:	6922      	ldr	r2, [r4, #16]
 800a3a0:	3202      	adds	r2, #2
 800a3a2:	f104 010c 	add.w	r1, r4, #12
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	300c      	adds	r0, #12
 800a3aa:	f7ff f80c 	bl	80093c6 <memcpy>
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f7ff ffa5 	bl	800a300 <_Bfree>
 800a3b6:	4644      	mov	r4, r8
 800a3b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3bc:	3501      	adds	r5, #1
 800a3be:	615e      	str	r6, [r3, #20]
 800a3c0:	6125      	str	r5, [r4, #16]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	0800b30c 	.word	0x0800b30c
 800a3cc:	0800b31d 	.word	0x0800b31d

0800a3d0 <__hi0bits>:
 800a3d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	bf36      	itet	cc
 800a3d8:	0403      	lslcc	r3, r0, #16
 800a3da:	2000      	movcs	r0, #0
 800a3dc:	2010      	movcc	r0, #16
 800a3de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3e2:	bf3c      	itt	cc
 800a3e4:	021b      	lslcc	r3, r3, #8
 800a3e6:	3008      	addcc	r0, #8
 800a3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ec:	bf3c      	itt	cc
 800a3ee:	011b      	lslcc	r3, r3, #4
 800a3f0:	3004      	addcc	r0, #4
 800a3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f6:	bf3c      	itt	cc
 800a3f8:	009b      	lslcc	r3, r3, #2
 800a3fa:	3002      	addcc	r0, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	db05      	blt.n	800a40c <__hi0bits+0x3c>
 800a400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a404:	f100 0001 	add.w	r0, r0, #1
 800a408:	bf08      	it	eq
 800a40a:	2020      	moveq	r0, #32
 800a40c:	4770      	bx	lr

0800a40e <__lo0bits>:
 800a40e:	6803      	ldr	r3, [r0, #0]
 800a410:	4602      	mov	r2, r0
 800a412:	f013 0007 	ands.w	r0, r3, #7
 800a416:	d00b      	beq.n	800a430 <__lo0bits+0x22>
 800a418:	07d9      	lsls	r1, r3, #31
 800a41a:	d421      	bmi.n	800a460 <__lo0bits+0x52>
 800a41c:	0798      	lsls	r0, r3, #30
 800a41e:	bf49      	itett	mi
 800a420:	085b      	lsrmi	r3, r3, #1
 800a422:	089b      	lsrpl	r3, r3, #2
 800a424:	2001      	movmi	r0, #1
 800a426:	6013      	strmi	r3, [r2, #0]
 800a428:	bf5c      	itt	pl
 800a42a:	6013      	strpl	r3, [r2, #0]
 800a42c:	2002      	movpl	r0, #2
 800a42e:	4770      	bx	lr
 800a430:	b299      	uxth	r1, r3
 800a432:	b909      	cbnz	r1, 800a438 <__lo0bits+0x2a>
 800a434:	0c1b      	lsrs	r3, r3, #16
 800a436:	2010      	movs	r0, #16
 800a438:	b2d9      	uxtb	r1, r3
 800a43a:	b909      	cbnz	r1, 800a440 <__lo0bits+0x32>
 800a43c:	3008      	adds	r0, #8
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	0719      	lsls	r1, r3, #28
 800a442:	bf04      	itt	eq
 800a444:	091b      	lsreq	r3, r3, #4
 800a446:	3004      	addeq	r0, #4
 800a448:	0799      	lsls	r1, r3, #30
 800a44a:	bf04      	itt	eq
 800a44c:	089b      	lsreq	r3, r3, #2
 800a44e:	3002      	addeq	r0, #2
 800a450:	07d9      	lsls	r1, r3, #31
 800a452:	d403      	bmi.n	800a45c <__lo0bits+0x4e>
 800a454:	085b      	lsrs	r3, r3, #1
 800a456:	f100 0001 	add.w	r0, r0, #1
 800a45a:	d003      	beq.n	800a464 <__lo0bits+0x56>
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4770      	bx	lr
 800a460:	2000      	movs	r0, #0
 800a462:	4770      	bx	lr
 800a464:	2020      	movs	r0, #32
 800a466:	4770      	bx	lr

0800a468 <__i2b>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	2101      	movs	r1, #1
 800a46e:	f7ff ff07 	bl	800a280 <_Balloc>
 800a472:	4602      	mov	r2, r0
 800a474:	b928      	cbnz	r0, 800a482 <__i2b+0x1a>
 800a476:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <__i2b+0x24>)
 800a478:	4805      	ldr	r0, [pc, #20]	@ (800a490 <__i2b+0x28>)
 800a47a:	f240 1145 	movw	r1, #325	@ 0x145
 800a47e:	f000 fd13 	bl	800aea8 <__assert_func>
 800a482:	2301      	movs	r3, #1
 800a484:	6144      	str	r4, [r0, #20]
 800a486:	6103      	str	r3, [r0, #16]
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	0800b30c 	.word	0x0800b30c
 800a490:	0800b31d 	.word	0x0800b31d

0800a494 <__multiply>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4614      	mov	r4, r2
 800a49a:	690a      	ldr	r2, [r1, #16]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	bfa8      	it	ge
 800a4a2:	4623      	movge	r3, r4
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	bfa4      	itt	ge
 800a4a8:	460c      	movge	r4, r1
 800a4aa:	461f      	movge	r7, r3
 800a4ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	6861      	ldr	r1, [r4, #4]
 800a4b8:	eb0a 0609 	add.w	r6, sl, r9
 800a4bc:	42b3      	cmp	r3, r6
 800a4be:	b085      	sub	sp, #20
 800a4c0:	bfb8      	it	lt
 800a4c2:	3101      	addlt	r1, #1
 800a4c4:	f7ff fedc 	bl	800a280 <_Balloc>
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__multiply+0x44>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b44      	ldr	r3, [pc, #272]	@ (800a5e0 <__multiply+0x14c>)
 800a4ce:	4845      	ldr	r0, [pc, #276]	@ (800a5e4 <__multiply+0x150>)
 800a4d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4d4:	f000 fce8 	bl	800aea8 <__assert_func>
 800a4d8:	f100 0514 	add.w	r5, r0, #20
 800a4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4543      	cmp	r3, r8
 800a4e6:	d321      	bcc.n	800a52c <__multiply+0x98>
 800a4e8:	f107 0114 	add.w	r1, r7, #20
 800a4ec:	f104 0214 	add.w	r2, r4, #20
 800a4f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4f8:	9302      	str	r3, [sp, #8]
 800a4fa:	1b13      	subs	r3, r2, r4
 800a4fc:	3b15      	subs	r3, #21
 800a4fe:	f023 0303 	bic.w	r3, r3, #3
 800a502:	3304      	adds	r3, #4
 800a504:	f104 0715 	add.w	r7, r4, #21
 800a508:	42ba      	cmp	r2, r7
 800a50a:	bf38      	it	cc
 800a50c:	2304      	movcc	r3, #4
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	9b02      	ldr	r3, [sp, #8]
 800a512:	9103      	str	r1, [sp, #12]
 800a514:	428b      	cmp	r3, r1
 800a516:	d80c      	bhi.n	800a532 <__multiply+0x9e>
 800a518:	2e00      	cmp	r6, #0
 800a51a:	dd03      	ble.n	800a524 <__multiply+0x90>
 800a51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a520:	2b00      	cmp	r3, #0
 800a522:	d05b      	beq.n	800a5dc <__multiply+0x148>
 800a524:	6106      	str	r6, [r0, #16]
 800a526:	b005      	add	sp, #20
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	f843 2b04 	str.w	r2, [r3], #4
 800a530:	e7d8      	b.n	800a4e4 <__multiply+0x50>
 800a532:	f8b1 a000 	ldrh.w	sl, [r1]
 800a536:	f1ba 0f00 	cmp.w	sl, #0
 800a53a:	d024      	beq.n	800a586 <__multiply+0xf2>
 800a53c:	f104 0e14 	add.w	lr, r4, #20
 800a540:	46a9      	mov	r9, r5
 800a542:	f04f 0c00 	mov.w	ip, #0
 800a546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a54a:	f8d9 3000 	ldr.w	r3, [r9]
 800a54e:	fa1f fb87 	uxth.w	fp, r7
 800a552:	b29b      	uxth	r3, r3
 800a554:	fb0a 330b 	mla	r3, sl, fp, r3
 800a558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a55c:	f8d9 7000 	ldr.w	r7, [r9]
 800a560:	4463      	add	r3, ip
 800a562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a566:	fb0a c70b 	mla	r7, sl, fp, ip
 800a56a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a574:	4572      	cmp	r2, lr
 800a576:	f849 3b04 	str.w	r3, [r9], #4
 800a57a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a57e:	d8e2      	bhi.n	800a546 <__multiply+0xb2>
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	f845 c003 	str.w	ip, [r5, r3]
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a58c:	3104      	adds	r1, #4
 800a58e:	f1b9 0f00 	cmp.w	r9, #0
 800a592:	d021      	beq.n	800a5d8 <__multiply+0x144>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	f104 0c14 	add.w	ip, r4, #20
 800a59a:	46ae      	mov	lr, r5
 800a59c:	f04f 0a00 	mov.w	sl, #0
 800a5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5a8:	fb09 770b 	mla	r7, r9, fp, r7
 800a5ac:	4457      	add	r7, sl
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5b4:	f84e 3b04 	str.w	r3, [lr], #4
 800a5b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5c0:	f8be 3000 	ldrh.w	r3, [lr]
 800a5c4:	fb09 330a 	mla	r3, r9, sl, r3
 800a5c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5cc:	4562      	cmp	r2, ip
 800a5ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5d2:	d8e5      	bhi.n	800a5a0 <__multiply+0x10c>
 800a5d4:	9f01      	ldr	r7, [sp, #4]
 800a5d6:	51eb      	str	r3, [r5, r7]
 800a5d8:	3504      	adds	r5, #4
 800a5da:	e799      	b.n	800a510 <__multiply+0x7c>
 800a5dc:	3e01      	subs	r6, #1
 800a5de:	e79b      	b.n	800a518 <__multiply+0x84>
 800a5e0:	0800b30c 	.word	0x0800b30c
 800a5e4:	0800b31d 	.word	0x0800b31d

0800a5e8 <__pow5mult>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	f012 0203 	ands.w	r2, r2, #3
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	460e      	mov	r6, r1
 800a5f6:	d007      	beq.n	800a608 <__pow5mult+0x20>
 800a5f8:	4c25      	ldr	r4, [pc, #148]	@ (800a690 <__pow5mult+0xa8>)
 800a5fa:	3a01      	subs	r2, #1
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a602:	f7ff fe9f 	bl	800a344 <__multadd>
 800a606:	4606      	mov	r6, r0
 800a608:	10ad      	asrs	r5, r5, #2
 800a60a:	d03d      	beq.n	800a688 <__pow5mult+0xa0>
 800a60c:	69fc      	ldr	r4, [r7, #28]
 800a60e:	b97c      	cbnz	r4, 800a630 <__pow5mult+0x48>
 800a610:	2010      	movs	r0, #16
 800a612:	f7ff fd7f 	bl	800a114 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	61f8      	str	r0, [r7, #28]
 800a61a:	b928      	cbnz	r0, 800a628 <__pow5mult+0x40>
 800a61c:	4b1d      	ldr	r3, [pc, #116]	@ (800a694 <__pow5mult+0xac>)
 800a61e:	481e      	ldr	r0, [pc, #120]	@ (800a698 <__pow5mult+0xb0>)
 800a620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a624:	f000 fc40 	bl	800aea8 <__assert_func>
 800a628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	60c4      	str	r4, [r0, #12]
 800a630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a638:	b94c      	cbnz	r4, 800a64e <__pow5mult+0x66>
 800a63a:	f240 2171 	movw	r1, #625	@ 0x271
 800a63e:	4638      	mov	r0, r7
 800a640:	f7ff ff12 	bl	800a468 <__i2b>
 800a644:	2300      	movs	r3, #0
 800a646:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64a:	4604      	mov	r4, r0
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	f04f 0900 	mov.w	r9, #0
 800a652:	07eb      	lsls	r3, r5, #31
 800a654:	d50a      	bpl.n	800a66c <__pow5mult+0x84>
 800a656:	4631      	mov	r1, r6
 800a658:	4622      	mov	r2, r4
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7ff ff1a 	bl	800a494 <__multiply>
 800a660:	4631      	mov	r1, r6
 800a662:	4680      	mov	r8, r0
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff fe4b 	bl	800a300 <_Bfree>
 800a66a:	4646      	mov	r6, r8
 800a66c:	106d      	asrs	r5, r5, #1
 800a66e:	d00b      	beq.n	800a688 <__pow5mult+0xa0>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	b938      	cbnz	r0, 800a684 <__pow5mult+0x9c>
 800a674:	4622      	mov	r2, r4
 800a676:	4621      	mov	r1, r4
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff ff0b 	bl	800a494 <__multiply>
 800a67e:	6020      	str	r0, [r4, #0]
 800a680:	f8c0 9000 	str.w	r9, [r0]
 800a684:	4604      	mov	r4, r0
 800a686:	e7e4      	b.n	800a652 <__pow5mult+0x6a>
 800a688:	4630      	mov	r0, r6
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	bf00      	nop
 800a690:	0800b378 	.word	0x0800b378
 800a694:	0800b29d 	.word	0x0800b29d
 800a698:	0800b31d 	.word	0x0800b31d

0800a69c <__lshift>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6849      	ldr	r1, [r1, #4]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4691      	mov	r9, r2
 800a6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b4:	f108 0601 	add.w	r6, r8, #1
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	db0b      	blt.n	800a6d4 <__lshift+0x38>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff fddf 	bl	800a280 <_Balloc>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b948      	cbnz	r0, 800a6da <__lshift+0x3e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b28      	ldr	r3, [pc, #160]	@ (800a76c <__lshift+0xd0>)
 800a6ca:	4829      	ldr	r0, [pc, #164]	@ (800a770 <__lshift+0xd4>)
 800a6cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6d0:	f000 fbea 	bl	800aea8 <__assert_func>
 800a6d4:	3101      	adds	r1, #1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__lshift+0x1c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f100 0114 	add.w	r1, r0, #20
 800a6e0:	f100 0210 	add.w	r2, r0, #16
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	4553      	cmp	r3, sl
 800a6e8:	db33      	blt.n	800a752 <__lshift+0xb6>
 800a6ea:	6920      	ldr	r0, [r4, #16]
 800a6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	f019 091f 	ands.w	r9, r9, #31
 800a6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a700:	d02b      	beq.n	800a75a <__lshift+0xbe>
 800a702:	f1c9 0e20 	rsb	lr, r9, #32
 800a706:	468a      	mov	sl, r1
 800a708:	2200      	movs	r2, #0
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	fa00 f009 	lsl.w	r0, r0, r9
 800a710:	4310      	orrs	r0, r2
 800a712:	f84a 0b04 	str.w	r0, [sl], #4
 800a716:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71a:	459c      	cmp	ip, r3
 800a71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a720:	d8f3      	bhi.n	800a70a <__lshift+0x6e>
 800a722:	ebac 0304 	sub.w	r3, ip, r4
 800a726:	3b15      	subs	r3, #21
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	3304      	adds	r3, #4
 800a72e:	f104 0015 	add.w	r0, r4, #21
 800a732:	4584      	cmp	ip, r0
 800a734:	bf38      	it	cc
 800a736:	2304      	movcc	r3, #4
 800a738:	50ca      	str	r2, [r1, r3]
 800a73a:	b10a      	cbz	r2, 800a740 <__lshift+0xa4>
 800a73c:	f108 0602 	add.w	r6, r8, #2
 800a740:	3e01      	subs	r6, #1
 800a742:	4638      	mov	r0, r7
 800a744:	612e      	str	r6, [r5, #16]
 800a746:	4621      	mov	r1, r4
 800a748:	f7ff fdda 	bl	800a300 <_Bfree>
 800a74c:	4628      	mov	r0, r5
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	f842 0f04 	str.w	r0, [r2, #4]!
 800a756:	3301      	adds	r3, #1
 800a758:	e7c5      	b.n	800a6e6 <__lshift+0x4a>
 800a75a:	3904      	subs	r1, #4
 800a75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a760:	f841 2f04 	str.w	r2, [r1, #4]!
 800a764:	459c      	cmp	ip, r3
 800a766:	d8f9      	bhi.n	800a75c <__lshift+0xc0>
 800a768:	e7ea      	b.n	800a740 <__lshift+0xa4>
 800a76a:	bf00      	nop
 800a76c:	0800b30c 	.word	0x0800b30c
 800a770:	0800b31d 	.word	0x0800b31d

0800a774 <__mcmp>:
 800a774:	690a      	ldr	r2, [r1, #16]
 800a776:	4603      	mov	r3, r0
 800a778:	6900      	ldr	r0, [r0, #16]
 800a77a:	1a80      	subs	r0, r0, r2
 800a77c:	b530      	push	{r4, r5, lr}
 800a77e:	d10e      	bne.n	800a79e <__mcmp+0x2a>
 800a780:	3314      	adds	r3, #20
 800a782:	3114      	adds	r1, #20
 800a784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a78c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a794:	4295      	cmp	r5, r2
 800a796:	d003      	beq.n	800a7a0 <__mcmp+0x2c>
 800a798:	d205      	bcs.n	800a7a6 <__mcmp+0x32>
 800a79a:	f04f 30ff 	mov.w	r0, #4294967295
 800a79e:	bd30      	pop	{r4, r5, pc}
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	d3f3      	bcc.n	800a78c <__mcmp+0x18>
 800a7a4:	e7fb      	b.n	800a79e <__mcmp+0x2a>
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	e7f9      	b.n	800a79e <__mcmp+0x2a>
	...

0800a7ac <__mdiff>:
 800a7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	4689      	mov	r9, r1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	f7ff ffdb 	bl	800a774 <__mcmp>
 800a7be:	1e05      	subs	r5, r0, #0
 800a7c0:	d112      	bne.n	800a7e8 <__mdiff+0x3c>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fd5b 	bl	800a280 <_Balloc>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	b928      	cbnz	r0, 800a7da <__mdiff+0x2e>
 800a7ce:	4b3f      	ldr	r3, [pc, #252]	@ (800a8cc <__mdiff+0x120>)
 800a7d0:	f240 2137 	movw	r1, #567	@ 0x237
 800a7d4:	483e      	ldr	r0, [pc, #248]	@ (800a8d0 <__mdiff+0x124>)
 800a7d6:	f000 fb67 	bl	800aea8 <__assert_func>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	b003      	add	sp, #12
 800a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e8:	bfbc      	itt	lt
 800a7ea:	464b      	movlt	r3, r9
 800a7ec:	46a1      	movlt	r9, r4
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7f4:	bfba      	itte	lt
 800a7f6:	461c      	movlt	r4, r3
 800a7f8:	2501      	movlt	r5, #1
 800a7fa:	2500      	movge	r5, #0
 800a7fc:	f7ff fd40 	bl	800a280 <_Balloc>
 800a800:	4602      	mov	r2, r0
 800a802:	b918      	cbnz	r0, 800a80c <__mdiff+0x60>
 800a804:	4b31      	ldr	r3, [pc, #196]	@ (800a8cc <__mdiff+0x120>)
 800a806:	f240 2145 	movw	r1, #581	@ 0x245
 800a80a:	e7e3      	b.n	800a7d4 <__mdiff+0x28>
 800a80c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a810:	6926      	ldr	r6, [r4, #16]
 800a812:	60c5      	str	r5, [r0, #12]
 800a814:	f109 0310 	add.w	r3, r9, #16
 800a818:	f109 0514 	add.w	r5, r9, #20
 800a81c:	f104 0e14 	add.w	lr, r4, #20
 800a820:	f100 0b14 	add.w	fp, r0, #20
 800a824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	46d9      	mov	r9, fp
 800a830:	f04f 0c00 	mov.w	ip, #0
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a83a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	fa1f f38a 	uxth.w	r3, sl
 800a844:	4619      	mov	r1, r3
 800a846:	b283      	uxth	r3, r0
 800a848:	1acb      	subs	r3, r1, r3
 800a84a:	0c00      	lsrs	r0, r0, #16
 800a84c:	4463      	add	r3, ip
 800a84e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a856:	b29b      	uxth	r3, r3
 800a858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a85c:	4576      	cmp	r6, lr
 800a85e:	f849 3b04 	str.w	r3, [r9], #4
 800a862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a866:	d8e5      	bhi.n	800a834 <__mdiff+0x88>
 800a868:	1b33      	subs	r3, r6, r4
 800a86a:	3b15      	subs	r3, #21
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	3415      	adds	r4, #21
 800a872:	3304      	adds	r3, #4
 800a874:	42a6      	cmp	r6, r4
 800a876:	bf38      	it	cc
 800a878:	2304      	movcc	r3, #4
 800a87a:	441d      	add	r5, r3
 800a87c:	445b      	add	r3, fp
 800a87e:	461e      	mov	r6, r3
 800a880:	462c      	mov	r4, r5
 800a882:	4544      	cmp	r4, r8
 800a884:	d30e      	bcc.n	800a8a4 <__mdiff+0xf8>
 800a886:	f108 0103 	add.w	r1, r8, #3
 800a88a:	1b49      	subs	r1, r1, r5
 800a88c:	f021 0103 	bic.w	r1, r1, #3
 800a890:	3d03      	subs	r5, #3
 800a892:	45a8      	cmp	r8, r5
 800a894:	bf38      	it	cc
 800a896:	2100      	movcc	r1, #0
 800a898:	440b      	add	r3, r1
 800a89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a89e:	b191      	cbz	r1, 800a8c6 <__mdiff+0x11a>
 800a8a0:	6117      	str	r7, [r2, #16]
 800a8a2:	e79d      	b.n	800a7e0 <__mdiff+0x34>
 800a8a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8a8:	46e6      	mov	lr, ip
 800a8aa:	0c08      	lsrs	r0, r1, #16
 800a8ac:	fa1c fc81 	uxtah	ip, ip, r1
 800a8b0:	4471      	add	r1, lr
 800a8b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8b6:	b289      	uxth	r1, r1
 800a8b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8bc:	f846 1b04 	str.w	r1, [r6], #4
 800a8c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8c4:	e7dd      	b.n	800a882 <__mdiff+0xd6>
 800a8c6:	3f01      	subs	r7, #1
 800a8c8:	e7e7      	b.n	800a89a <__mdiff+0xee>
 800a8ca:	bf00      	nop
 800a8cc:	0800b30c 	.word	0x0800b30c
 800a8d0:	0800b31d 	.word	0x0800b31d

0800a8d4 <__d2b>:
 800a8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	460f      	mov	r7, r1
 800a8da:	2101      	movs	r1, #1
 800a8dc:	ec59 8b10 	vmov	r8, r9, d0
 800a8e0:	4616      	mov	r6, r2
 800a8e2:	f7ff fccd 	bl	800a280 <_Balloc>
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	b930      	cbnz	r0, 800a8f8 <__d2b+0x24>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4b23      	ldr	r3, [pc, #140]	@ (800a97c <__d2b+0xa8>)
 800a8ee:	4824      	ldr	r0, [pc, #144]	@ (800a980 <__d2b+0xac>)
 800a8f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8f4:	f000 fad8 	bl	800aea8 <__assert_func>
 800a8f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a900:	b10d      	cbz	r5, 800a906 <__d2b+0x32>
 800a902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	f1b8 0300 	subs.w	r3, r8, #0
 800a90c:	d023      	beq.n	800a956 <__d2b+0x82>
 800a90e:	4668      	mov	r0, sp
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	f7ff fd7c 	bl	800a40e <__lo0bits>
 800a916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a91a:	b1d0      	cbz	r0, 800a952 <__d2b+0x7e>
 800a91c:	f1c0 0320 	rsb	r3, r0, #32
 800a920:	fa02 f303 	lsl.w	r3, r2, r3
 800a924:	430b      	orrs	r3, r1
 800a926:	40c2      	lsrs	r2, r0
 800a928:	6163      	str	r3, [r4, #20]
 800a92a:	9201      	str	r2, [sp, #4]
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	61a3      	str	r3, [r4, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	bf0c      	ite	eq
 800a934:	2201      	moveq	r2, #1
 800a936:	2202      	movne	r2, #2
 800a938:	6122      	str	r2, [r4, #16]
 800a93a:	b1a5      	cbz	r5, 800a966 <__d2b+0x92>
 800a93c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a940:	4405      	add	r5, r0
 800a942:	603d      	str	r5, [r7, #0]
 800a944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a948:	6030      	str	r0, [r6, #0]
 800a94a:	4620      	mov	r0, r4
 800a94c:	b003      	add	sp, #12
 800a94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a952:	6161      	str	r1, [r4, #20]
 800a954:	e7ea      	b.n	800a92c <__d2b+0x58>
 800a956:	a801      	add	r0, sp, #4
 800a958:	f7ff fd59 	bl	800a40e <__lo0bits>
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	6163      	str	r3, [r4, #20]
 800a960:	3020      	adds	r0, #32
 800a962:	2201      	movs	r2, #1
 800a964:	e7e8      	b.n	800a938 <__d2b+0x64>
 800a966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a96a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a96e:	6038      	str	r0, [r7, #0]
 800a970:	6918      	ldr	r0, [r3, #16]
 800a972:	f7ff fd2d 	bl	800a3d0 <__hi0bits>
 800a976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a97a:	e7e5      	b.n	800a948 <__d2b+0x74>
 800a97c:	0800b30c 	.word	0x0800b30c
 800a980:	0800b31d 	.word	0x0800b31d

0800a984 <__sfputc_r>:
 800a984:	6893      	ldr	r3, [r2, #8]
 800a986:	3b01      	subs	r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	b410      	push	{r4}
 800a98c:	6093      	str	r3, [r2, #8]
 800a98e:	da08      	bge.n	800a9a2 <__sfputc_r+0x1e>
 800a990:	6994      	ldr	r4, [r2, #24]
 800a992:	42a3      	cmp	r3, r4
 800a994:	db01      	blt.n	800a99a <__sfputc_r+0x16>
 800a996:	290a      	cmp	r1, #10
 800a998:	d103      	bne.n	800a9a2 <__sfputc_r+0x1e>
 800a99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a99e:	f000 b9df 	b.w	800ad60 <__swbuf_r>
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	1c58      	adds	r0, r3, #1
 800a9a6:	6010      	str	r0, [r2, #0]
 800a9a8:	7019      	strb	r1, [r3, #0]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <__sfputs_r>:
 800a9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	18d5      	adds	r5, r2, r3
 800a9bc:	42ac      	cmp	r4, r5
 800a9be:	d101      	bne.n	800a9c4 <__sfputs_r+0x12>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e007      	b.n	800a9d4 <__sfputs_r+0x22>
 800a9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c8:	463a      	mov	r2, r7
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff ffda 	bl	800a984 <__sfputc_r>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d1f3      	bne.n	800a9bc <__sfputs_r+0xa>
 800a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d8 <_vfiprintf_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	460d      	mov	r5, r1
 800a9de:	b09d      	sub	sp, #116	@ 0x74
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	4698      	mov	r8, r3
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	b118      	cbz	r0, 800a9f0 <_vfiprintf_r+0x18>
 800a9e8:	6a03      	ldr	r3, [r0, #32]
 800a9ea:	b90b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x18>
 800a9ec:	f7fe fbe0 	bl	80091b0 <__sinit>
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fe:	f7fe fce0 	bl	80093c2 <__retarget_lock_acquire_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	071b      	lsls	r3, r3, #28
 800aa06:	d501      	bpl.n	800aa0c <_vfiprintf_r+0x34>
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	b99b      	cbnz	r3, 800aa34 <_vfiprintf_r+0x5c>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f9e4 	bl	800addc <__swsetup_r>
 800aa14:	b170      	cbz	r0, 800aa34 <_vfiprintf_r+0x5c>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa18:	07dc      	lsls	r4, r3, #31
 800aa1a:	d504      	bpl.n	800aa26 <_vfiprintf_r+0x4e>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b01d      	add	sp, #116	@ 0x74
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	0598      	lsls	r0, r3, #22
 800aa2a:	d4f7      	bmi.n	800aa1c <_vfiprintf_r+0x44>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa2e:	f7fe fcc9 	bl	80093c4 <__retarget_lock_release_recursive>
 800aa32:	e7f3      	b.n	800aa1c <_vfiprintf_r+0x44>
 800aa34:	2300      	movs	r3, #0
 800aa36:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa38:	2320      	movs	r3, #32
 800aa3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa42:	2330      	movs	r3, #48	@ 0x30
 800aa44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abf4 <_vfiprintf_r+0x21c>
 800aa48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa4c:	f04f 0901 	mov.w	r9, #1
 800aa50:	4623      	mov	r3, r4
 800aa52:	469a      	mov	sl, r3
 800aa54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa58:	b10a      	cbz	r2, 800aa5e <_vfiprintf_r+0x86>
 800aa5a:	2a25      	cmp	r2, #37	@ 0x25
 800aa5c:	d1f9      	bne.n	800aa52 <_vfiprintf_r+0x7a>
 800aa5e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa62:	d00b      	beq.n	800aa7c <_vfiprintf_r+0xa4>
 800aa64:	465b      	mov	r3, fp
 800aa66:	4622      	mov	r2, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ffa1 	bl	800a9b2 <__sfputs_r>
 800aa70:	3001      	adds	r0, #1
 800aa72:	f000 80a7 	beq.w	800abc4 <_vfiprintf_r+0x1ec>
 800aa76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa78:	445a      	add	r2, fp
 800aa7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa7c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 809f 	beq.w	800abc4 <_vfiprintf_r+0x1ec>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa90:	f10a 0a01 	add.w	sl, sl, #1
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2205      	movs	r2, #5
 800aaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa6:	4853      	ldr	r0, [pc, #332]	@ (800abf4 <_vfiprintf_r+0x21c>)
 800aaa8:	f7f5 fbba 	bl	8000220 <memchr>
 800aaac:	9a04      	ldr	r2, [sp, #16]
 800aaae:	b9d8      	cbnz	r0, 800aae8 <_vfiprintf_r+0x110>
 800aab0:	06d1      	lsls	r1, r2, #27
 800aab2:	bf44      	itt	mi
 800aab4:	2320      	movmi	r3, #32
 800aab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaba:	0713      	lsls	r3, r2, #28
 800aabc:	bf44      	itt	mi
 800aabe:	232b      	movmi	r3, #43	@ 0x2b
 800aac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aac4:	f89a 3000 	ldrb.w	r3, [sl]
 800aac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaca:	d015      	beq.n	800aaf8 <_vfiprintf_r+0x120>
 800aacc:	9a07      	ldr	r2, [sp, #28]
 800aace:	4654      	mov	r4, sl
 800aad0:	2000      	movs	r0, #0
 800aad2:	f04f 0c0a 	mov.w	ip, #10
 800aad6:	4621      	mov	r1, r4
 800aad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aadc:	3b30      	subs	r3, #48	@ 0x30
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d94b      	bls.n	800ab7a <_vfiprintf_r+0x1a2>
 800aae2:	b1b0      	cbz	r0, 800ab12 <_vfiprintf_r+0x13a>
 800aae4:	9207      	str	r2, [sp, #28]
 800aae6:	e014      	b.n	800ab12 <_vfiprintf_r+0x13a>
 800aae8:	eba0 0308 	sub.w	r3, r0, r8
 800aaec:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	46a2      	mov	sl, r4
 800aaf6:	e7d2      	b.n	800aa9e <_vfiprintf_r+0xc6>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	1d19      	adds	r1, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9103      	str	r1, [sp, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfbb      	ittet	lt
 800ab04:	425b      	neglt	r3, r3
 800ab06:	f042 0202 	orrlt.w	r2, r2, #2
 800ab0a:	9307      	strge	r3, [sp, #28]
 800ab0c:	9307      	strlt	r3, [sp, #28]
 800ab0e:	bfb8      	it	lt
 800ab10:	9204      	strlt	r2, [sp, #16]
 800ab12:	7823      	ldrb	r3, [r4, #0]
 800ab14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab16:	d10a      	bne.n	800ab2e <_vfiprintf_r+0x156>
 800ab18:	7863      	ldrb	r3, [r4, #1]
 800ab1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab1c:	d132      	bne.n	800ab84 <_vfiprintf_r+0x1ac>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9203      	str	r2, [sp, #12]
 800ab26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab2a:	3402      	adds	r4, #2
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac04 <_vfiprintf_r+0x22c>
 800ab32:	7821      	ldrb	r1, [r4, #0]
 800ab34:	2203      	movs	r2, #3
 800ab36:	4650      	mov	r0, sl
 800ab38:	f7f5 fb72 	bl	8000220 <memchr>
 800ab3c:	b138      	cbz	r0, 800ab4e <_vfiprintf_r+0x176>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	eba0 000a 	sub.w	r0, r0, sl
 800ab44:	2240      	movs	r2, #64	@ 0x40
 800ab46:	4082      	lsls	r2, r0
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	4829      	ldr	r0, [pc, #164]	@ (800abf8 <_vfiprintf_r+0x220>)
 800ab54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab58:	2206      	movs	r2, #6
 800ab5a:	f7f5 fb61 	bl	8000220 <memchr>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d03f      	beq.n	800abe2 <_vfiprintf_r+0x20a>
 800ab62:	4b26      	ldr	r3, [pc, #152]	@ (800abfc <_vfiprintf_r+0x224>)
 800ab64:	bb1b      	cbnz	r3, 800abae <_vfiprintf_r+0x1d6>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	3308      	adds	r3, #8
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab74:	443b      	add	r3, r7
 800ab76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab78:	e76a      	b.n	800aa50 <_vfiprintf_r+0x78>
 800ab7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7a8      	b.n	800aad6 <_vfiprintf_r+0xfe>
 800ab84:	2300      	movs	r3, #0
 800ab86:	3401      	adds	r4, #1
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	4620      	mov	r0, r4
 800ab92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab96:	3a30      	subs	r2, #48	@ 0x30
 800ab98:	2a09      	cmp	r2, #9
 800ab9a:	d903      	bls.n	800aba4 <_vfiprintf_r+0x1cc>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c6      	beq.n	800ab2e <_vfiprintf_r+0x156>
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	e7c4      	b.n	800ab2e <_vfiprintf_r+0x156>
 800aba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba8:	4604      	mov	r4, r0
 800abaa:	2301      	movs	r3, #1
 800abac:	e7f0      	b.n	800ab90 <_vfiprintf_r+0x1b8>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b12      	ldr	r3, [pc, #72]	@ (800ac00 <_vfiprintf_r+0x228>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4630      	mov	r0, r6
 800abba:	f7fd feb5 	bl	8008928 <_printf_float>
 800abbe:	4607      	mov	r7, r0
 800abc0:	1c78      	adds	r0, r7, #1
 800abc2:	d1d6      	bne.n	800ab72 <_vfiprintf_r+0x19a>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x1fe>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x1fe>
 800abd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abd2:	f7fe fbf7 	bl	80093c4 <__retarget_lock_release_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	065b      	lsls	r3, r3, #25
 800abda:	f53f af1f 	bmi.w	800aa1c <_vfiprintf_r+0x44>
 800abde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe0:	e71e      	b.n	800aa20 <_vfiprintf_r+0x48>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4b05      	ldr	r3, [pc, #20]	@ (800ac00 <_vfiprintf_r+0x228>)
 800abea:	a904      	add	r1, sp, #16
 800abec:	4630      	mov	r0, r6
 800abee:	f7fe f933 	bl	8008e58 <_printf_i>
 800abf2:	e7e4      	b.n	800abbe <_vfiprintf_r+0x1e6>
 800abf4:	0800b478 	.word	0x0800b478
 800abf8:	0800b482 	.word	0x0800b482
 800abfc:	08008929 	.word	0x08008929
 800ac00:	0800a9b3 	.word	0x0800a9b3
 800ac04:	0800b47e 	.word	0x0800b47e

0800ac08 <__sflush_r>:
 800ac08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	0716      	lsls	r6, r2, #28
 800ac12:	4605      	mov	r5, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	d454      	bmi.n	800acc2 <__sflush_r+0xba>
 800ac18:	684b      	ldr	r3, [r1, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dc02      	bgt.n	800ac24 <__sflush_r+0x1c>
 800ac1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dd48      	ble.n	800acb6 <__sflush_r+0xae>
 800ac24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d045      	beq.n	800acb6 <__sflush_r+0xae>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac30:	682f      	ldr	r7, [r5, #0]
 800ac32:	6a21      	ldr	r1, [r4, #32]
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	d030      	beq.n	800ac9a <__sflush_r+0x92>
 800ac38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	0759      	lsls	r1, r3, #29
 800ac3e:	d505      	bpl.n	800ac4c <__sflush_r+0x44>
 800ac40:	6863      	ldr	r3, [r4, #4]
 800ac42:	1ad2      	subs	r2, r2, r3
 800ac44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac46:	b10b      	cbz	r3, 800ac4c <__sflush_r+0x44>
 800ac48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b0      	blx	r6
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	d106      	bne.n	800ac6a <__sflush_r+0x62>
 800ac5c:	6829      	ldr	r1, [r5, #0]
 800ac5e:	291d      	cmp	r1, #29
 800ac60:	d82b      	bhi.n	800acba <__sflush_r+0xb2>
 800ac62:	4a2a      	ldr	r2, [pc, #168]	@ (800ad0c <__sflush_r+0x104>)
 800ac64:	410a      	asrs	r2, r1
 800ac66:	07d6      	lsls	r6, r2, #31
 800ac68:	d427      	bmi.n	800acba <__sflush_r+0xb2>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	6062      	str	r2, [r4, #4]
 800ac6e:	04d9      	lsls	r1, r3, #19
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	6022      	str	r2, [r4, #0]
 800ac74:	d504      	bpl.n	800ac80 <__sflush_r+0x78>
 800ac76:	1c42      	adds	r2, r0, #1
 800ac78:	d101      	bne.n	800ac7e <__sflush_r+0x76>
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	b903      	cbnz	r3, 800ac80 <__sflush_r+0x78>
 800ac7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac82:	602f      	str	r7, [r5, #0]
 800ac84:	b1b9      	cbz	r1, 800acb6 <__sflush_r+0xae>
 800ac86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	d002      	beq.n	800ac94 <__sflush_r+0x8c>
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f7ff f9f6 	bl	800a080 <_free_r>
 800ac94:	2300      	movs	r3, #0
 800ac96:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac98:	e00d      	b.n	800acb6 <__sflush_r+0xae>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	47b0      	blx	r6
 800aca0:	4602      	mov	r2, r0
 800aca2:	1c50      	adds	r0, r2, #1
 800aca4:	d1c9      	bne.n	800ac3a <__sflush_r+0x32>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d0c6      	beq.n	800ac3a <__sflush_r+0x32>
 800acac:	2b1d      	cmp	r3, #29
 800acae:	d001      	beq.n	800acb4 <__sflush_r+0xac>
 800acb0:	2b16      	cmp	r3, #22
 800acb2:	d11e      	bne.n	800acf2 <__sflush_r+0xea>
 800acb4:	602f      	str	r7, [r5, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	e022      	b.n	800ad00 <__sflush_r+0xf8>
 800acba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acbe:	b21b      	sxth	r3, r3
 800acc0:	e01b      	b.n	800acfa <__sflush_r+0xf2>
 800acc2:	690f      	ldr	r7, [r1, #16]
 800acc4:	2f00      	cmp	r7, #0
 800acc6:	d0f6      	beq.n	800acb6 <__sflush_r+0xae>
 800acc8:	0793      	lsls	r3, r2, #30
 800acca:	680e      	ldr	r6, [r1, #0]
 800accc:	bf08      	it	eq
 800acce:	694b      	ldreq	r3, [r1, #20]
 800acd0:	600f      	str	r7, [r1, #0]
 800acd2:	bf18      	it	ne
 800acd4:	2300      	movne	r3, #0
 800acd6:	eba6 0807 	sub.w	r8, r6, r7
 800acda:	608b      	str	r3, [r1, #8]
 800acdc:	f1b8 0f00 	cmp.w	r8, #0
 800ace0:	dde9      	ble.n	800acb6 <__sflush_r+0xae>
 800ace2:	6a21      	ldr	r1, [r4, #32]
 800ace4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ace6:	4643      	mov	r3, r8
 800ace8:	463a      	mov	r2, r7
 800acea:	4628      	mov	r0, r5
 800acec:	47b0      	blx	r6
 800acee:	2800      	cmp	r0, #0
 800acf0:	dc08      	bgt.n	800ad04 <__sflush_r+0xfc>
 800acf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad04:	4407      	add	r7, r0
 800ad06:	eba8 0800 	sub.w	r8, r8, r0
 800ad0a:	e7e7      	b.n	800acdc <__sflush_r+0xd4>
 800ad0c:	dfbffffe 	.word	0xdfbffffe

0800ad10 <_fflush_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	690b      	ldr	r3, [r1, #16]
 800ad14:	4605      	mov	r5, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	b913      	cbnz	r3, 800ad20 <_fflush_r+0x10>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	b118      	cbz	r0, 800ad2a <_fflush_r+0x1a>
 800ad22:	6a03      	ldr	r3, [r0, #32]
 800ad24:	b90b      	cbnz	r3, 800ad2a <_fflush_r+0x1a>
 800ad26:	f7fe fa43 	bl	80091b0 <__sinit>
 800ad2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0f3      	beq.n	800ad1a <_fflush_r+0xa>
 800ad32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad34:	07d0      	lsls	r0, r2, #31
 800ad36:	d404      	bmi.n	800ad42 <_fflush_r+0x32>
 800ad38:	0599      	lsls	r1, r3, #22
 800ad3a:	d402      	bmi.n	800ad42 <_fflush_r+0x32>
 800ad3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad3e:	f7fe fb40 	bl	80093c2 <__retarget_lock_acquire_recursive>
 800ad42:	4628      	mov	r0, r5
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7ff ff5f 	bl	800ac08 <__sflush_r>
 800ad4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	4605      	mov	r5, r0
 800ad50:	d4e4      	bmi.n	800ad1c <_fflush_r+0xc>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	059b      	lsls	r3, r3, #22
 800ad56:	d4e1      	bmi.n	800ad1c <_fflush_r+0xc>
 800ad58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad5a:	f7fe fb33 	bl	80093c4 <__retarget_lock_release_recursive>
 800ad5e:	e7dd      	b.n	800ad1c <_fflush_r+0xc>

0800ad60 <__swbuf_r>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	460e      	mov	r6, r1
 800ad64:	4614      	mov	r4, r2
 800ad66:	4605      	mov	r5, r0
 800ad68:	b118      	cbz	r0, 800ad72 <__swbuf_r+0x12>
 800ad6a:	6a03      	ldr	r3, [r0, #32]
 800ad6c:	b90b      	cbnz	r3, 800ad72 <__swbuf_r+0x12>
 800ad6e:	f7fe fa1f 	bl	80091b0 <__sinit>
 800ad72:	69a3      	ldr	r3, [r4, #24]
 800ad74:	60a3      	str	r3, [r4, #8]
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	071a      	lsls	r2, r3, #28
 800ad7a:	d501      	bpl.n	800ad80 <__swbuf_r+0x20>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	b943      	cbnz	r3, 800ad92 <__swbuf_r+0x32>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 f82a 	bl	800addc <__swsetup_r>
 800ad88:	b118      	cbz	r0, 800ad92 <__swbuf_r+0x32>
 800ad8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ad8e:	4638      	mov	r0, r7
 800ad90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	6922      	ldr	r2, [r4, #16]
 800ad96:	1a98      	subs	r0, r3, r2
 800ad98:	6963      	ldr	r3, [r4, #20]
 800ad9a:	b2f6      	uxtb	r6, r6
 800ad9c:	4283      	cmp	r3, r0
 800ad9e:	4637      	mov	r7, r6
 800ada0:	dc05      	bgt.n	800adae <__swbuf_r+0x4e>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4628      	mov	r0, r5
 800ada6:	f7ff ffb3 	bl	800ad10 <_fflush_r>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d1ed      	bne.n	800ad8a <__swbuf_r+0x2a>
 800adae:	68a3      	ldr	r3, [r4, #8]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	60a3      	str	r3, [r4, #8]
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	6022      	str	r2, [r4, #0]
 800adba:	701e      	strb	r6, [r3, #0]
 800adbc:	6962      	ldr	r2, [r4, #20]
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d004      	beq.n	800adce <__swbuf_r+0x6e>
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	07db      	lsls	r3, r3, #31
 800adc8:	d5e1      	bpl.n	800ad8e <__swbuf_r+0x2e>
 800adca:	2e0a      	cmp	r6, #10
 800adcc:	d1df      	bne.n	800ad8e <__swbuf_r+0x2e>
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	f7ff ff9d 	bl	800ad10 <_fflush_r>
 800add6:	2800      	cmp	r0, #0
 800add8:	d0d9      	beq.n	800ad8e <__swbuf_r+0x2e>
 800adda:	e7d6      	b.n	800ad8a <__swbuf_r+0x2a>

0800addc <__swsetup_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4b29      	ldr	r3, [pc, #164]	@ (800ae84 <__swsetup_r+0xa8>)
 800ade0:	4605      	mov	r5, r0
 800ade2:	6818      	ldr	r0, [r3, #0]
 800ade4:	460c      	mov	r4, r1
 800ade6:	b118      	cbz	r0, 800adf0 <__swsetup_r+0x14>
 800ade8:	6a03      	ldr	r3, [r0, #32]
 800adea:	b90b      	cbnz	r3, 800adf0 <__swsetup_r+0x14>
 800adec:	f7fe f9e0 	bl	80091b0 <__sinit>
 800adf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf4:	0719      	lsls	r1, r3, #28
 800adf6:	d422      	bmi.n	800ae3e <__swsetup_r+0x62>
 800adf8:	06da      	lsls	r2, r3, #27
 800adfa:	d407      	bmi.n	800ae0c <__swsetup_r+0x30>
 800adfc:	2209      	movs	r2, #9
 800adfe:	602a      	str	r2, [r5, #0]
 800ae00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0a:	e033      	b.n	800ae74 <__swsetup_r+0x98>
 800ae0c:	0758      	lsls	r0, r3, #29
 800ae0e:	d512      	bpl.n	800ae36 <__swsetup_r+0x5a>
 800ae10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae12:	b141      	cbz	r1, 800ae26 <__swsetup_r+0x4a>
 800ae14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae18:	4299      	cmp	r1, r3
 800ae1a:	d002      	beq.n	800ae22 <__swsetup_r+0x46>
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f7ff f92f 	bl	800a080 <_free_r>
 800ae22:	2300      	movs	r3, #0
 800ae24:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0308 	orr.w	r3, r3, #8
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	b94b      	cbnz	r3, 800ae56 <__swsetup_r+0x7a>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae4c:	d003      	beq.n	800ae56 <__swsetup_r+0x7a>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f8b3 	bl	800afbc <__smakebuf_r>
 800ae56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5a:	f013 0201 	ands.w	r2, r3, #1
 800ae5e:	d00a      	beq.n	800ae76 <__swsetup_r+0x9a>
 800ae60:	2200      	movs	r2, #0
 800ae62:	60a2      	str	r2, [r4, #8]
 800ae64:	6962      	ldr	r2, [r4, #20]
 800ae66:	4252      	negs	r2, r2
 800ae68:	61a2      	str	r2, [r4, #24]
 800ae6a:	6922      	ldr	r2, [r4, #16]
 800ae6c:	b942      	cbnz	r2, 800ae80 <__swsetup_r+0xa4>
 800ae6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae72:	d1c5      	bne.n	800ae00 <__swsetup_r+0x24>
 800ae74:	bd38      	pop	{r3, r4, r5, pc}
 800ae76:	0799      	lsls	r1, r3, #30
 800ae78:	bf58      	it	pl
 800ae7a:	6962      	ldrpl	r2, [r4, #20]
 800ae7c:	60a2      	str	r2, [r4, #8]
 800ae7e:	e7f4      	b.n	800ae6a <__swsetup_r+0x8e>
 800ae80:	2000      	movs	r0, #0
 800ae82:	e7f7      	b.n	800ae74 <__swsetup_r+0x98>
 800ae84:	2000001c 	.word	0x2000001c

0800ae88 <_sbrk_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d06      	ldr	r5, [pc, #24]	@ (800aea4 <_sbrk_r+0x1c>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	f7f7 f928 	bl	80020e8 <_sbrk>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_sbrk_r+0x1a>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_sbrk_r+0x1a>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	20001e7c 	.word	0x20001e7c

0800aea8 <__assert_func>:
 800aea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeaa:	4614      	mov	r4, r2
 800aeac:	461a      	mov	r2, r3
 800aeae:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <__assert_func+0x2c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	68d8      	ldr	r0, [r3, #12]
 800aeb6:	b954      	cbnz	r4, 800aece <__assert_func+0x26>
 800aeb8:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <__assert_func+0x30>)
 800aeba:	461c      	mov	r4, r3
 800aebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aec0:	9100      	str	r1, [sp, #0]
 800aec2:	462b      	mov	r3, r5
 800aec4:	4905      	ldr	r1, [pc, #20]	@ (800aedc <__assert_func+0x34>)
 800aec6:	f000 f841 	bl	800af4c <fiprintf>
 800aeca:	f000 f8d5 	bl	800b078 <abort>
 800aece:	4b04      	ldr	r3, [pc, #16]	@ (800aee0 <__assert_func+0x38>)
 800aed0:	e7f4      	b.n	800aebc <__assert_func+0x14>
 800aed2:	bf00      	nop
 800aed4:	2000001c 	.word	0x2000001c
 800aed8:	0800b4ce 	.word	0x0800b4ce
 800aedc:	0800b4a0 	.word	0x0800b4a0
 800aee0:	0800b493 	.word	0x0800b493

0800aee4 <_calloc_r>:
 800aee4:	b570      	push	{r4, r5, r6, lr}
 800aee6:	fba1 5402 	umull	r5, r4, r1, r2
 800aeea:	b93c      	cbnz	r4, 800aefc <_calloc_r+0x18>
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7ff f93b 	bl	800a168 <_malloc_r>
 800aef2:	4606      	mov	r6, r0
 800aef4:	b928      	cbnz	r0, 800af02 <_calloc_r+0x1e>
 800aef6:	2600      	movs	r6, #0
 800aef8:	4630      	mov	r0, r6
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	220c      	movs	r2, #12
 800aefe:	6002      	str	r2, [r0, #0]
 800af00:	e7f9      	b.n	800aef6 <_calloc_r+0x12>
 800af02:	462a      	mov	r2, r5
 800af04:	4621      	mov	r1, r4
 800af06:	f7fe f9de 	bl	80092c6 <memset>
 800af0a:	e7f5      	b.n	800aef8 <_calloc_r+0x14>

0800af0c <__ascii_mbtowc>:
 800af0c:	b082      	sub	sp, #8
 800af0e:	b901      	cbnz	r1, 800af12 <__ascii_mbtowc+0x6>
 800af10:	a901      	add	r1, sp, #4
 800af12:	b142      	cbz	r2, 800af26 <__ascii_mbtowc+0x1a>
 800af14:	b14b      	cbz	r3, 800af2a <__ascii_mbtowc+0x1e>
 800af16:	7813      	ldrb	r3, [r2, #0]
 800af18:	600b      	str	r3, [r1, #0]
 800af1a:	7812      	ldrb	r2, [r2, #0]
 800af1c:	1e10      	subs	r0, r2, #0
 800af1e:	bf18      	it	ne
 800af20:	2001      	movne	r0, #1
 800af22:	b002      	add	sp, #8
 800af24:	4770      	bx	lr
 800af26:	4610      	mov	r0, r2
 800af28:	e7fb      	b.n	800af22 <__ascii_mbtowc+0x16>
 800af2a:	f06f 0001 	mvn.w	r0, #1
 800af2e:	e7f8      	b.n	800af22 <__ascii_mbtowc+0x16>

0800af30 <__ascii_wctomb>:
 800af30:	4603      	mov	r3, r0
 800af32:	4608      	mov	r0, r1
 800af34:	b141      	cbz	r1, 800af48 <__ascii_wctomb+0x18>
 800af36:	2aff      	cmp	r2, #255	@ 0xff
 800af38:	d904      	bls.n	800af44 <__ascii_wctomb+0x14>
 800af3a:	228a      	movs	r2, #138	@ 0x8a
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	f04f 30ff 	mov.w	r0, #4294967295
 800af42:	4770      	bx	lr
 800af44:	700a      	strb	r2, [r1, #0]
 800af46:	2001      	movs	r0, #1
 800af48:	4770      	bx	lr
	...

0800af4c <fiprintf>:
 800af4c:	b40e      	push	{r1, r2, r3}
 800af4e:	b503      	push	{r0, r1, lr}
 800af50:	4601      	mov	r1, r0
 800af52:	ab03      	add	r3, sp, #12
 800af54:	4805      	ldr	r0, [pc, #20]	@ (800af6c <fiprintf+0x20>)
 800af56:	f853 2b04 	ldr.w	r2, [r3], #4
 800af5a:	6800      	ldr	r0, [r0, #0]
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	f7ff fd3b 	bl	800a9d8 <_vfiprintf_r>
 800af62:	b002      	add	sp, #8
 800af64:	f85d eb04 	ldr.w	lr, [sp], #4
 800af68:	b003      	add	sp, #12
 800af6a:	4770      	bx	lr
 800af6c:	2000001c 	.word	0x2000001c

0800af70 <__swhatbuf_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	460c      	mov	r4, r1
 800af74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af78:	2900      	cmp	r1, #0
 800af7a:	b096      	sub	sp, #88	@ 0x58
 800af7c:	4615      	mov	r5, r2
 800af7e:	461e      	mov	r6, r3
 800af80:	da0d      	bge.n	800af9e <__swhatbuf_r+0x2e>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af88:	f04f 0100 	mov.w	r1, #0
 800af8c:	bf14      	ite	ne
 800af8e:	2340      	movne	r3, #64	@ 0x40
 800af90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af94:	2000      	movs	r0, #0
 800af96:	6031      	str	r1, [r6, #0]
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	b016      	add	sp, #88	@ 0x58
 800af9c:	bd70      	pop	{r4, r5, r6, pc}
 800af9e:	466a      	mov	r2, sp
 800afa0:	f000 f848 	bl	800b034 <_fstat_r>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	dbec      	blt.n	800af82 <__swhatbuf_r+0x12>
 800afa8:	9901      	ldr	r1, [sp, #4]
 800afaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afb2:	4259      	negs	r1, r3
 800afb4:	4159      	adcs	r1, r3
 800afb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afba:	e7eb      	b.n	800af94 <__swhatbuf_r+0x24>

0800afbc <__smakebuf_r>:
 800afbc:	898b      	ldrh	r3, [r1, #12]
 800afbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc0:	079d      	lsls	r5, r3, #30
 800afc2:	4606      	mov	r6, r0
 800afc4:	460c      	mov	r4, r1
 800afc6:	d507      	bpl.n	800afd8 <__smakebuf_r+0x1c>
 800afc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	2301      	movs	r3, #1
 800afd2:	6163      	str	r3, [r4, #20]
 800afd4:	b003      	add	sp, #12
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	ab01      	add	r3, sp, #4
 800afda:	466a      	mov	r2, sp
 800afdc:	f7ff ffc8 	bl	800af70 <__swhatbuf_r>
 800afe0:	9f00      	ldr	r7, [sp, #0]
 800afe2:	4605      	mov	r5, r0
 800afe4:	4639      	mov	r1, r7
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7ff f8be 	bl	800a168 <_malloc_r>
 800afec:	b948      	cbnz	r0, 800b002 <__smakebuf_r+0x46>
 800afee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff2:	059a      	lsls	r2, r3, #22
 800aff4:	d4ee      	bmi.n	800afd4 <__smakebuf_r+0x18>
 800aff6:	f023 0303 	bic.w	r3, r3, #3
 800affa:	f043 0302 	orr.w	r3, r3, #2
 800affe:	81a3      	strh	r3, [r4, #12]
 800b000:	e7e2      	b.n	800afc8 <__smakebuf_r+0xc>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	6020      	str	r0, [r4, #0]
 800b006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b012:	b15b      	cbz	r3, 800b02c <__smakebuf_r+0x70>
 800b014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b018:	4630      	mov	r0, r6
 800b01a:	f000 f81d 	bl	800b058 <_isatty_r>
 800b01e:	b128      	cbz	r0, 800b02c <__smakebuf_r+0x70>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	431d      	orrs	r5, r3
 800b030:	81a5      	strh	r5, [r4, #12]
 800b032:	e7cf      	b.n	800afd4 <__smakebuf_r+0x18>

0800b034 <_fstat_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	@ (800b054 <_fstat_r+0x20>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	f7f7 f829 	bl	8002098 <_fstat>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d102      	bne.n	800b050 <_fstat_r+0x1c>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b103      	cbz	r3, 800b050 <_fstat_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	bf00      	nop
 800b054:	20001e7c 	.word	0x20001e7c

0800b058 <_isatty_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	@ (800b074 <_isatty_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f7 f828 	bl	80020b8 <_isatty>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_isatty_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_isatty_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20001e7c 	.word	0x20001e7c

0800b078 <abort>:
 800b078:	b508      	push	{r3, lr}
 800b07a:	2006      	movs	r0, #6
 800b07c:	f000 f82c 	bl	800b0d8 <raise>
 800b080:	2001      	movs	r0, #1
 800b082:	f7f6 ffb9 	bl	8001ff8 <_exit>

0800b086 <_raise_r>:
 800b086:	291f      	cmp	r1, #31
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4605      	mov	r5, r0
 800b08c:	460c      	mov	r4, r1
 800b08e:	d904      	bls.n	800b09a <_raise_r+0x14>
 800b090:	2316      	movs	r3, #22
 800b092:	6003      	str	r3, [r0, #0]
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b09c:	b112      	cbz	r2, 800b0a4 <_raise_r+0x1e>
 800b09e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0a2:	b94b      	cbnz	r3, 800b0b8 <_raise_r+0x32>
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 f831 	bl	800b10c <_getpid_r>
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0b4:	f000 b818 	b.w	800b0e8 <_kill_r>
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d00a      	beq.n	800b0d2 <_raise_r+0x4c>
 800b0bc:	1c59      	adds	r1, r3, #1
 800b0be:	d103      	bne.n	800b0c8 <_raise_r+0x42>
 800b0c0:	2316      	movs	r3, #22
 800b0c2:	6003      	str	r3, [r0, #0]
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	e7e7      	b.n	800b098 <_raise_r+0x12>
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4798      	blx	r3
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e7e0      	b.n	800b098 <_raise_r+0x12>
	...

0800b0d8 <raise>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	@ (800b0e4 <raise+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f7ff bfd2 	b.w	800b086 <_raise_r>
 800b0e2:	bf00      	nop
 800b0e4:	2000001c 	.word	0x2000001c

0800b0e8 <_kill_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	@ (800b108 <_kill_r+0x20>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	f7f6 ff6f 	bl	8001fd8 <_kill>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d102      	bne.n	800b104 <_kill_r+0x1c>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	b103      	cbz	r3, 800b104 <_kill_r+0x1c>
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	bd38      	pop	{r3, r4, r5, pc}
 800b106:	bf00      	nop
 800b108:	20001e7c 	.word	0x20001e7c

0800b10c <_getpid_r>:
 800b10c:	f7f6 bf5c 	b.w	8001fc8 <_getpid>

0800b110 <_init>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr

0800b11c <_fini>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr
